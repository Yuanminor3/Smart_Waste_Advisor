/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.05.2025 19:38:44

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 30
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 60
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 50032;
#else
constexpr int kTensorArenaSize = 49008;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 1, 2, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[10] = { -1445, -502, -55, 777, 181, -37, -158, 505, 116, -164, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00021960624144412577, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[10*16] = { 
  -80, -31, -31, 35, 67, -19, -35, -65, 65, -11, 43, 60, -46, -13, -57, 17, 
  -31, 56, 25, 14, -11, -79, 100, -15, -67, -34, -83, -23, -42, -17, -22, -19, 
  -53, 42, -70, 21, -39, -3, -72, -48, 41, -7, -7, 56, 10, 37, 14, -54, 
  8, 22, -15, 15, -40, -79, -11, 88, -31, -55, -55, 8, -80, 74, -13, 64, 
  8, -31, -51, 12, -127, 46, -16, -51, 23, -20, -7, -8, 23, -39, -3, -12, 
  -13, -50, -8, -50, -29, 26, 57, -10, 36, 0, 61, 22, -29, -39, -80, -13, 
  -1, -43, 46, -46, 10, -55, -37, -44, 40, -45, 25, 19, -34, 19, 31, -74, 
  -8, -24, -63, -32, -21, 19, 28, -24, 19, 37, 23, -53, -32, -50, 46, 0, 
  16, 55, -50, 15, 54, -6, -13, 35, -63, 24, -68, 86, -14, -67, -58, -49, 
  -36, -32, -85, -12, -45, -26, -31, -15, 4, 33, -9, -14, 102, -66, 10, 2, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0083511006087064743, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { -427, 114, 728, -87, -341, -64, 240, 76, 452, -275, 176, -132, 453, 375, 1122, -103, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00011690802784869447, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*102] = { 
  -15, -57, 5, -7, -62, 20, 8, 36, 11, -43, -3, 40, 5, -19, 22, 45, 46, 11, -14, -49, -31, -16, 3, 22, -10, -77, 23, -3, 25, -34, 15, 11, -33, 62, 11, 31, 32, -48, -9, 35, -25, -72, -28, -12, 16, 13, 14, -10, -64, 32, 42, 35, 32, -17, -101, -14, 4, -32, -40, -20, 57, 10, 25, 27, 46, 1, -42, -2, 55, 9, 28, -11, -19, 53, 42, -25, 23, 42, 45, -10, 16, -5, 88, 36, -38, 37, 46, -41, 21, -24, 14, 11, -6, -24, -17, -9, -14, 10, -29, 9, -35, -62, 
  30, -62, -35, 31, 33, -25, 25, 35, 61, -32, 65, 24, -12, -8, -45, -34, 46, 18, -24, 0, -13, -16, -61, -10, -49, 29, -21, 57, 37, 43, -29, 33, 43, 29, -53, 29, 8, 12, -18, -34, -5, -33, -2, -23, -39, -33, 50, -42, 18, 16, 23, 15, -8, -11, 1, 28, 29, 3, 19, -53, 6, 19, -33, 17, -35, -10, -53, -43, 15, 37, 13, 2, 30, 37, 40, 43, 11, 37, 38, -24, 9, 17, 25, 5, 11, 27, -22, -34, -32, 21, -19, 11, 0, 18, 27, -3, 55, 28, 9, -24, -37, -31, 
  2, -27, 17, -21, 36, 25, 24, -79, -31, 29, -30, -39, 9, -7, -29, 21, 16, -26, 18, 37, 13, 15, -37, -3, -57, -33, -7, 10, 37, 4, -26, 37, 23, 0, 12, 7, -6, -9, -22, -35, -6, 36, -4, 30, 20, 38, 55, 55, 19, 36, -6, 1, 1, -64, 88, -45, 37, -11, -11, 8, 41, -13, -11, 7, -25, 18, 21, 22, 7, -17, 8, -28, -2, -19, 23, -53, -15, -86, -88, 49, 59, 4, -3, -36, 12, 15, 35, -11, 4, 58, -63, 16, 41, -31, 26, -14, 37, -13, 3, 52, -49, 79, 
  -31, 8, 29, 24, -13, 20, 29, 41, 11, 36, -7, 56, -25, -45, 18, 12, -47, 1, -34, -21, 37, -6, -50, 12, 16, 35, 4, 6, 36, -17, -35, 46, -14, -11, 22, 5, 16, -28, -4, -1, -29, -51, 11, -13, 25, -27, -40, -24, -49, -11, 10, 30, -26, -10, 17, 29, -43, 12, -4, 33, -13, -15, -40, -44, 27, 55, 16, 22, 30, -26, -39, 25, -48, 4, 37, -18, -16, -46, 3, -6, 53, -4, 15, 2, -29, -18, -43, -26, -36, 39, -7, 2, -18, -40, 18, -23, -27, -11, 31, 29, -8, 34, 
  -48, -14, 10, 24, -18, 8, -41, -6, -32, 57, 69, 64, -17, 44, 2, -22, -23, -1, 18, 23, -28, 26, 30, 12, 16, -24, -17, 44, 6, 11, -29, 42, 35, -45, 6, -12, 55, -4, -49, -3, -7, 20, 6, -8, 5, 12, 51, 4, -68, -56, 42, 8, -1, 39, 6, -12, 10, 10, -16, 1, -5, 3, 33, -54, -41, 6, 11, -54, 56, -8, 6, 4, 38, 35, -16, -14, 40, 68, -26, -5, 19, -34, -36, 39, -33, -39, 36, 18, -1, 30, 26, 10, -1, -37, -31, 9, 5, 23, 44, 29, -79, 3, 
  -41, 59, -15, -34, -6, 47, -17, -4, 14, -15, 82, -14, 8, 0, 42, -39, 40, -27, 9, -61, -9, 26, 57, 28, -1, 22, 19, 9, 16, -5, 2, 19, 34, -32, -43, -2, -2, 36, -58, 31, -9, -5, -16, -38, -15, 16, 29, -20, 107, -27, -41, 39, -7, -2, -62, 16, -52, -26, 26, 9, 23, -64, -10, 47, 24, -26, -11, -15, -39, -13, 52, 26, 27, -21, -83, 17, -14, -26, 34, 30, 40, 6, -61, 89, -6, -12, 18, 7, -26, 9, 22, 10, -61, -21, 45, -37, 6, -37, -13, -41, -1, -111, 
  -3, -16, -19, -20, 20, 3, 34, -6, -11, -66, 14, -28, -2, 2, 49, -59, -38, 18, 19, -5, 96, -8, -34, -16, 13, -39, 22, -4, 16, -53, -43, 39, 40, 36, -4, -10, 23, 32, 23, 3, 85, 30, 10, 78, -37, 12, 3, 52, 16, -9, -19, 30, -38, 29, 54, -35, -5, -44, 28, -17, -6, -9, -49, -21, -16, -97, 16, 2, -10, -11, 14, 25, 69, -40, -18, -62, 25, -49, 15, -14, 19, 26, 44, -29, 48, 9, -45, -15, 7, 21, 13, -8, 8, 10, 20, -2, 7, -54, 63, -9, -22, 25, 
  13, -13, 17, 12, -30, -7, 28, -22, 56, 5, -1, 35, 61, 19, 2, 35, 0, 27, 13, 9, -29, 19, -48, -31, -115, 33, -24, 43, 20, -52, -22, -33, -46, 56, -45, 9, 0, -16, 47, -20, -18, -12, 5, 5, 3, 3, -34, -45, -127, 13, -16, -35, -4, -33, -73, 21, -55, 21, 43, -59, 66, 6, 52, -7, 10, 55, -18, -53, -39, 43, -56, 3, -2, 52, 16, 31, -42, 61, 83, -26, -14, -1, 10, -39, 24, 22, -43, -12, -6, -25, -7, 11, -33, 0, -8, -40, 67, -62, -12, 63, 14, -20, 
  -28, 55, 27, -37, 17, -8, -20, -24, 16, 67, -31, -22, -1, -67, 38, 6, 22, -11, -11, -27, 47, 25, -3, 29, -45, 72, 2, -35, 21, 106, 28, 3, -5, -11, 73, -25, -14, -12, -66, 10, 2, 88, -40, -39, -7, 61, -6, 9, 70, 36, -47, 40, 18, -23, 20, 2, 18, -18, -39, 43, 16, -56, -52, 16, 1, 27, 42, 11, 18, -7, 16, -16, 27, -61, -31, -9, -12, -47, -31, 3, -2, -38, -57, -72, 14, -11, 44, 49, -19, 17, 14, -10, 48, 43, 2, -6, 32, 38, 17, 1, 21, 68, 
  24, -4, 2, -45, 13, -43, 27, 2, -44, 19, 17, -17, 10, -45, -33, 20, 22, 4, 3, -49, -6, 9, -35, 21, 41, 45, -13, 33, 21, 33, -36, -18, -13, -5, 24, -48, 23, -40, 40, 37, -37, 25, -10, 18, 25, -16, 6, 25, -48, -12, 13, -35, -5, 28, 31, -29, -36, -36, 32, 29, 35, -7, -9, -24, 30, 24, 6, 8, -3, -45, -27, -41, -29, 1, -39, 4, -23, -3, -16, 15, -46, -48, 3, 31, -5, -47, -32, 42, -42, -14, 25, 8, 31, -3, -32, -33, -30, -7, -44, -46, 39, -21, 
  20, -66, 35, 27, 16, -27, -31, -32, -37, 15, -37, -29, 8, -51, 27, -31, -16, 19, -4, 18, 27, -22, -53, 39, 11, -4, -2, -85, -12, 32, -32, -14, 10, -1, 3, -16, 9, -24, 5, 21, -31, -17, 24, 16, 20, 46, -16, 35, -44, -22, -24, 30, 7, 9, -36, -24, -18, -26, 2, -54, 4, -51, -62, 3, -24, -34, 5, 38, 27, -19, -33, 22, -9, 13, -5, 29, -47, -27, -16, 35, 35, 28, -32, -64, -14, 8, 37, 42, -53, -13, 5, -25, -70, 18, -29, 27, -31, 38, 26, -10, 48, -23, 
  -33, 29, 31, 30, 4, -31, 18, 76, 44, 41, 37, 48, -53, 3, -46, 6, 26, -22, -11, 20, -64, -25, 8, -57, 54, 6, 8, 63, 52, 16, -44, -12, -6, 26, 7, -42, 48, 21, -13, 18, 15, -41, 51, -18, 22, 41, -28, -44, -41, -1, 37, 40, 40, -11, -37, 44, -62, 57, -26, -21, -52, 36, -4, -54, -53, 66, -12, 23, -16, -36, 23, 3, -10, 1, -28, 56, 43, 20, 46, -12, -4, -8, 14, 50, 0, 0, 45, -4, -54, 1, 24, 22, -27, -51, -4, 55, -6, -15, 5, -27, -22, -28, 
  63, 34, 47, -34, 18, -4, -43, -42, 21, 5, -25, 27, -15, -47, -17, -24, -25, -21, 53, 2, -35, -35, 52, 43, 76, 24, 30, -51, 3, 69, 55, -33, 59, -8, 1, 18, -55, -9, 39, -7, -46, -84, -23, 12, -55, -41, 53, 39, 61, -42, 3, -34, -38, 23, -28, -11, -50, -43, -10, 14, -2, -20, -36, 31, 20, -21, 15, 30, -15, 4, 13, -44, -14, 28, -5, 22, -28, 44, -21, 22, -22, 21, -7, 4, -22, 18, -34, -15, -49, 5, 32, 4, 11, -40, 7, -42, -37, -16, 2, -7, -40, 17, 
  -2, -65, -18, 11, -10, -32, 34, -6, 39, -2, -67, -13, 71, 0, 10, 38, 17, 17, 5, 53, -45, -4, 25, -15, -71, 43, 0, 10, -25, -25, 21, -14, -20, 17, 35, 11, 3, -12, -16, -12, -10, 35, 29, -36, 51, 13, -42, -14, -21, -11, -13, -8, -4, -44, -2, -32, 2, 56, -23, 53, 40, 5, 10, -53, -27, 6, -2, -26, -3, 73, 13, -72, -14, 9, 36, -4, -23, -31, 37, 20, -7, 28, 50, -70, 33, 26, -31, 4, 30, 16, -29, -37, -10, 14, 10, 35, 66, 11, -10, 11, 27, -12, 
  17, -3, 51, -16, 0, 48, -23, -98, -41, 16, 38, -62, 48, 31, 6, 20, 40, 35, -6, 17, 9, -31, 7, -15, -7, -29, 49, -58, -18, 75, -7, 16, -34, 26, 64, 14, -46, 31, 31, -67, -45, 23, -30, 1, 9, 23, -4, -18, 5, 6, 24, -41, 8, 4, 59, -36, 68, 7, -61, 51, 17, -65, -25, 38, -15, 39, -33, -26, 42, 77, -3, -47, -67, 3, 36, -10, -9, -78, -67, -5, 39, -16, -30, -1, -38, 62, 8, 12, -42, -4, 48, 17, 5, -36, -16, 21, -18, -14, -65, 26, -6, 47, 
  8, -37, -1, 40, 22, -7, -22, -33, 34, 12, -30, -33, 45, -4, -1, -17, 13, 30, 1, 27, 17, 22, -42, 18, -15, 51, -22, -23, -7, -25, -34, -42, 2, 27, -28, 69, -38, 20, 20, 12, -37, -29, 47, 5, 41, -26, 6, 17, -52, 34, -34, 17, 1, 2, -5, -2, -41, -8, -10, -32, 36, 67, 46, 7, 35, 17, 40, -43, -20, 13, -64, 20, -5, -31, 23, -34, -19, -3, -4, -18, -22, -4, 49, -11, -49, -24, -52, 5, 13, -1, 14, 7, -32, 25, -59, 24, 73, 13, 22, 28, 45, 5, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 16,102 } };
const TfArray<1, float> quant6_scale = { 1, { 0.004968591034412384, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[102] = { 249, 37595, -9582, 32314, 48190, 16726, 24614, 9345, 34066, 30840, -32924, 12239, 15180, 35956, -15938, 8872, -8202, 12073, 24417, -8959, -3254, 8564, 32573, 25670, -26637, 36210, 11863, -3948, 34785, 7935, 256, 3763, 9073, 30816, 20889, -11112, -1424, 52187, 25914, 8677, -1494, 8956, -18975, 463, 20550, -2862, 14455, -2650, 662, 9419, -5560, 24978, 6013, -11640, -17008, 2817, 22940, -16126, 12935, 36717, 9389, -12592, -15729, 9002, 13817, 10721, -1522, -100, 495, -7307, 24549, -3501, 40989, 28889, 32597, 37284, 3729, 26508, 22196, 31672, -334, -2312, 17959, 20620, 5122, 29704, 20168, -30569, -7715, 10072, -4616, 10079, 35431, -12028, 19424, 10692, 5258, 40313, -24947, 7567, 12401, 19516, };
const TfArray<1, int> tensor_dimension7 = { 1, { 102 } };
const TfArray<102, float> quant7_scale = { 102, { 0.00021950571681372821, 0.00022566529514733702, 0.00021659754565916955, 0.00022816138516645879, 0.00019584335677791387, 0.00021723141253460199, 0.00024737152853049338, 0.00025871355319395661, 0.00023242241877596825, 0.00017359667981509119, 0.0002650542592164129, 0.00029996834928169847, 0.00019078535842709243, 0.00025078622275032103, 0.00025059402105398476, 0.00023856607731431723, 0.00016704721201676875, 0.00038186649908311665, 0.00020807313558179885, 0.00019402403268031776, 0.00024062191369011998, 0.00020938226953148842, 0.00021077666315250099, 0.00032441233634017408, 0.00025171932065859437, 0.00018330107559449971, 0.00023183430312201381, 0.00020012097957078367, 0.00022327118495013565, 0.000228239776333794, 0.00027145797503180802, 0.00020329479593783617, 0.00030305128893814981, 0.00017366191605105996, 0.00021329396986402571, 0.00056136929197236896, 0.0001854200818343088, 0.00021520229347515851, 0.00020867070998065174, 0.00027957881684415042, 0.00016233771748375148, 0.00019914527365472168, 0.00021003853180445731, 0.00028248803573660553, 0.00018374796491116285, 0.00018889378407038748, 0.00040437155985273421, 0.00021871476201340556, 0.00023472256725654006, 0.00023534480715170503, 0.00032921886304393411, 0.00020092364866286516, 0.00019222171977162361, 0.00020580126147251576, 0.00016650880570523441, 0.00029510326567105949, 0.00019230991892982274, 0.0002255072322441265, 0.00019437265291344374, 0.00021631797426380217, 0.00025193823967128992, 0.00023817989858798683, 0.00020072383631486446, 0.00018804702267516404, 0.0001862241915659979, 0.0002119299751939252, 0.00027435962692834437, 0.00023102285922504961, 0.00025373839889653027, 0.00020878558279946446, 0.00029193572117947042, 0.00025308236945420504, 0.00020929123274981976, 0.00020389239944051951, 0.00020883484103251249, 0.00029660479049198329, 0.00026002319646067917, 0.0002658021985553205, 0.0002074074000120163, 0.00018652559083420783, 0.00018543713667895645, 0.00025651889154687524, 0.00027336564380675554, 0.00019034813158214092, 0.00021464466408360749, 0.00021024692978244275, 0.00025221030227839947, 0.00026606157189235091, 0.00021413713693618774, 0.00023194575624074787, 0.00022591718879994005, 0.00023325280926655978, 0.00022969415294937789, 0.00020201396546326578, 0.00019132882880512625, 0.0001722251035971567, 0.00031557469628751278, 0.00015658857591915876, 0.00016481392958667129, 0.00017586047761142254, 0.00025595002807676792, 0.00027097051497548819, } };
const TfArray<102, int> quant7_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[102*1*1*102] = { 
  /* [0][0][][] */ -43,-13,-62,-14,-16,-21,31,-53,-7,-5,-51,16,17,34,61,57,1,4,63,54,51,36,37,55,44,14,15,-14,64,-14,-44,-20,23,37,24,-12,-29,-74,23,-60,-58,-67,-20,-22,-36,-21,-88,-20,13,-40,-30,77,-3,-13,-44,60,72,49,42,18,-6,27,8,-36,51,34,-56,-23,-32,-74,-57,78,-9,-7,19,-48,-21,78,-10,41,-127,37,-73,6,50,18,-38,-10,0,-27,71,8,28,-4,-96,33,73,12,-11,-21,-18,-59, 
  /* [1][0][][] */ -16,36,38,16,6,33,-42,57,-5,-3,-66,36,-48,-25,39,8,-51,24,30,-14,38,2,-44,31,-74,4,-65,-12,0,-1,21,1,-61,-1,-113,-74,23,11,55,83,-66,107,2,73,35,-57,-34,-31,54,-29,11,-104,-12,-69,-15,-9,60,7,-56,22,-22,0,-24,-43,45,-25,-26,2,-20,52,-72,94,12,-11,-13,-33,42,19,-39,41,-80,8,-127,-4,29,-34,-20,-54,102,-25,-16,-11,-20,28,-1,-33,-74,-67,-19,-36,43,-35, 
  /* [2][0][][] */ 37,4,16,61,78,-33,-33,-105,-127,4,59,30,14,-1,-7,-14,82,28,30,-25,-25,-38,46,-20,82,-3,66,-62,-42,10,-13,-15,-25,23,-60,52,10,-99,-7,-34,-1,-75,-74,-8,-16,35,62,40,-33,-55,-26,17,26,-46,50,-5,-13,-13,24,47,21,-7,26,-35,-47,100,6,55,7,82,60,-43,47,-11,-40,15,-10,3,100,47,-28,30,80,0,4,-25,40,-8,0,59,70,-3,42,9,-23,8,36,-2,0,-16,-94,5, 
  /* [3][0][][] */ 5,58,-69,-1,-42,-45,-6,-38,-16,-38,-7,-65,6,13,-33,50,85,44,9,-4,-52,15,-9,-80,78,-6,11,-76,-127,56,43,37,37,-30,-13,15,2,-49,-57,-6,11,8,-45,-69,-58,15,85,-74,35,26,45,-29,-97,39,-16,-98,-12,4,0,53,64,-3,15,11,51,31,-7,-15,26,44,-64,-33,9,-36,1,28,5,-79,-94,-49,29,-102,-27,78,-39,-45,-34,12,-70,-10,41,-39,-92,-33,0,50,-20,-51,-9,-82,-56,34, 
  /* [4][0][][] */ 20,3,19,8,-10,-104,-70,-59,-104,-24,-57,-58,42,15,-26,-83,-24,-13,-25,-63,-108,-47,-13,32,-58,60,-7,-11,-86,-29,-127,42,48,-13,-31,6,12,-28,-79,-19,1,0,67,59,73,-17,-49,81,32,-42,-38,16,15,-91,-52,-37,49,-89,7,23,-71,-55,25,-18,-28,66,-1,40,-9,2,8,-28,32,44,39,42,17,5,-16,76,1,24,-18,-13,-59,-42,39,-32,-119,-11,15,-39,17,3,32,10,-6,5,48,35,-66,-6, 
  /* [5][0][][] */ -28,-10,0,-77,-91,34,-31,-39,-43,46,9,21,78,-45,14,-8,-33,-25,1,11,-13,30,39,-73,127,-6,-75,32,-78,-25,88,-26,-40,-56,81,-36,-68,53,91,35,-63,16,-43,12,-2,33,-30,6,-26,-36,70,57,29,4,4,-55,-52,8,89,-33,-30,68,37,-82,8,15,-16,-23,30,-32,-39,-41,-4,-78,-39,-40,9,-93,-25,5,-4,5,35,40,6,-26,20,4,8,-6,81,23,-11,-12,39,35,14,-54,-18,1,31,-45, 
  /* [6][0][][] */ 49,-30,-33,0,-53,20,-25,4,38,-48,-12,6,-40,-88,-53,80,88,29,-95,-38,-26,63,-13,75,-22,-40,-79,32,-59,-11,-25,-75,-61,39,-51,28,9,-13,52,-41,52,42,-96,-9,-23,-7,-41,6,-17,-20,27,-51,-29,53,-22,-62,-13,0,43,72,-78,-9,24,-35,-47,-25,-77,-34,-95,15,-11,-12,70,27,29,-39,51,-9,-26,66,33,-1,43,-32,20,34,-31,-45,-30,-30,-35,1,-84,-33,127,-38,-14,-23,-21,64,58,-40, 
  /* [7][0][][] */ -2,20,-10,74,-15,-9,20,-75,21,5,-4,34,23,-56,-16,-18,25,29,-24,-52,-2,1,-8,-17,-11,22,108,15,10,0,15,80,26,-77,-62,-56,1,5,-18,-1,-96,18,-57,7,-19,-9,-127,-13,9,-28,-43,43,87,-17,-110,-4,14,10,4,-62,56,6,-23,-31,26,62,-24,6,2,40,-28,-41,57,28,-69,46,13,18,33,23,16,-5,17,-53,-15,48,-47,-106,-21,3,-11,-6,75,28,-4,31,-5,14,24,-28,6,-21, 
  /* [8][0][][] */ -12,28,96,-31,-9,-35,-82,3,10,33,29,77,-26,41,-8,-61,-39,-31,-68,-16,-35,0,41,-51,-97,-20,-34,-73,21,25,14,76,-24,-25,-25,-6,19,-49,23,59,19,-36,-34,16,7,56,42,-89,-7,-4,-16,114,51,-50,16,-98,-52,31,-86,55,3,58,31,49,-108,-13,-13,-24,4,28,-7,-3,0,30,14,-84,7,-11,59,-34,-67,-4,-27,-127,-50,-82,-63,-12,-127,-42,104,-49,-106,66,-4,27,-31,-7,-118,-49,87,-51, 
  /* [9][0][][] */ -39,-32,18,-42,39,31,-32,32,75,55,-30,1,36,-98,-68,-88,17,109,21,-22,-67,11,9,-73,21,-83,53,-39,95,-2,44,2,54,-15,13,-40,-2,-34,-11,11,-62,72,-13,-105,54,8,-93,15,3,-118,-24,-42,-59,31,-5,-3,-88,70,31,127,-25,56,4,-52,-30,8,64,34,-7,-21,-8,-51,40,17,-1,21,-10,10,0,58,-29,-44,-66,7,114,87,122,66,4,40,-29,-18,-81,-94,-100,15,-33,-52,-97,-110,-36,-49, 
  /* [10][0][][] */ 60,-32,-43,48,19,40,40,-52,56,32,-41,-14,-5,12,30,-2,-32,24,2,7,2,36,44,104,72,-66,18,55,46,51,-46,21,16,60,22,-14,38,-78,69,-26,13,-45,-78,-66,25,47,45,-50,31,-48,66,-38,127,-4,14,21,-43,28,-65,-19,-3,-11,-26,-12,67,-17,-8,-22,53,-33,-12,33,-37,-20,41,47,-33,49,-51,-85,-46,-54,43,-58,12,60,29,26,-2,49,4,70,10,20,71,-29,-25,63,31,34,-28,55, 
  /* [11][0][][] */ 76,-51,11,75,22,-34,6,-26,21,15,23,-10,8,19,66,-36,45,7,36,-65,-118,24,39,-56,-21,-20,15,-32,35,-20,-9,2,-50,3,-24,9,-15,-71,-13,7,-14,-25,-24,3,-33,47,-18,-21,32,-6,-38,-37,10,12,-32,2,-22,-6,24,-62,22,10,32,-42,51,23,-14,20,3,33,-47,-18,21,29,-1,54,20,14,-1,-52,-29,-55,17,6,-12,-11,-26,2,7,4,39,-51,35,-5,9,-6,78,-10,73,-42,-127,-31, 
  /* [12][0][][] */ -89,-77,-89,2,-16,-9,-11,-85,-22,72,-39,94,20,31,-15,0,-84,80,34,-24,-25,32,-26,-14,57,15,16,54,-25,58,-12,38,86,-32,-19,-5,-78,-68,1,89,-53,-1,35,31,-18,1,6,38,8,-26,-76,-127,-12,25,65,-55,-7,39,15,-41,124,-71,3,-57,-6,82,85,7,-44,9,45,-62,103,-46,-84,-77,25,3,69,21,-84,-120,56,-46,24,-57,-46,-75,21,-10,-15,49,-22,81,5,46,12,-40,-18,32,-32,-65, 
  /* [13][0][][] */ -41,-4,5,-35,-18,-30,-40,-44,-92,14,-44,5,-21,-12,-7,6,90,31,-61,-14,-12,48,37,37,-27,0,-28,89,47,71,15,26,-31,-3,50,48,-4,-35,14,46,0,1,-30,-35,24,30,-42,-15,48,-47,-61,13,-63,-66,-7,-75,69,-51,-21,-30,-66,6,32,33,32,38,65,-5,-22,-61,22,1,-17,4,4,-37,-108,-26,-127,53,-18,37,18,25,-95,-27,-3,31,-14,5,-57,15,-75,32,13,-28,-21,16,-18,-78,29,-51, 
  /* [14][0][][] */ -27,20,15,-5,-24,-7,67,-55,23,38,14,22,99,2,-16,24,28,38,-10,-97,-127,44,-3,-62,33,-21,-52,-7,-43,87,74,43,80,61,-16,-8,-24,-59,13,-4,-2,39,81,14,30,47,-19,26,-36,-37,54,-40,-8,-51,-26,42,4,61,50,-11,15,80,8,-32,9,-44,4,25,-51,87,5,15,22,-4,-28,-6,9,-21,8,2,40,22,42,-21,42,11,17,8,-9,-3,-32,-12,-47,-19,12,26,12,23,14,-22,6,54, 
  /* [15][0][][] */ 56,-53,3,24,-43,-12,9,-7,-16,40,-9,-21,-39,-59,16,7,127,73,57,-24,-91,-9,7,28,44,-28,-46,-39,56,-59,-5,39,-8,30,-108,-24,-42,-74,33,-10,-24,-5,-6,-24,-21,56,13,43,19,0,-33,13,67,66,-38,-60,4,-38,-4,-49,90,-35,20,-32,44,30,-1,-6,-23,23,-22,-3,5,-11,-8,38,66,-5,-10,41,-1,-5,-5,5,75,-10,41,11,-25,-65,-25,-27,-4,-93,-28,11,-69,-20,-17,-65,107,33, 
  /* [16][0][][] */ -31,-22,-36,47,61,-8,43,-104,-8,-23,-76,25,-2,-6,13,-54,-94,32,35,-12,-121,26,-3,45,1,41,-3,-34,-59,-67,-37,27,45,-18,19,12,47,-39,50,31,-1,-44,12,-43,16,82,56,47,-11,116,80,127,-49,45,28,-17,-29,-32,-13,-20,8,-6,-31,-27,-77,24,4,52,62,-29,32,-49,51,33,51,57,1,20,-38,15,38,0,-3,16,4,-84,18,46,2,-43,8,31,-7,-2,-86,28,30,32,60,39,-77,-56, 
  /* [17][0][][] */ -51,-2,44,5,-127,-63,-22,22,-29,-26,-65,-42,-27,37,-6,0,25,-20,-33,32,31,23,-53,-81,-25,-2,-7,-11,2,30,-3,-3,68,22,3,39,22,-35,49,-63,-51,14,40,-2,-9,3,-35,-39,-11,-23,53,-31,14,-43,9,-12,-29,-45,25,47,15,20,10,-28,-43,17,-13,-18,-47,44,10,12,39,-25,12,33,-12,28,-24,4,-21,-30,-26,-57,-15,-82,-45,15,-38,-10,16,23,-38,31,19,-2,16,-17,31,11,6,61, 
  /* [18][0][][] */ 26,71,-59,-12,15,-43,45,-88,63,-12,24,22,57,-15,-12,-11,61,-18,51,-41,-55,14,-1,-45,60,35,11,-8,20,11,-44,66,-35,49,56,-35,-81,-29,-33,-27,-52,-72,-16,-59,-40,-6,35,22,-65,-59,-43,127,23,1,-37,-103,-48,-28,80,-2,-68,6,-38,27,-70,8,14,33,-58,13,-28,-35,31,33,-72,25,-22,-22,-66,-6,-10,50,4,-14,6,-15,-37,-47,-43,-12,18,-25,-12,-20,3,8,9,45,16,-37,-37,-20, 
  /* [19][0][][] */ 21,-25,-1,18,34,30,91,-54,33,54,-47,-50,-33,-20,-68,-19,76,-41,63,30,0,54,-15,16,-12,43,-47,44,-22,97,-41,53,23,8,-38,-14,37,-36,-89,81,-56,7,-32,27,-15,1,-11,-62,40,25,-24,12,5,-2,29,-47,-34,-37,43,-101,-71,59,-45,-15,-49,-14,9,42,13,55,-32,-87,70,-86,-29,127,-24,-4,101,74,17,-8,-33,33,-52,-16,-57,-4,30,-17,-90,-49,45,-8,37,-89,15,36,40,-18,-73,-14, 
  /* [20][0][][] */ -10,-48,54,-38,29,-3,58,-42,33,-40,-11,-10,15,-62,-3,9,107,63,61,-24,9,105,80,-44,18,-23,29,24,11,-68,21,3,49,-4,-39,30,9,-4,10,20,-21,-30,-61,-77,-69,-8,-48,-104,53,-28,-38,-66,-66,63,-61,42,-8,0,-2,38,55,-6,27,-98,-50,-46,51,-27,-21,34,7,8,20,19,-48,-15,46,-3,-35,-10,-22,15,-12,-75,127,-55,8,38,24,34,75,-73,-5,-28,5,-44,-12,18,-12,65,-16,-19, 
  /* [21][0][][] */ 32,73,27,44,-15,63,13,30,127,31,-14,13,-12,49,45,-1,61,-42,39,-65,-20,49,29,-17,-82,-54,15,-25,30,-46,-18,24,-3,17,-41,51,-21,-26,98,-60,-29,36,21,31,42,3,25,-82,-10,-68,44,-43,31,14,31,-89,25,-32,-49,11,-47,29,37,6,5,61,-3,7,-8,58,30,54,-89,27,-72,6,-71,-78,14,30,-81,-10,-52,-65,16,3,-1,-56,-9,-71,-66,8,-24,7,48,-127,-57,31,-38,-34,-5,52, 
  /* [22][0][][] */ 74,-1,44,21,20,7,-83,-17,64,47,16,-29,35,-47,68,-63,-55,88,5,-70,-54,69,75,-22,39,-124,-2,-63,-76,-3,-48,64,-127,17,-119,15,-19,-63,-15,-21,-42,-15,-66,53,-34,34,-58,0,-35,-23,104,-74,4,15,25,-72,16,25,40,9,-5,-73,3,4,-76,18,-9,-21,-7,-7,103,11,31,8,-49,-19,12,-29,20,36,28,54,55,-53,-65,52,11,-67,15,101,-2,-57,-64,-73,17,-5,-58,-52,118,6,55,-36, 
  /* [23][0][][] */ 21,5,33,55,-23,-29,33,-10,24,20,23,46,-29,-3,-7,-11,3,-3,-80,-36,-35,39,-6,-34,62,-17,31,34,-25,-14,15,-14,-86,-6,-8,-17,-37,-40,27,-21,-52,29,-40,33,-22,9,-59,-13,47,-63,-6,-47,15,-19,13,-68,43,30,0,19,-21,-127,-53,18,109,86,13,2,11,-18,-5,-32,20,11,1,-23,15,37,-88,5,1,-22,-60,14,-3,5,-21,-56,15,58,24,30,-15,-11,-29,-2,25,28,-21,12,23,-58, 
  /* [24][0][][] */ 50,60,46,-3,58,55,79,-54,23,-36,25,-79,-40,24,95,-1,-1,25,60,31,43,42,87,18,-70,-77,-70,-6,-65,-53,-82,24,38,-35,-21,46,90,-24,-8,45,30,10,-65,35,-12,34,23,-90,-27,26,55,2,54,-42,-69,-18,-44,11,8,61,-50,-13,41,66,33,-12,-44,19,0,25,11,127,-18,-47,-40,69,16,28,-4,-49,1,4,19,-9,-46,-11,-48,3,16,29,11,7,-39,-39,-21,39,19,22,85,-71,-13,19, 
  /* [25][0][][] */ -56,-25,-43,20,-127,-65,37,-71,-42,31,10,-49,61,13,-6,-58,-41,-32,82,-21,-98,-4,-41,-37,-4,-19,26,-64,85,-37,55,29,-11,6,-65,-5,4,-84,0,-30,-85,-14,28,-11,83,43,-13,-29,-48,25,33,-14,-6,21,62,-52,82,-12,116,37,-76,-67,16,-65,-15,13,73,9,-36,33,-35,-81,-17,-59,-106,-37,-11,104,0,7,-46,68,-37,4,60,-13,47,-51,28,61,12,-70,1,-18,-8,-7,-17,5,40,-32,-49,7, 
  /* [26][0][][] */ 1,-39,-64,8,-37,-8,-7,9,29,-9,-2,14,16,60,-14,-16,26,-20,-35,-47,-4,-7,-42,-37,-3,-77,15,-1,10,31,4,-26,44,-5,80,16,-58,-22,-4,-7,-17,70,-68,56,7,101,-52,-73,-102,34,-18,10,55,-16,13,-13,50,15,72,-30,9,28,-5,-20,-38,13,10,-11,43,-29,-54,23,2,-9,-89,-64,-7,-36,-14,20,31,-22,3,-96,36,-37,-27,-86,-24,18,-58,79,127,34,-12,37,-8,70,7,-59,-17,-12, 
  /* [27][0][][] */ 3,-50,21,42,-6,22,45,24,127,-47,44,-50,-13,37,-20,4,-24,-23,62,-47,54,36,-26,27,-79,-30,-22,70,14,96,-36,-24,-65,7,110,21,12,12,36,74,5,88,17,-107,-41,-8,-62,9,45,-31,-87,19,-11,-30,-24,16,-16,3,19,51,-118,-4,7,91,-49,53,-85,-7,-10,122,8,20,-9,77,7,-56,23,19,-38,96,12,55,-12,-81,61,-25,-25,-83,23,-1,-27,8,102,99,-97,-26,16,-87,-110,-10,47,-61, 
  /* [28][0][][] */ -15,24,0,-48,-39,14,-60,25,-20,-21,11,15,-5,21,-30,-5,-19,40,-5,-42,-67,23,46,-12,-10,-15,15,13,-47,-12,25,-51,-12,-17,26,-33,19,-102,-55,-16,11,-4,-38,-61,-44,-127,1,70,50,44,-35,-81,9,-67,0,-42,-7,18,71,-26,-29,49,-16,-54,-13,-20,67,-8,15,26,-38,3,57,-27,-2,26,26,-21,3,-10,42,-33,56,-72,55,-5,-14,-90,62,30,-28,1,-55,-56,31,-27,-13,-41,26,-11,-16,-63, 
  /* [29][0][][] */ 45,31,-19,-8,-63,-41,1,-33,12,-10,-5,-41,9,40,-7,31,31,-70,-20,35,25,-36,55,-97,7,-30,5,-48,-3,-55,16,47,-10,28,-38,25,26,56,30,24,-43,-24,68,-56,-4,8,23,-3,-31,-33,-19,-19,-127,-24,-68,4,-72,7,-5,7,25,-27,18,62,-17,-28,4,-49,33,-24,6,15,29,13,-40,34,-15,76,-14,36,-18,75,-13,10,44,-18,5,36,-23,61,-7,42,-22,36,38,51,47,-14,26,-86,-30,-40, 
  /* [30][0][][] */ -22,-47,-15,5,15,3,-18,-57,-80,4,65,8,-15,19,6,4,27,35,-106,29,-46,-2,44,61,36,-35,-3,25,-35,15,14,-47,50,24,16,29,27,-3,-12,-45,16,-11,-71,-55,27,-2,4,-15,-3,49,-7,5,-33,7,-4,-29,9,22,9,-18,-24,-23,3,-6,14,5,35,-18,28,-2,78,-25,6,15,38,-58,55,66,7,16,-35,33,-11,-37,-2,0,7,7,-127,39,24,11,54,1,7,-35,1,2,-72,4,-32,17, 
  /* [31][0][][] */ 35,0,20,42,53,100,58,-82,-2,25,-25,104,22,-16,-42,15,-19,53,98,-123,-87,18,7,26,-21,-14,-18,71,45,-47,82,-51,63,-89,51,-21,-74,-51,72,25,-19,-16,-13,-3,-30,-27,-30,12,19,-126,26,-21,1,64,-15,-43,-42,23,55,-43,-11,33,-54,49,61,-15,-2,-14,0,31,1,2,-25,34,-70,47,-77,-7,-78,14,-95,12,4,75,-22,34,-1,-127,28,-32,-49,-31,-1,17,-45,-34,71,-25,-21,-5,-2,-9, 
  /* [32][0][][] */ 38,44,-1,-49,5,5,9,2,-9,-30,2,-43,26,-69,-28,-17,-18,64,-13,-7,-22,-46,-21,-43,28,-9,-15,47,-40,48,16,-45,-9,-12,16,57,13,-7,-41,-127,44,-16,-9,37,10,-37,27,38,-17,-18,-4,-2,-21,-33,-32,-26,-13,26,17,32,-80,41,17,36,-20,-15,-12,-15,-64,17,-32,63,5,12,-17,-39,2,62,59,69,-62,-44,-7,8,-20,-32,-44,-63,46,55,-12,-43,-16,10,47,10,20,15,7,-36,-28,-22, 
  /* [33][0][][] */ 5,61,-8,-127,-28,72,69,-37,-8,52,-116,52,65,-66,-11,-78,29,36,58,-38,39,-23,-13,-12,-95,-42,73,122,-76,54,1,54,-76,-33,-3,10,-7,-5,60,-85,-34,-63,17,-70,16,-96,-15,10,-69,43,88,-85,-37,20,-14,-26,-72,14,-26,-37,-27,-89,41,-20,56,-15,52,-55,-8,-52,62,59,4,22,-2,-46,-21,88,-51,-33,-57,-29,-12,50,49,-32,-24,-94,3,-32,-41,46,-17,87,-14,-96,36,-40,-79,-42,43,-23, 
  /* [34][0][][] */ 0,13,-7,15,-13,34,27,8,-8,-8,15,-51,7,74,19,56,85,20,29,-25,-58,89,9,-49,-24,-17,-53,-59,-105,-66,32,11,-7,-52,-40,15,-108,-36,-20,-2,-78,2,-70,-16,-3,-12,-113,-75,58,-54,-3,3,21,3,5,-37,0,20,-16,-60,-11,36,-7,-28,65,17,-1,-34,-23,11,7,20,2,-3,-8,16,19,-36,30,-15,41,-127,-50,-16,-4,26,-29,-23,65,2,-105,1,-32,6,3,26,-42,33,23,-14,37,40, 
  /* [35][0][][] */ 24,35,-8,24,-2,-3,-9,7,-7,6,9,-31,-16,-9,24,-1,34,36,-16,-38,-35,-42,-5,5,-42,8,9,119,-6,-14,-11,-52,-6,17,-30,1,13,30,-17,23,-24,-16,1,0,12,-14,2,21,44,-22,36,7,-9,4,-2,-12,-13,21,-16,3,12,6,-7,9,-35,2,6,127,7,6,9,6,21,5,13,7,-8,1,3,14,-21,30,-7,-21,2,17,12,21,-2,49,-5,14,-8,14,-7,-5,-26,4,-38,-16,15,-30, 
  /* [36][0][][] */ 58,-23,16,25,-48,22,85,-91,69,-14,-15,-47,10,-90,74,43,55,94,32,-2,-49,20,54,-73,-37,106,57,-9,74,-116,-54,18,-61,38,37,-46,47,101,-8,-60,-33,14,-48,-78,-9,70,48,-126,24,-71,-3,47,22,-13,-77,40,40,30,31,-35,-42,50,-103,-4,-64,32,-22,21,-16,8,70,45,12,-2,-54,67,38,-86,-123,-70,93,17,7,91,20,-25,66,-11,58,37,-127,52,36,12,-15,36,17,-87,-90,-59,-38,77, 
  /* [37][0][][] */ -9,-45,-4,32,-24,21,-55,-20,-35,38,-16,24,-45,-22,-26,-27,39,-80,-24,42,22,5,-16,22,-91,-67,-84,-42,-84,-60,67,-22,17,-48,-36,-4,-6,1,-14,17,67,-54,69,-22,34,-104,-86,-67,88,-127,-58,-36,26,-47,-26,-13,18,-5,33,-19,-6,-112,53,9,-34,-13,15,-10,-11,-21,54,7,-15,14,-37,18,46,4,-53,119,8,18,-3,-52,82,-19,-46,-10,4,17,26,1,75,-74,-4,-16,1,-85,-19,-104,-11,-19, 
  /* [38][0][][] */ -83,60,-6,44,-65,-89,-76,-55,-127,-8,-51,9,-33,56,-52,36,54,-14,-12,-11,-51,-29,84,-48,34,59,-1,65,27,-58,5,5,21,-27,12,-50,-40,-25,-34,91,-26,-51,37,3,-20,11,16,35,66,-68,-71,53,34,-50,25,-7,20,-58,108,17,15,45,-30,-70,55,66,53,42,71,-32,27,-47,59,45,-24,-29,72,52,-72,25,-12,-69,-17,-17,15,-51,-16,-51,20,-11,13,-57,31,-3,-66,105,-6,-61,-24,-54,-27,-9, 
  /* [39][0][][] */ 22,25,0,-23,19,64,6,44,127,30,-33,0,-1,-86,72,35,-53,23,34,-47,0,18,-15,-28,-6,-90,-32,-61,6,-14,33,52,-73,-20,-32,-79,-13,-11,-33,-60,-25,104,2,38,-38,-38,-77,-70,22,-51,45,-3,-7,81,-12,-10,10,12,-15,-8,4,39,-3,-3,11,-10,-6,20,-57,5,38,30,39,-20,38,-49,22,-24,6,7,18,-6,3,-21,-18,81,-46,-27,21,26,-2,-2,-23,-20,-15,-47,-9,15,30,-13,88,-4, 
  /* [40][0][][] */ -2,-71,-28,127,29,27,-59,-78,-47,-16,-28,-38,9,36,-23,62,-97,-5,96,-3,-60,-71,11,34,-9,25,-26,-35,-13,-11,-50,25,-47,16,-8,15,-38,-43,-10,24,-6,58,-72,24,-62,31,-38,42,25,-50,67,79,-28,81,-76,39,-27,-62,-59,92,22,-38,-76,18,-111,9,102,38,-32,80,33,-100,36,64,11,41,114,-95,89,-73,-82,-13,70,-28,79,-59,-37,-16,44,61,120,-57,-83,70,49,10,65,-13,64,-26,-50,50, 
  /* [41][0][][] */ 0,6,-38,-37,-107,-34,44,-23,31,-20,23,-26,35,-20,-54,-42,91,-45,48,51,-32,2,26,29,-32,-13,-43,-33,-19,21,39,-12,-14,36,43,9,-39,-22,-22,-62,-78,-4,71,-24,94,-75,-19,-21,15,-26,53,36,-35,-32,-2,5,62,59,54,67,64,37,39,34,-32,-14,-35,-27,-36,4,-2,-61,-6,-10,-50,-58,17,1,-68,16,-33,29,-105,-32,44,-5,35,9,-15,36,-45,-82,-21,-80,-6,-32,30,-41,-27,-36,127,16, 
  /* [42][0][][] */ -39,-16,-67,-33,-31,34,-18,2,-33,-16,-19,9,38,66,5,-36,73,82,5,5,-14,44,14,32,6,-2,46,56,-37,11,62,52,-17,124,-44,0,21,0,-5,2,-92,17,-127,12,9,12,-5,37,32,75,18,97,-20,-16,3,-16,-90,43,11,15,-3,48,-112,13,90,-26,-75,-9,-19,13,50,18,-63,31,-29,-9,-11,96,52,-16,25,18,47,19,-35,-17,0,19,-12,12,-43,-18,-1,-14,-33,-20,9,-24,-51,97,6,-2, 
  /* [43][0][][] */ 54,56,18,58,-21,-25,-11,-6,-30,-1,-41,-36,53,7,-9,35,-26,10,-56,-21,16,-43,-21,46,13,-45,44,-21,41,-38,-39,-91,12,6,-63,-11,4,-45,-57,-52,-25,39,-46,-13,-8,-48,-53,-61,-6,77,36,64,-22,19,127,27,-7,-16,-1,34,-32,-57,14,9,20,15,73,-25,-31,-18,-46,-28,27,13,58,-31,39,5,8,-8,-13,56,-36,-23,-27,1,4,0,-11,87,-24,36,28,-6,17,-25,71,56,0,-23,39,21, 
  /* [44][0][][] */ -25,-31,-7,-65,104,54,-22,-35,34,0,71,21,-3,-40,-80,21,55,-66,47,-51,82,20,105,-89,32,2,-13,-71,45,16,-47,69,-67,40,-10,36,57,-25,10,4,1,-50,-81,5,-40,-76,25,28,23,-37,-4,-67,23,-3,34,5,-34,27,-81,79,44,61,-63,33,59,-23,-39,-14,-36,-60,77,-72,-26,-10,-25,-10,26,-127,-84,0,-69,-16,36,-43,2,44,-1,70,47,-44,21,62,-62,31,-19,-30,14,-32,-7,-61,21,-11, 
  /* [45][0][][] */ -12,11,-11,59,-32,38,55,-4,80,13,42,12,7,-86,-18,-12,6,18,-30,-67,-86,-5,-9,53,-4,-1,21,-94,98,-48,-59,100,43,4,-116,-97,-125,22,35,-32,-64,106,-69,48,-12,62,9,11,-12,87,-4,0,25,-81,7,-13,71,-34,127,57,63,29,-79,-10,3,15,-11,36,-36,-5,7,-48,58,43,-51,-69,-10,37,-3,-15,41,-21,13,-53,-24,17,57,-75,102,-6,16,24,52,-117,5,-15,0,53,0,125,-106,-17, 
  /* [46][0][][] */ -29,3,27,-25,-32,-5,28,-47,32,35,7,-22,-15,-12,11,-8,13,32,33,-3,15,10,14,-9,-3,30,-4,13,-16,-1,6,24,15,-21,5,2,-42,19,11,27,-14,9,10,0,12,0,-32,2,32,-57,30,29,-5,39,-8,-13,-24,15,2,-19,-21,-20,-28,-10,-9,29,-6,-25,-2,-59,6,6,13,4,-14,-7,-7,19,-127,48,-8,-31,-16,-27,-7,-16,2,-10,5,-25,-55,34,-11,-14,12,24,-12,-23,-16,-21,23,3, 
  /* [47][0][][] */ 67,41,1,-16,14,-12,-39,52,34,29,84,-13,-15,-29,50,-29,49,-57,-124,88,-54,-87,-30,-3,36,-41,44,-41,118,37,112,2,17,-74,22,-126,28,-58,48,-5,-51,-35,16,126,-19,12,-40,-127,-22,51,-56,-57,15,26,-18,57,19,0,44,44,31,-9,32,-62,37,88,34,2,-40,-20,-43,-60,-8,27,-32,30,55,-41,-50,6,-74,27,60,60,-39,85,8,10,102,-1,-22,8,45,-71,10,104,-34,-76,16,-1,-27,-29, 
  /* [48][0][][] */ -20,-26,-23,48,64,29,-64,58,-8,91,29,-59,-30,48,115,48,-46,-53,104,-11,64,-40,76,-21,-3,-48,-54,-117,26,-112,-31,75,-86,29,28,13,23,-1,16,57,-6,-72,2,41,-50,-51,-13,-55,-15,108,9,-15,-35,103,-13,12,-22,99,-30,-12,4,31,38,35,47,47,-10,-18,48,-74,71,31,-66,10,29,30,69,18,37,37,-20,16,-34,-54,-64,127,-35,72,82,-118,7,-53,-8,11,-46,36,-22,-102,68,-11,-42,-31, 
  /* [49][0][][] */ 82,3,66,-32,-46,48,17,-14,41,15,-49,-41,-3,-50,63,6,-15,27,12,-79,49,58,12,-51,6,-50,25,-21,22,6,25,-28,-121,-29,-1,65,-13,-78,64,-78,45,-64,-4,-31,5,-60,-32,13,23,-59,-10,31,59,27,10,-8,-28,24,-6,40,18,-11,-14,56,46,-50,-16,-3,-127,-13,22,3,8,-26,6,-26,-17,-15,32,44,25,43,8,-20,27,14,41,-79,39,73,-94,-1,18,-86,-12,-33,-17,1,18,-64,-42,10, 
  /* [50][0][][] */ 24,44,-58,-28,-4,20,-13,-35,36,-23,-41,7,10,-38,-9,-4,57,12,58,-44,-30,-13,25,-34,0,-22,40,2,-29,-62,55,45,22,1,32,13,-1,14,-47,-25,-53,-7,52,0,-49,15,5,23,10,-57,22,-31,-6,-7,-33,13,-34,-17,33,-25,16,127,26,21,21,0,-11,18,-7,120,-9,11,35,15,-12,-2,60,-9,-8,47,10,28,4,-9,-50,-2,24,-10,-28,9,-26,68,20,-21,-19,58,-18,-12,7,-24,-2,28, 
  /* [51][0][][] */ 19,-7,27,-1,-41,3,14,-56,46,-11,-57,20,-39,-28,-13,-53,19,28,27,127,-93,-9,-3,-26,-68,57,15,-26,-45,-40,65,-3,40,-4,-56,-48,-7,-33,18,32,-52,60,-82,50,4,56,-25,-71,3,10,41,-70,-26,2,9,-84,-55,19,-29,-24,30,-25,-32,11,29,47,-23,2,28,-60,-28,21,82,83,5,-33,-85,-35,-92,73,5,-41,37,24,-54,-18,-19,-65,-32,37,39,40,-64,37,27,69,-99,-41,-34,-70,-22,48, 
  /* [52][0][][] */ -46,-74,32,11,62,31,-55,-101,-28,77,-37,97,-7,0,101,4,23,-23,20,65,-8,60,45,0,46,-42,-69,-35,44,18,-2,-108,34,47,-90,-10,-1,-47,-2,8,-24,8,-111,8,11,-56,-7,-116,101,-34,48,82,14,18,-22,-33,39,19,-33,49,58,97,-50,-45,36,91,68,-34,6,-48,78,-16,21,29,3,-104,47,20,85,-32,-100,-30,48,-16,-49,-10,-31,-127,45,-70,-19,71,-84,7,-81,65,30,-11,2,-90,-44,-48, 
  /* [53][0][][] */ -13,-17,-36,21,-25,26,20,85,47,-26,63,-40,11,-47,30,29,25,88,-34,74,-24,7,76,-48,-52,-41,18,-8,34,-101,41,-10,-15,44,-40,20,-55,4,38,0,-63,-7,57,22,-25,39,7,-76,-32,29,50,11,-34,37,8,3,35,6,-35,15,-7,-1,-28,-44,0,-19,37,127,0,30,35,-53,-2,-4,11,-45,54,30,5,21,22,-7,44,24,60,27,-30,1,-4,27,4,-14,-63,26,-6,-27,-13,-17,15,3,18,72, 
  /* [54][0][][] */ -20,2,32,15,3,25,61,-35,-12,22,-3,-39,-22,53,36,-39,-5,-32,-5,-17,52,-23,30,53,77,-16,70,8,62,-40,-20,-9,16,-86,15,55,19,30,55,71,-45,69,-21,-27,118,127,29,62,29,-50,3,31,33,-30,-100,27,38,16,-19,-8,-47,74,-59,-28,-74,62,0,-34,-21,40,-24,16,-6,-82,14,-46,24,10,-71,-5,-39,101,47,-121,1,-35,0,25,106,-4,-85,-5,-52,-32,8,29,-9,-41,19,26,-34,12, 
  /* [55][0][][] */ 27,-18,-39,-72,-20,-33,29,-24,16,22,41,127,23,47,13,23,21,57,46,-46,-57,3,9,-6,7,21,-3,27,-35,42,-26,13,-27,-34,42,-21,-66,-32,-26,-24,-80,33,-43,8,-48,-34,3,-8,18,19,27,22,-20,6,0,-44,24,-17,84,-35,-45,-14,20,-50,25,23,-24,-23,17,-14,29,5,38,20,-29,42,-2,30,-37,-47,-4,40,27,-37,-3,-37,-1,-50,-4,-54,10,2,38,3,33,27,73,29,28,-20,9,-39, 
  /* [56][0][][] */ -8,39,60,60,9,38,-18,-73,7,-17,-87,-35,-21,-7,-6,45,23,-1,-35,23,-47,47,-11,39,28,-37,17,-108,48,38,77,-3,30,49,-127,-20,16,-12,83,-61,-22,15,-68,8,9,-24,14,50,1,37,20,55,11,-1,-8,-19,-21,-30,38,-66,-20,73,106,-100,-15,70,41,-17,26,-49,-63,-32,-65,-36,-37,-122,65,-7,-93,99,-122,-37,-69,35,-9,59,-29,11,-9,88,-71,-1,-22,-2,-44,26,-5,-45,-78,-55,-56,24, 
  /* [57][0][][] */ 27,18,-53,-9,30,11,33,1,-12,9,-56,10,-31,-40,17,8,57,-38,1,-9,77,18,-23,60,37,-37,59,5,87,-15,-40,-3,20,50,2,38,9,-10,-7,-40,21,46,-49,-81,4,26,5,-7,-5,40,34,-44,-11,-42,-8,20,23,89,14,119,-22,14,-9,9,-12,66,-26,30,8,5,43,-126,13,-45,24,1,5,-10,15,38,-7,-74,53,29,65,-24,1,-2,-127,-41,-28,-41,-6,-43,-6,-45,69,3,49,25,-54,-29, 
  /* [58][0][][] */ 19,32,13,31,-4,-18,-74,28,-3,-68,-18,-54,5,-127,18,50,64,-13,71,-16,-47,-42,69,4,-40,-2,50,12,36,-3,-19,-19,43,22,-40,2,-34,-12,-62,-18,29,54,-7,13,0,-76,-54,-36,23,1,36,0,23,-24,35,-19,-26,11,2,90,-15,62,14,64,55,45,-31,-45,-19,15,49,0,4,-49,-6,-51,-43,-25,-55,27,-22,-31,27,16,8,44,-100,-14,83,-4,-17,-68,-36,-29,-5,16,-47,89,-7,-49,11,48, 
  /* [59][0][][] */ -54,-3,58,45,12,-28,-36,-107,35,23,16,38,-16,-21,13,-112,-23,127,29,-16,-43,23,-12,-53,8,88,16,-32,-40,-40,12,41,84,-56,-119,-54,-105,-21,-15,124,-39,-37,-34,29,14,32,-62,-26,17,-126,0,29,14,-53,-51,-56,12,78,76,-3,25,-22,3,17,-48,17,2,14,52,20,-87,-34,37,-29,-63,15,-14,-35,36,16,-49,29,-62,-41,21,-13,-12,-60,38,36,-15,-74,-8,-16,-56,7,-85,-53,0,-15,-73,-21, 
  /* [60][0][][] */ -7,-49,19,5,45,77,-6,4,-25,-30,-60,-16,5,-94,4,37,56,-28,-1,7,-51,-57,127,-4,84,-47,-14,-42,-10,35,16,-38,-28,-26,23,-23,22,-7,-29,-44,-5,16,-79,-1,-2,0,12,-26,-10,34,4,30,-13,6,31,10,-9,-8,6,72,-20,24,-53,-4,28,-3,-17,54,-46,-27,-7,12,3,0,19,-25,60,-67,27,-27,-60,-63,-23,-34,64,-1,-11,-23,-29,-23,-39,-39,24,-57,-6,13,41,-16,53,32,-1,5, 
  /* [61][0][][] */ 4,25,71,-24,64,-15,-31,2,-58,-48,-48,-29,2,-18,32,72,14,11,16,23,23,4,45,0,46,-18,58,-30,47,127,-22,-4,-74,33,13,52,1,-25,-35,-30,-20,-5,-82,-39,-63,-6,10,19,56,-2,34,89,-42,47,-20,-69,-25,10,-48,59,5,-20,-22,-75,28,46,-49,-16,-8,15,117,-2,5,-5,44,49,-38,21,-38,37,-3,-9,21,32,-17,68,-27,26,-7,57,-43,6,-19,-27,46,-44,14,9,-48,-5,65,-108, 
  /* [62][0][][] */ 88,42,31,-2,68,108,53,7,-63,-28,-18,26,50,-4,-37,-25,30,-1,-24,18,-27,22,91,5,92,-48,82,-29,-95,-41,-36,46,-10,3,23,5,3,-65,21,-13,-46,-65,20,18,20,66,-40,65,31,-87,23,45,-59,-4,127,57,31,80,53,92,-25,-57,37,21,3,20,12,15,-56,27,-36,22,73,4,-56,8,34,20,-19,-41,-64,12,-32,-17,72,-36,7,-50,-46,-25,-22,7,-26,-46,60,21,25,8,-9,-22,-13,-29, 
  /* [63][0][][] */ -4,-10,-12,64,-80,43,38,-53,-72,-14,-27,-23,-40,119,84,20,73,-23,-78,-56,-23,26,56,11,74,-28,-11,-78,64,39,-22,15,-75,57,-21,-19,27,-27,-40,-26,-94,55,-9,-33,34,21,45,-1,84,85,23,-66,14,-20,-74,19,-43,-49,9,34,-89,53,-70,-51,22,74,30,-8,92,33,10,21,21,-3,4,100,113,-12,-60,1,-18,-104,-45,-3,127,-6,-49,24,-61,75,-41,3,-29,-82,59,-72,-66,104,3,-54,-38,-75, 
  /* [64][0][][] */ -66,-55,-73,49,25,-57,127,-126,64,-8,34,-22,-53,20,4,-29,38,-53,5,-77,-76,-60,70,-88,75,1,-96,32,-16,2,-35,16,-81,46,2,-15,-91,-42,-36,-28,-30,-20,-110,86,49,-37,-9,63,82,-37,-17,-9,31,95,-90,-29,-23,-33,26,59,-41,102,70,64,-12,15,-32,-31,42,120,33,-29,66,44,-1,-65,-2,-13,73,-19,-31,-48,1,36,110,-25,-82,29,19,10,-105,-5,-7,-5,-69,-6,-78,-28,38,-31,3,23, 
  /* [65][0][][] */ 50,-95,-72,22,-32,2,25,-59,110,94,-55,0,-15,17,22,13,-83,65,-22,-84,-73,-10,-114,-15,-16,-31,50,-47,13,10,15,16,51,41,13,-56,-75,-45,28,-38,-78,26,25,40,-15,-3,-53,-46,14,28,61,-68,76,14,-68,62,53,-54,7,4,6,64,-53,3,31,-53,44,27,8,93,-127,7,-4,15,8,63,23,56,16,22,-30,-8,-121,32,-2,15,-21,-33,-2,-13,-33,19,-8,-46,-25,-61,31,-30,94,20,30,-72, 
  /* [66][0][][] */ 16,0,43,-38,5,-15,-20,48,54,3,-29,32,30,-17,35,-90,-49,14,-38,67,14,-29,3,-10,-31,-52,29,-20,9,-75,-54,-55,-9,44,13,-2,16,2,9,-65,27,61,-14,-24,58,48,37,-20,25,16,-50,-37,-71,38,34,36,0,-60,-23,20,-69,11,-14,-2,-65,23,11,1,-47,3,-7,40,4,9,76,-59,41,-37,74,-45,16,-4,0,68,18,-97,125,1,-33,77,39,-66,103,-127,19,27,-3,40,52,-5,13,18, 
  /* [67][0][][] */ 76,-4,-54,1,-7,-24,71,-7,-11,-19,32,22,28,-58,-2,12,-63,-33,-9,-53,-3,20,26,-34,34,-19,-1,13,-10,-11,97,90,-58,-38,23,81,48,-18,10,1,-72,17,5,-11,18,-19,42,-1,3,-74,-13,55,-29,9,-18,-76,-70,-11,20,-22,5,8,3,-6,-8,-21,32,26,68,127,32,-39,6,38,-52,59,-40,-71,-6,17,65,-18,3,-21,37,-99,3,-65,10,57,-12,-7,-91,-38,49,-37,-67,51,71,5,17,17, 
  /* [68][0][][] */ -8,9,-45,65,79,46,-40,-55,-21,41,27,-60,17,66,12,-16,-16,-38,-12,-50,11,-8,30,46,-41,-44,-51,-34,16,11,-55,23,-14,50,14,-30,-70,12,-31,98,-11,38,-24,53,8,30,19,49,56,-26,59,127,28,-5,-30,13,13,-14,-5,19,33,-12,19,-5,-49,-10,7,17,-36,-10,64,-25,48,32,-25,31,-5,-29,-79,-60,-20,36,31,32,-9,52,26,-33,-20,-44,33,-57,54,-78,-24,-6,-23,-5,-23,-75,-43,17, 
  /* [69][0][][] */ 39,-15,40,24,5,58,-18,-6,73,115,-46,-23,-33,31,-4,-78,33,62,-37,1,-11,-29,1,67,12,15,35,-120,79,4,-4,66,1,-39,36,44,-68,-47,-40,-12,-3,127,-68,50,65,34,-11,-80,-2,59,19,-58,24,92,14,38,-38,-50,-60,87,21,21,-92,41,44,40,-68,74,-36,16,47,-62,40,20,-26,23,10,53,-64,-35,-41,-47,-62,33,-28,-64,38,-99,-38,-24,-90,72,5,-32,-16,-19,36,58,-18,24,-16,37, 
  /* [70][0][][] */ 2,-16,65,34,-57,7,-63,6,-8,-33,-27,-56,-13,-36,18,-127,61,5,-10,-17,1,-51,4,-21,63,14,-112,-25,-53,12,9,33,-35,13,-33,1,-34,-16,-18,26,-10,32,-53,47,-88,20,19,-42,-1,-7,15,-11,60,37,-27,3,-32,13,8,53,-6,-10,-29,0,10,35,80,13,-9,17,7,-4,23,73,22,-36,-17,18,-23,-48,-49,44,-14,16,-4,20,-2,-30,30,-14,-60,-101,-36,56,-17,-49,33,8,7,-16,-4,-1, 
  /* [71][0][][] */ -21,10,66,45,56,20,-5,0,-39,1,1,-9,-38,2,26,26,6,59,7,-86,33,1,47,32,74,-18,2,-14,0,49,41,19,-12,-3,-67,55,35,-46,-42,-24,-17,-18,-31,-6,-8,24,-1,-19,27,-32,18,28,14,72,18,32,-24,-1,-56,-36,-58,-16,-24,21,44,46,-16,0,44,-49,-14,-124,-42,12,52,13,31,-23,-12,-48,73,93,71,57,-42,29,-18,-70,-64,-28,7,-29,14,-78,127,44,83,29,-78,-9,14,24, 
  /* [72][0][][] */ -24,42,80,-65,102,-30,18,-13,-72,17,-16,-29,11,108,52,67,-12,55,6,-107,43,-38,18,-24,-6,-69,42,-92,29,-24,-26,47,-102,-96,-110,-73,8,-26,-92,-29,-72,-25,14,30,-23,-50,-58,-85,47,21,46,-75,64,-48,23,-12,90,58,-43,12,-96,17,2,35,-11,19,-47,15,21,-45,27,45,-30,-31,-44,-127,-4,-25,-83,21,21,10,54,-61,-1,-10,-77,-24,2,65,-4,-28,21,59,-40,-13,-31,-33,-111,-56,24,50, 
  /* [73][0][][] */ -12,-8,-56,51,26,-71,-83,-56,6,20,37,-4,-24,-16,14,-54,13,-34,-43,-110,46,127,26,-44,-16,-82,15,74,4,-1,-80,-13,-47,0,83,58,15,-71,-15,2,2,12,-23,-47,-8,-61,-89,-32,-39,-2,65,58,48,-35,18,-4,49,-40,-8,14,12,-82,7,-77,-45,41,-49,-33,-3,-2,-36,-30,110,126,27,27,-27,76,25,-19,-13,-35,14,58,-22,-57,-25,14,45,19,-60,21,47,-8,72,-58,-54,-7,13,17,-39,-28, 
  /* [74][0][][] */ -94,-52,-57,65,-4,-11,4,-69,33,-72,64,34,112,23,-34,49,-4,-13,22,-65,-87,-56,-41,-19,-4,52,65,-4,49,-42,60,-96,18,-1,-22,-33,-71,-14,71,-51,-118,-39,-7,-1,-51,47,23,-50,23,-57,-111,4,35,-48,-43,15,29,59,95,-55,62,5,-31,-74,47,12,-28,-42,23,15,-127,-9,3,52,-11,7,63,-57,-68,42,-46,-32,-66,5,31,-25,-21,11,19,-7,-14,-51,85,10,-25,97,29,-42,-43,18,-42,-50, 
  /* [75][0][][] */ -40,44,-28,30,25,83,2,18,45,-22,-39,32,18,-36,-2,23,8,29,-27,-65,54,-26,-25,-92,46,36,1,-52,-4,16,37,-12,-57,-41,-78,10,-96,19,19,23,-18,-32,31,-27,-33,-29,-30,44,77,-30,20,20,-32,10,3,-55,29,5,2,-14,-31,-127,7,-6,-10,-5,-18,-8,-3,-11,-9,9,21,-19,-24,28,-21,38,-65,52,40,12,6,-13,25,18,-7,-49,-24,40,-3,-47,-19,17,12,-39,-3,-2,-24,-99,-88,-7, 
  /* [76][0][][] */ 5,-16,1,43,-1,-9,91,-22,-30,-12,4,-34,-33,23,13,-18,-42,-31,-24,42,4,9,23,31,-5,-33,50,-8,-4,-44,-31,31,-22,-1,69,-25,12,-20,-24,-6,13,-1,6,49,-35,-45,-3,-29,127,23,-45,20,-52,23,-93,-5,26,-19,3,-35,-4,38,-29,-27,-66,-30,-3,30,32,11,22,29,28,50,15,-29,-11,-23,18,-25,29,12,-31,-8,7,-21,3,-4,26,-72,-52,-125,-8,-51,-48,7,18,-7,-4,-33,-5,14, 
  /* [77][0][][] */ 26,-40,-5,1,-20,-13,-53,-22,-4,106,-18,36,13,2,-20,-94,-14,-2,7,-14,-10,-41,-10,-15,8,-61,-21,-28,11,12,17,-7,-37,25,-102,-17,-84,-64,37,35,10,-54,-77,5,53,-28,37,-19,-45,-31,0,-9,27,-5,22,18,-10,-8,11,-2,-32,-98,-15,-52,42,-15,48,37,-5,-34,-23,-23,39,4,9,-30,9,1,20,-19,20,-10,-24,-29,72,-19,-10,17,17,9,-31,127,-21,33,4,-20,-21,12,3,9,35,44, 
  /* [78][0][][] */ -26,0,-70,71,-11,-72,-61,-33,12,-53,-20,-65,17,0,37,93,78,1,-23,-19,-58,22,16,8,-76,-39,-7,-8,3,59,44,-34,-38,17,-47,14,18,-90,-72,20,-36,3,-67,109,-22,29,-55,9,-24,0,34,-61,2,-50,-32,-38,71,6,38,22,46,-24,-61,41,-85,69,31,13,100,-18,76,31,31,-7,-11,-24,-17,73,-9,-127,-21,32,-8,-50,38,69,-30,-26,32,-6,-71,-8,43,16,-30,-6,-15,9,-31,-7,-21,55, 
  /* [79][0][][] */ -51,30,31,24,-25,-38,84,-108,87,8,74,25,90,-45,19,63,89,62,76,-87,-53,-36,-31,-23,7,-76,44,0,-61,-20,23,112,-127,-22,-25,36,-83,-42,122,0,-109,-7,11,24,-30,-40,0,-23,-109,-65,-68,-62,22,20,8,-17,49,39,111,-27,-14,12,-70,-71,30,15,-54,-16,-122,-49,-24,-43,32,44,-121,-27,-80,42,67,43,-8,-34,10,-41,-53,-54,22,-42,32,-103,11,59,-55,-18,-1,13,-61,54,34,57,-38,-74, 
  /* [80][0][][] */ 89,3,27,66,-27,-21,-39,0,-29,9,30,-69,43,-12,35,92,15,21,-34,11,32,43,82,-1,-42,-110,101,39,37,-43,31,-12,-24,29,48,-1,84,-127,8,-8,-12,25,36,-28,80,-7,-125,-7,7,13,10,-39,2,0,-74,89,-27,48,-57,17,-67,100,51,-47,33,58,-27,3,43,-73,24,-109,-17,30,9,-18,10,58,-58,20,-11,59,-15,-58,-1,30,23,14,-15,19,-28,-2,-30,-73,-32,33,-93,-31,5,-28,68,72, 
  /* [81][0][][] */ -76,-18,7,-14,-15,5,31,-26,-5,-35,14,1,8,-52,11,76,31,29,24,-23,-127,34,10,-19,34,42,-19,-12,43,11,6,20,8,10,36,-48,-11,-43,-1,7,-23,-10,-60,-6,-18,12,78,-14,5,24,-47,24,27,45,-29,16,-14,-12,65,-35,-50,-41,-15,25,15,25,61,27,26,9,37,10,-22,-28,6,30,13,-16,13,-25,-33,-110,16,41,50,37,-72,-15,32,-31,-35,-25,55,8,23,11,20,94,39,19,-45,-77, 
  /* [82][0][][] */ -11,7,-39,45,-14,32,-10,-35,-35,51,-2,-8,-91,44,36,78,53,-11,12,53,-67,45,20,-26,-51,-51,14,-31,39,46,23,-33,-85,60,79,-38,-56,-18,-66,-52,-51,-35,9,36,-9,-4,34,-19,37,-60,-3,28,52,65,6,50,-25,47,47,-33,-7,-19,82,-52,58,47,-30,11,-10,-44,2,33,2,-17,11,-96,31,-20,-127,88,-3,5,-54,-36,5,-25,4,36,22,-8,-13,-26,-6,17,-23,-16,16,-11,44,-32,42,-97, 
  /* [83][0][][] */ 24,-106,-34,-72,4,-21,61,-76,46,103,37,30,-51,-39,41,-25,72,-38,4,9,-30,-35,70,28,-8,-59,-107,9,12,-38,47,37,-31,-9,-75,-28,-76,-10,-38,70,-44,-71,4,-19,35,57,24,-29,-9,-48,0,1,-42,15,20,20,28,121,48,-51,-43,-104,27,97,-52,-16,-91,13,-11,99,-54,12,17,40,-67,8,-24,39,4,17,-56,-81,-18,-14,-15,-19,-37,-127,-39,3,33,43,-72,-16,1,-61,3,-82,18,86,13,73, 
  /* [84][0][][] */ -75,63,-55,48,5,-74,18,-43,-31,-55,-45,-31,65,109,36,-2,73,-7,-78,-24,-53,-25,-7,-31,30,-42,67,32,-50,-5,-33,-97,-48,-28,17,61,22,-46,127,-11,-32,60,61,-79,-53,-14,-97,-13,-19,62,-24,51,1,11,-18,40,-62,68,-25,-3,-28,-56,37,34,67,84,-99,-44,55,-21,5,-8,-29,-57,-55,10,-21,-44,45,48,-64,18,20,16,-10,53,-10,-2,82,8,2,15,5,-31,111,23,20,54,61,-16,-22,41, 
  /* [85][0][][] */ -6,55,20,42,-45,-4,13,-78,-127,13,39,-31,16,-85,27,44,16,-11,-41,-42,5,-12,46,-44,109,-39,-51,-90,33,-37,52,77,-41,45,-3,7,43,15,2,-20,11,-44,-32,4,0,6,-47,-7,-14,-70,-26,100,-13,-21,-32,-14,-21,96,23,-5,3,56,-15,-76,50,48,-41,6,0,-40,107,-76,2,-62,-55,-13,-7,-89,-78,52,-18,79,43,-114,-7,-25,-4,-10,-64,-56,35,24,31,-42,15,2,-12,-21,-63,-49,-96,31, 
  /* [86][0][][] */ 1,14,-64,-9,45,-8,-20,-90,-17,-41,-14,49,55,-70,-45,-41,-20,-5,-48,-23,-52,49,43,-18,47,-54,-26,-28,42,22,-2,-28,39,-28,20,-3,-42,-23,65,-102,-45,20,15,1,-13,-54,-53,-28,-53,-1,30,30,-19,-25,-10,-21,15,-73,33,-16,18,49,-25,41,6,-41,10,-19,-38,25,57,-1,-13,-55,-20,-2,-19,-20,25,-29,43,12,-6,-32,12,-78,46,-26,-46,51,-23,48,-69,127,-28,-51,38,-57,-12,22,-17,-28, 
  /* [87][0][][] */ 127,46,24,52,18,-6,12,-20,38,12,15,-12,25,-8,86,5,13,15,-18,3,6,-6,39,-42,-10,-37,76,-37,17,-14,31,2,-84,62,-42,0,75,-8,-23,-54,-14,79,-2,21,0,27,19,18,49,60,16,5,27,23,26,-7,-28,-29,-47,26,17,10,-21,-51,21,9,10,80,76,15,59,2,-14,-23,11,17,-75,8,-27,-18,20,63,58,55,3,71,71,-14,7,86,28,27,53,-18,-73,-53,33,17,-1,-60,-9,-60, 
  /* [88][0][][] */ -5,30,35,26,-9,5,45,-6,11,33,-15,10,-2,-69,18,-127,17,62,0,-72,-60,-17,12,8,30,28,31,-70,54,96,27,-2,-48,-23,-35,-51,-40,-11,49,38,-23,18,-12,68,56,-8,-29,-3,93,50,29,-5,-45,86,95,-19,13,-50,104,-15,92,14,-60,7,-39,16,-73,54,6,-8,20,-26,35,-10,-26,-45,17,2,-57,-74,-62,13,28,3,45,13,-119,-98,86,4,10,-54,21,-70,107,5,42,67,51,37,-38,-57, 
  /* [89][0][][] */ 33,39,55,43,37,-32,-70,-127,50,-6,-34,107,43,-19,-25,-109,38,104,10,31,29,-13,-1,6,-48,41,12,59,47,-59,-80,-9,3,52,-10,-10,52,6,-11,21,-68,0,-3,20,-6,102,-68,40,-19,-28,43,-50,24,-68,-19,41,-51,16,-21,27,-77,-6,15,-12,-21,62,-27,16,86,-46,-108,57,-26,-38,-3,-13,-41,36,-98,46,5,43,-19,-9,0,12,11,-23,-36,53,20,-2,29,25,7,6,52,-29,19,1,-37,-75, 
  /* [90][0][][] */ 73,9,-53,36,-35,-53,93,-93,-75,-37,13,69,115,-78,-36,-4,89,-41,-74,-22,-126,-29,25,-20,11,-24,23,-19,-11,-5,37,-56,37,-12,34,-33,61,36,-45,-7,-38,87,16,-22,14,94,5,-16,29,43,23,8,-21,-35,-15,31,-9,-46,-32,-41,-93,0,4,-60,-32,-2,13,68,82,-32,-6,43,-15,3,-39,57,-23,62,-84,-127,-59,-10,-13,66,-41,6,1,34,26,-7,74,28,73,-48,73,38,69,-8,81,3,98,-38, 
  /* [91][0][][] */ -28,10,23,-20,-18,-26,-60,-23,-37,21,-39,-22,-8,-42,39,-127,88,-15,15,-17,19,-48,41,76,33,-49,-68,-7,-17,38,-14,25,-76,44,0,-45,46,-24,-45,-7,-11,49,-8,64,-15,7,78,25,-59,14,45,-5,-36,39,-27,-53,42,-22,-15,23,-29,-38,20,59,-5,8,12,-27,23,24,-15,37,0,9,30,22,-20,-33,-48,22,-77,15,18,-54,13,-45,-33,61,-64,66,38,36,-34,-65,74,-62,31,1,-23,76,4,-31, 
  /* [92][0][][] */ 24,-50,-42,34,-25,27,-88,7,-70,-50,-75,-30,33,10,-28,38,-33,26,-64,-70,-62,-33,4,-37,73,-9,-9,-67,-65,18,-98,9,-37,14,20,-6,8,-43,43,7,-14,0,-14,11,48,-62,61,10,17,-54,-16,-14,18,43,-7,-54,11,-11,1,40,-5,20,2,29,-46,0,10,-4,-56,-33,46,-53,-21,28,29,-48,-10,-87,56,-7,6,-43,-34,-22,30,-33,-39,66,76,-34,-30,-55,-127,-88,33,105,16,10,-33,12,-11,-42, 
  /* [93][0][][] */ -1,-44,3,44,-25,78,15,-28,36,-9,-36,20,-33,58,-11,-17,41,59,-94,47,-49,-32,41,101,-80,-11,-8,3,12,-13,56,79,-4,-95,5,1,-34,38,-6,39,-70,-33,-47,60,31,-11,82,47,-44,-28,-3,71,-5,-44,-44,-3,-33,127,-75,20,31,94,-57,-40,81,56,1,-7,22,46,-75,40,98,-83,-70,-8,-14,55,23,44,19,-72,-26,-5,12,-50,26,-64,28,-62,-1,7,14,-80,-30,90,42,30,30,-48,-39,-15, 
  /* [94][0][][] */ -59,-50,82,7,-11,7,-6,-71,-36,-59,14,-49,57,-40,21,111,-60,49,108,-15,-24,50,-27,-25,56,-38,-45,-65,108,4,24,4,-81,12,53,57,22,-26,-3,-90,-60,-34,9,-113,-23,79,-30,-69,52,-32,47,16,-38,-7,12,-41,-47,61,30,-34,-58,-10,14,16,33,62,40,119,-1,-36,-1,20,36,-2,-41,7,-7,14,-38,24,-53,95,-28,9,-6,-84,-25,19,-29,-27,-39,-51,57,7,-23,-13,-38,-67,127,-74,-33,-64, 
  /* [95][0][][] */ 33,27,42,-45,-3,49,-46,-37,7,19,14,-21,-6,-63,113,20,89,65,-45,-23,-41,24,55,79,-69,-33,-55,-51,-20,98,119,-11,-51,-93,-2,-40,16,-47,-16,-23,19,-5,48,-42,-40,-41,-80,-72,83,-50,-2,-50,68,2,106,-36,-12,26,15,0,34,40,-60,-63,26,17,3,-28,18,9,-75,-72,22,-22,-39,-14,-83,33,35,43,-56,-33,-14,-91,127,-11,39,-40,1,-81,-32,25,-124,18,-24,-48,53,8,52,114,42,18, 
  /* [96][0][][] */ -47,-4,4,31,33,23,39,0,14,-29,-65,15,33,-52,2,5,-4,-17,26,-9,20,-35,4,4,-6,-25,25,-9,-2,18,20,8,-39,39,12,1,32,-30,50,45,-32,40,40,20,-17,26,-29,-34,-36,-31,-32,31,-5,-8,-10,-2,-4,12,13,-2,11,16,7,-23,-34,14,63,32,24,-17,-127,-15,25,-30,6,-28,-8,-33,-1,-38,-57,-12,-24,9,-6,18,22,27,32,-11,19,12,6,-25,13,-20,14,-10,4,22,26,-16, 
  /* [97][0][][] */ 5,41,-96,47,-28,48,-21,18,-4,-67,-38,40,12,-46,31,101,59,16,34,23,-11,97,40,9,-43,-67,70,-17,61,-62,61,-62,95,4,-124,68,-127,-94,-68,-63,4,-29,-26,-12,-74,-48,-87,38,58,-91,-89,78,22,-42,-113,-26,-95,-10,99,47,-45,-5,19,22,16,79,3,25,-48,-42,-24,25,49,-78,-71,-3,-45,-25,-30,-70,-88,45,-12,-14,-49,-1,-27,-6,-32,11,-11,37,16,-18,-76,38,14,-72,-26,-37,-55,-43, 
  /* [98][0][][] */ 12,-25,43,-38,-107,-47,-13,-14,12,-28,0,6,16,-2,-44,26,75,-126,-37,-60,-84,-5,-29,4,33,-6,34,-40,-21,-37,-73,-60,110,34,64,53,58,-69,-70,46,-9,-26,15,-82,5,-88,15,0,28,13,41,90,-4,13,74,-14,43,-32,42,44,52,127,48,73,-73,-18,59,-5,-42,24,0,16,-4,42,71,-22,29,-15,127,5,63,12,-4,93,-4,-1,46,-93,25,54,12,-116,-36,-5,5,6,-51,65,116,65,-105,-38, 
  /* [99][0][][] */ -52,41,88,16,34,-24,24,69,29,66,0,-51,-40,-12,3,-54,-38,69,1,-47,-72,-8,-42,24,-19,-1,-8,40,-119,-37,-1,-20,-28,14,-25,63,-3,3,24,18,-29,8,-74,26,64,-46,75,-29,-33,23,51,6,76,19,6,33,-5,-40,14,-82,21,25,-14,-27,113,31,-1,-127,9,-60,55,-84,7,78,4,111,33,-37,-94,0,29,31,65,13,-76,72,60,-77,-87,-33,49,-13,-36,-47,-8,-55,-71,61,-3,-64,32,110, 
  /* [100][0][][] */ 57,-16,18,-8,-6,-10,18,25,-21,77,-11,39,17,-28,-25,-62,47,10,34,26,31,-60,38,-125,17,-80,-11,5,9,53,13,1,-71,-20,12,21,39,-122,-43,17,48,-35,-38,36,5,20,-54,-70,35,58,-23,-19,-24,-24,68,33,-21,-41,-127,-3,14,-31,7,-36,19,59,32,-5,28,-50,44,18,26,51,-15,25,28,-57,-18,-12,-25,-5,16,20,-9,-48,35,0,-16,-24,101,43,-96,-30,10,-23,1,16,8,-16,-36,-12, 
  /* [101][0][][] */ 2,-7,-21,-56,-56,-33,-23,-17,0,23,12,-7,-13,54,-16,-22,22,-43,11,33,5,16,-64,31,-37,-15,28,8,28,14,-4,85,-22,-12,-41,-27,21,27,-5,66,16,-10,36,-10,-35,-34,24,25,-33,-25,10,-57,16,18,-24,-48,-2,-92,71,17,56,-55,28,-48,-20,34,-22,-6,-23,-22,37,-12,28,-13,16,19,32,-24,-21,-14,25,-25,-42,-8,-23,0,-31,6,44,-32,-4,15,-84,36,-66,51,-27,-15,-127,28,-41,8, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 102,1,1,102 } };
const TfArray<102, float> quant8_scale = { 102, { 0.0093289930373430252, 0.0095907747745513916, 0.0092053953558206558, 0.0096968589350581169, 0.00832334253937006, 0.0092323347926139832, 0.010513289831578732, 0.01099532563239336, 0.0098779527470469475, 0.0073778587393462658, 0.011264805682003498, 0.012748654931783676, 0.0081083774566650391, 0.010658414103090763, 0.010650245472788811, 0.010139058344066143, 0.0070995064452290535, 0.016229325905442238, 0.0088431080803275108, 0.0082460213452577591, 0.010226431302726269, 0.0088987462222576141, 0.0089580081403255463, 0.013787523843348026, 0.010698070749640465, 0.0077902954071760178, 0.0098529579117894173, 0.0085051413625478745, 0.0094890249893069267, 0.0097001902759075165, 0.01153696421533823, 0.0086400285363197327, 0.012879678979516029, 0.0073806312866508961, 0.0090649938210844994, 0.023858193308115005, 0.0078803533688187599, 0.0091460971161723137, 0.0088685052469372749, 0.011882099322974682, 0.0068993526510894299, 0.0084636742249131203, 0.0089266374707221985, 0.012005741707980633, 0.0078092883341014385, 0.008027985692024231, 0.017185790464282036, 0.0092953769490122795, 0.0099757090210914612, 0.010002153925597668, 0.01399180106818676, 0.0085392547771334648, 0.0081694228574633598, 0.0087465532124042511, 0.0070766243152320385, 0.012541888281702995, 0.0081731714308261871, 0.0095840571448206902, 0.0082608377560973167, 0.0091935135424137115, 0.010707374662160873, 0.010122645646333694, 0.0085307629778981209, 0.0079919984564185143, 0.0079145282506942749, 0.0090070236474275589, 0.011660284362733364, 0.0098184710368514061, 0.01078388188034296, 0.0088733872398734093, 0.012407267466187477, 0.010756000876426697, 0.0088948775082826614, 0.0086654266342520714, 0.0088754808530211449, 0.012605703435838223, 0.011050986126065254, 0.011296593584120274, 0.0088148145005106926, 0.0079273376613855362, 0.0078810779377818108, 0.010902052745223045, 0.011618039570748806, 0.008089795708656311, 0.0091223977506160736, 0.0089354943484067917, 0.010718937963247299, 0.011307616718113422, 0.0091008283197879791, 0.0098576946184039116, 0.0096014803275465965, 0.0099132442846894264, 0.0097620012238621712, 0.0085855936631560326, 0.0081314751878380775, 0.0073195667937397957, 0.013411924242973328, 0.0066550145857036114, 0.0070045921020209789, 0.0074740704149007797, 0.010877876542508602, 0.011516246944665909, } };
const TfArray<102, int> quant8_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[102] = { 30590, -14111, 16109, 10448, 27309, 20828, 50383, 8718, 18870, 11513, -11657, -23549, 30115, 31875, 7556, 25636, 15830, 9871, -4308, -4599, 10331, -6957, -18842, 15432, 5828, 18194, -330, 26235, 19046, -5077, -3858, -13214, 16604, -7352, 21238, 22609, 28857, -7469, -6660, -22577, 13441, -11619, 11566, 8930, 9679, 13253, 11772, 24438, 15785, 23992, 14985, 23360, 12765, -11048, -364, 18649, 5241, -6921, 11531, -8420, 29217, -1982, 3151, -3668, 25655, 11532, -214, -15449, 17826, 15790, 14232, -10304, 28, -5999, 11705, -7614, -12004, 127, 27857, -13134, -3745, 18150, -3899, 18923, -2357, 22073, 17427, 15262, -1934, 31856, 13165, 22246, -4580, 28247, 27172, 13716, -11306, -6971, 11991, -2220, 6615, -3798, };
const TfArray<1, int> tensor_dimension9 = { 1, { 102 } };
const TfArray<102, float> quant9_scale = { 102, { 8.0745543527882546e-05, 0.0001710375800030306, 0.00021808194287586957, 0.00035193871008232236, 0.00011392631859052926, 0.00017089575703721493, 5.2542916819220409e-05, 0.00045515023521147668, 0.00033597188303247094, 0.00026672528474591672, 0.00015741988318040967, 0.00013662465789820999, 5.9082718507852405e-05, 0.00012499695003498346, 0.0004174217174295336, 6.3407096604350954e-05, 0.0002578663406893611, 0.00041100793168880045, 0.00019478643662296236, 0.00011781014472944662, 0.00038811514968983829, 0.00012931268429383636, 0.00015864887973293662, 0.00021589924290310591, 0.00049229024443775415, 0.00017432644381187856, 9.948512160917744e-05, 0.00012938710278831422, 0.00014200393343344331, 0.00011573373922146857, 0.00061440956778824329, 0.00021834834478795528, 0.00024909726926125586, 0.00023119799152482301, 0.00015666591934859753, 0.00025627680588513613, 0.00019514310406520963, 0.00011300986807327718, 0.00025030679535120726, 0.0001038790651364252, 0.00032275306875817478, 0.00017433962784707546, 0.00026759362663142383, 0.00035866184043698013, 0.00023506740399170667, 0.00018627024837769568, 0.00021612350246869028, 0.000125261110952124, 0.00018597560119815171, 0.0001135487764258869, 0.00012191529822302982, 0.00016368682554457337, 0.00022199504019226879, 0.0001274553214898333, 9.1755959147121757e-05, 0.00018843458383344114, 0.00020002134260721505, 0.00029210522188805044, 0.00034748893813230097, 0.00012399826664477587, 0.00010866949742194265, 0.00018548448861110955, 0.00068476685555651784, 5.7123495935229585e-05, 0.00015125892241485417, 0.000230662219109945, 0.00017708096129354089, 0.00010982788808178157, 0.00015959830489009619, 0.00032732178806327283, 0.00017893800395540893, 0.00013594357005786151, 0.00021575189020950347, 0.00018310941231902689, 0.00037809033528901637, 0.00019675145449582487, 0.00016145952395163476, 0.00011778851330745965, 0.00014864928380120546, 0.00015283630636986345, 0.00023059682280290872, 0.00016822743054945022, 7.6068521593697369e-05, 0.00014507245214190334, 0.00011047984298784286, 0.0001852811110438779, 0.00024911822401918471, 0.00022457449813373387, 0.00017375400057062507, 0.0001253585796803236, 0.00024151138495653868, 0.0001392537378706038, 0.00011806294060079381, 0.00013778782158624381, 0.00014530385669786483, 0.00028061910415999591, 0.00011451260070316494, 0.00013871885312255472, 0.00025404238840565085, 0.00014668126823380589, 0.00045693831634707749, 0.00013399428280536085, } };
const TfArray<102, int> quant9_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[1*3*3*102] = { 
  /* [0][0][][] */ -78,13,-14,19,-50,-101,-64,-119,-13,-70,92,127,-120,-25,21,-127,-64,2,-67,79,-9,22,118,-57,-68,-50,-8,-31,-89,5,12,120,2,92,33,-114,-70,73,61,92,-14,105,-37,-52,91,-62,-34,-116,-53,-77,-90,25,-52,81,63,-99,80,63,-31,26,-67,-23,33,112,-127,-24,79,127,-120,-89,-127,97,-84,7,-57,63,63,32,23,83,-72,-43,38,-6,125,-78,-121,-37,-2,-94,-53,-127,-5,-68,-127,-105,51,30,-6,64,-18,9, -61,30,-127,-67,-60,-70,-81,-112,-19,-108,127,101,-127,-85,-127,-103,-127,-46,7,89,-120,127,38,-127,-117,-127,70,-127,-127,127,55,91,-29,121,31,-55,-53,36,71,104,-76,66,-127,-77,127,-47,-13,-78,-73,-124,-28,-12,-118,112,-34,-99,114,106,-122,114,-30,-44,34,61,-110,-57,127,39,-102,-79,-97,119,-75,127,-111,70,76,43,28,127,-6,-83,97,-100,88,-77,17,-23,66,-68,-122,-109,35,-127,-54,-86,81,106,-109,27,-54,127, -69,53,-7,22,-34,-114,-75,-6,-3,-66,81,109,-125,-48,31,-117,-49,11,-60,78,-2,28,70,-49,-64,-105,10,-20,-73,11,21,127,5,89,18,-95,-62,-14,48,95,-14,127,-45,-45,81,-44,-37,-118,-43,-85,-80,24,-43,86,33,-67,84,51,-7,22,-77,-35,20,127,-115,-62,82,119,-76,-87,-114,106,-80,-7,-63,52,61,39,13,86,-41,-34,-3,-7,120,-77,-102,-49,-6,-78,-72,-102,-11,-54,-82,-76,36,29,4,20,-21,-10, 
  /* [0][1][][] */ -92,47,-24,-41,-102,-70,-127,-85,-44,-24,80,97,-113,-80,-85,-50,-52,-17,69,95,-34,91,92,-66,-92,-55,17,-55,-79,44,22,64,-84,103,-63,-33,-109,54,39,93,-20,46,-61,-34,-73,-40,-74,-51,-81,-107,-72,-56,-94,126,27,-11,-19,70,3,99,-4,20,-71,119,-69,-90,45,37,-87,-18,-125,103,6,84,-46,98,45,35,-66,69,66,-65,124,-113,63,-17,-49,-97,46,-116,-31,-112,51,-60,-100,-12,53,40,-37,15,10,59, -127,-4,-76,-127,-127,9,-24,-127,-127,-23,23,89,-77,-127,-114,-97,-90,-127,127,127,-127,56,29,-46,-127,-119,127,-55,-102,124,127,74,-103,127,-119,37,-127,11,88,127,-127,43,-99,-127,-77,-127,-127,-127,-127,-127,-83,-127,-127,127,127,-103,-121,127,-127,127,-97,127,-127,88,-47,-82,63,50,-10,1,-108,127,-63,36,-60,127,110,127,-127,64,107,-127,127,-101,31,-122,-62,-127,127,-97,-127,-86,98,-99,-83,-43,127,127,-127,88,-127,102, -78,38,-24,-28,-110,-85,-121,-87,-37,-27,102,77,-72,-79,-79,-51,-55,-7,67,88,-35,90,127,-76,-86,-109,-14,-67,-84,36,32,50,-82,85,-56,-56,-119,87,31,88,-10,22,-54,-30,-65,-60,-64,-58,-72,-108,-67,-58,-86,112,44,-7,1,77,-1,101,5,21,-19,100,-67,-127,47,52,-91,-18,-125,94,23,87,-47,67,37,29,-60,66,68,-62,127,-112,73,-19,-60,-83,42,-127,-51,-104,45,-73,-86,-41,43,41,-32,25,14,34, 
  /* [0][2][][] */ -100,117,-27,-69,-50,-112,-39,-86,-43,-56,20,-72,-88,-19,-56,-100,-18,-50,-56,8,-4,-38,52,2,-49,-59,-11,-114,78,38,12,106,-93,65,-21,-127,-27,124,56,108,-8,29,27,-11,-29,-54,5,-86,-15,-103,-127,25,-56,35,101,-121,7,-5,-38,-64,-94,2,-70,-27,-89,-107,-17,59,-109,-119,-94,14,104,-62,-60,-5,63,38,-34,30,81,-32,27,-55,127,-68,-127,-18,-12,-100,-4,-42,22,-69,-18,-127,51,45,-43,71,-6,36, -43,127,-41,-71,-66,-43,-86,-60,-78,-127,68,97,-106,-75,-41,-76,3,-71,-3,37,-86,91,57,-4,-54,-66,3,-95,-104,121,16,73,-127,62,-127,-67,-41,127,127,-10,-16,51,-16,11,-70,38,-8,-43,-92,-47,-44,-94,-9,48,77,-63,-127,-30,-4,20,-127,119,-115,105,-65,-69,-92,79,-39,-124,-106,22,127,-127,-127,-1,127,-20,-124,50,62,-39,114,-127,-12,-127,-48,-66,23,-28,-7,14,127,-88,-67,-101,26,62,-50,127,-86,42, -102,111,-29,-67,-39,-127,-61,18,-57,-67,9,33,-90,-8,-83,-93,-18,-43,-34,24,-22,-19,27,-11,-56,-86,13,-85,89,39,7,104,-87,54,-22,-116,-10,104,30,122,-9,-5,11,-21,-33,-46,4,-79,-3,-99,-119,2,-64,33,97,-127,-31,1,-32,-34,-83,17,-124,-29,-84,-102,-19,59,-127,-127,-34,26,99,-61,-42,-1,56,47,-37,27,-127,-31,-5,-66,125,-67,-109,-28,-14,-83,-6,-49,25,-51,2,-110,60,41,-41,76,-2,57, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,102 } };
const TfArray<102, float> quant10_scale = { 102, { 0.0042362394742667675, 0.0089733265340328217, 0.011441465467214584, 0.018464135006070137, 0.0059770378284156322, 0.0089658861979842186, 0.0027566149365156889, 0.023879030719399452, 0.017626451328396797, 0.013993493281304836, 0.0082588866353034973, 0.0071678850799798965, 0.0030997195281088352, 0.0065578478388488293, 0.021899640560150146, 0.0033265938982367516, 0.013528716750442982, 0.021563146263360977, 0.010219288058578968, 0.0061807991005480289, 0.020362097769975662, 0.0067842691205441952, 0.0083233648911118507, 0.011326951906085014, 0.025827547535300255, 0.009145873598754406, 0.0052193938754498959, 0.0067881732247769833, 0.0074501032941043377, 0.0060718622989952564, 0.032234422862529755, 0.011455441825091839, 0.013068655505776405, 0.012129586189985275, 0.0082193305715918541, 0.013445322401821613, 0.010238000191748142, 0.0059289569035172462, 0.013132112100720406, 0.0054499180987477303, 0.016932938247919083, 0.0091465655714273453, 0.014039049856364727, 0.018816858530044556, 0.012332591228187084, 0.0097724944353103638, 0.011338717304170132, 0.0065717073157429695, 0.0097570363432168961, 0.0059572304598987103, 0.0063961721025407314, 0.0085876761004328728, 0.011646762490272522, 0.006686823908239603, 0.0048138904385268688, 0.0098860440775752068, 0.010493932291865349, 0.015325026586651802, 0.018230682238936424, 0.0065054530277848244, 0.0057012434117496014, 0.0097312703728675842, 0.035925652831792831, 0.0029969308525323868, 0.0079356580972671509, 0.012101477943360806, 0.0092903869226574898, 0.0057620173320174217, 0.008373175747692585, 0.017172630876302719, 0.0093878153711557388, 0.0071321525610983372, 0.011319220997393131, 0.0096066640689969063, 0.019836155697703362, 0.010322380810976028, 0.0084708230569958687, 0.00617966428399086, 0.0077987457625567913, 0.0080184135586023331, 0.012098046950995922, 0.0088258944451808929, 0.0039908639155328274, 0.0076110903173685074, 0.0057962215505540371, 0.0097206002101302147, 0.013069754466414452, 0.011782091110944748, 0.0091158412396907806, 0.0065768202766776085, 0.0126706687733531, 0.0073058167472481728, 0.0061940615996718407, 0.0072289095260202885, 0.0076232305727899075, 0.01472241897135973, 0.0060077966190874577, 0.0072777546010911465, 0.013328095898032188, 0.0076954956166446209, 0.02397284097969532, 0.0070298844948410988, } };
const TfArray<102, int> quant10_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data11[102] = { 3806, 24013, -15679, 18381, -18633, 15355, 12426, 13550, 66916, 8784, -8075, 15125, -16471, -2257, 11595, 343, -17064, -2246, -8646, -14416, -13564, -10932, 5332, 17396, -24605, 991, -14474, 5974, -5172, -43658, 39178, -14207, 31845, -19327, 39301, 875, 19087, 5634, -23970, 43532, 44023, -10145, 2930, 9227, 25480, 34321, 41144, 14249, 6873, 48132, 11795, -28849, 16497, 10837, -9463, 3529, 12486, 8534, -3573, -9473, -5151, 362, 43615, -7193, -447, -674, -45353, 7530, -10452, 5647, 6, 12229, -4034, -4121, 15644, 18210, 18625, 23023, 28552, -22569, -20330, 34269, -19778, 32200, -7374, 5736, -11387, 32975, 22307, 7609, 22421, 18499, 360, -12956, 22941, -16686, 616, 12973, -10866, -24101, -5231, 5947, };
const TfArray<1, int> tensor_dimension11 = { 1, { 102 } };
const TfArray<102, float> quant11_scale = { 102, { 9.7237847512587905e-05, 6.0396734625101089e-05, 5.4698648455087095e-05, 4.2461480916244909e-05, 6.2603525293525308e-05, 6.0187812778167427e-05, 0.00016874268476385623, 4.7289810026995838e-05, 4.2123327148146927e-05, 5.5079672165447846e-05, 6.8213594204280525e-05, 8.3817431004717946e-05, 0.00011432767496444285, 6.2616578361485153e-05, 3.5988690797239542e-05, 0.00012453638191800565, 4.6324170398293063e-05, 3.9604768971912563e-05, 6.4349791500717402e-05, 6.0518585087265819e-05, 4.0962553612189367e-05, 9.9250224593561143e-05, 8.059653191594407e-05, 4.5308021071832627e-05, 3.4113309084204957e-05, 7.833027484593913e-05, 0.00014346007083076984, 5.9171383327338845e-05, 5.7366443797945976e-05, 6.8606466811615974e-05, 3.5145738365827128e-05, 4.5683504140470177e-05, 3.941847535315901e-05, 5.9223944845143706e-05, 6.8505061790347099e-05, 5.5744701967341825e-05, 4.125300984014757e-05, 9.2179143393877894e-05, 3.7446585338329896e-05, 0.00010118533828062937, 5.2712657634401694e-05, 8.0098201578948647e-05, 6.550199759658426e-05, 6.6616572439670563e-05, 6.4507803472224623e-05, 8.1824422522913665e-05, 8.210700616473332e-05, 7.9293429735116661e-05, 0.00010023997310781851, 8.8436463556718081e-05, 9.3170150648802519e-05, 0.00010094914614455774, 7.9842830018606037e-05, 8.2801831013057381e-05, 0.00010486674000276253, 9.5240633527282625e-05, 6.1696089687757194e-05, 3.7237929063849151e-05, 5.412123937276192e-05, 6.8910769186913967e-05, 9.2988069809507579e-05, 8.1665806646924466e-05, 3.324031422380358e-05, 0.00011592914961511269, 4.9799225962487981e-05, 8.2590500824153423e-05, 5.6724344176473096e-05, 9.8435673862695694e-05, 7.5012430897913873e-05, 4.4339314626995474e-05, 6.1680730141233653e-05, 5.4838466894580051e-05, 7.0030386268626899e-05, 6.735927308909595e-05, 5.1314138545421883e-05, 6.3897750806063414e-05, 6.3726693042553961e-05, 0.00011695403372868896, 4.8165682528633624e-05, 5.7250814279541373e-05, 6.2087041442282498e-05, 8.224654447985813e-05, 9.4575909315608442e-05, 4.4508382416097447e-05, 9.2020563897676766e-05, 4.6411689254455268e-05, 8.37729821796529e-05, 5.5478310969192535e-05, 8.5224615759216249e-05, 5.4705680668121204e-05, 6.8534958700183779e-05, 0.00011464244744274765, 9.1348352725617588e-05, 7.2066752181854099e-05, 5.8829627960221842e-05, 4.5905941078672186e-05, 0.00010612238111207262, 8.0063175118993968e-05, 6.9319445174187422e-05, 5.8465670008445159e-05, 6.4151798142120242e-05, 0.00011460993846412748, } };
const TfArray<102, int> quant11_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data12[102*1*1*51] = { 
  /* [0][0][][] */ 32,-2,100,14,-64,98,-50,-89,-16,-53,29,67,-127,13,-6,9,-63,-9,-47,-13,-50,-3,-4,19,62,-5,54,-31,11,21,2,-30,-13,-38,-3,-62,-20,56,32,56,-5,30,-44,-12,42,-14,101,-104,-13,-12,12, 
  /* [1][0][][] */ -100,-36,-2,7,-59,8,27,-127,19,-29,106,26,11,-94,79,-57,19,-31,50,7,-12,52,36,16,-111,-43,7,-103,-1,2,-77,-20,-62,107,-75,30,73,-95,-12,-36,-2,12,38,24,92,86,98,-89,-25,-64,117, 
  /* [2][0][][] */ -50,8,48,50,123,-127,85,4,111,103,12,-68,-29,-15,-38,13,89,-75,-73,31,23,47,-19,-71,-49,41,116,-46,100,23,117,-87,-11,67,19,-86,31,8,56,20,19,95,-8,-13,30,119,89,-56,-31,-19,-60, 
  /* [3][0][][] */ -43,13,-50,51,5,-85,-72,127,-7,93,33,64,-48,18,-67,-79,88,-48,56,-23,-17,-28,-76,-14,38,-80,-24,-79,45,6,5,70,72,115,35,-79,-23,12,-1,-13,-16,-28,-45,47,-6,-57,75,126,-26,-86,-100, 
  /* [4][0][][] */ -127,-70,12,60,-76,36,-33,-13,5,17,66,9,53,27,67,-12,42,-31,42,48,-39,96,-25,-37,81,-21,15,124,74,8,16,-74,37,-52,-14,35,-16,3,120,-47,23,8,52,48,27,22,18,70,-33,-57,-3, 
  /* [5][0][][] */ -48,20,-73,11,-14,51,-16,-1,10,25,-48,30,-55,36,-42,-13,9,-63,16,21,100,80,19,8,25,63,-18,-127,3,13,-6,-25,-76,30,-114,18,-71,23,23,-3,15,39,36,43,43,-23,-30,-39,36,-58,42, 
  /* [6][0][][] */ -6,49,94,-41,-21,-48,-67,1,-9,5,-27,36,-127,63,71,14,47,26,-36,-7,-45,31,-14,-19,1,-32,8,-34,-76,0,-24,17,-2,35,-18,-50,-83,1,56,-11,29,-19,42,-20,-54,2,35,35,-6,-5,-16, 
  /* [7][0][][] */ -38,32,30,77,80,37,-21,35,-5,-56,-60,-12,-13,-31,53,24,85,-38,-29,49,-8,20,-32,9,19,7,14,0,-39,0,-47,-73,33,-71,-17,-9,19,0,-23,11,18,-46,-57,35,55,-41,1,-127,-56,-12,2, 
  /* [8][0][][] */ -104,-68,46,-68,-42,-13,-1,9,-6,17,38,-8,-29,-48,34,5,-14,127,6,15,-24,48,-95,-17,-45,0,-5,-65,46,32,-66,-2,-19,24,-9,-1,54,-41,-25,-35,16,-55,-97,-21,41,-27,-19,-3,-6,-47,-66, 
  /* [9][0][][] */ -11,-1,-41,-73,-39,53,59,-46,37,-30,4,50,-3,-33,-1,118,-73,44,30,15,-31,-55,-58,-87,-41,42,-21,56,-34,-13,70,7,30,-14,-127,-4,17,66,23,-40,51,-28,-48,46,28,-18,91,-55,9,27,-19, 
  /* [10][0][][] */ -25,75,19,32,19,-12,-46,-11,-31,24,71,82,101,-40,-34,-49,23,80,127,-19,-104,-54,-61,8,25,-9,-56,110,7,-6,0,-103,26,49,-15,-26,-27,-66,-40,18,-13,-6,-19,32,28,43,-20,78,72,-42,-65, 
  /* [11][0][][] */ 115,-71,7,-19,26,-19,5,-103,30,-2,-61,-21,-42,26,41,31,-35,-27,-56,27,48,127,20,-8,25,-44,-117,-10,7,42,-70,-6,5,6,-31,-33,55,19,-22,34,-65,-3,0,17,-12,54,-7,-50,-34,-18,1, 
  /* [12][0][][] */ -73,-34,39,-112,127,-44,-107,-25,2,-40,8,-89,22,25,20,80,124,14,71,35,2,-59,40,41,112,-12,-45,110,47,-5,54,39,28,-14,64,60,85,-35,-3,80,-45,-117,-19,50,-33,35,15,-41,-30,46,14, 
  /* [13][0][][] */ -92,77,16,20,11,45,-74,-28,-65,-35,20,3,49,-38,-83,1,54,-12,83,-70,15,-82,-3,5,54,44,60,102,-19,86,-39,-27,7,71,-68,17,34,-46,42,-73,34,50,41,50,13,-40,5,-21,17,127,-40, 
  /* [14][0][][] */ 23,39,-1,25,-95,18,-71,105,32,-74,-23,54,-20,-45,-50,39,-27,60,-10,-41,67,-3,-22,-50,7,2,-68,-127,12,-41,45,75,-13,68,-3,125,42,-61,-67,27,-14,-98,-5,-18,15,0,38,18,-113,83,-63, 
  /* [15][0][][] */ 48,-46,-34,48,49,1,9,18,-13,-25,21,-29,-70,-10,7,-11,-22,29,-41,54,29,24,73,17,106,17,-81,-24,43,127,-9,-10,0,-54,17,-66,44,-68,-18,43,-19,-18,17,-57,14,-26,-7,-8,-19,5,-10, 
  /* [16][0][][] */ -27,-92,-7,-84,38,-15,0,29,23,60,10,-25,-28,-59,21,5,-25,-84,-26,33,58,111,-67,6,-23,68,20,78,37,67,23,-127,23,8,-63,69,28,57,80,53,-47,75,-65,72,-29,66,55,-3,-16,24,104, 
  /* [17][0][][] */ 58,-21,-19,-85,-28,-25,-34,80,127,112,-77,1,61,53,7,36,32,75,-36,-7,-21,31,-64,-68,65,31,12,-14,38,35,-19,-11,57,1,96,53,-24,-2,-33,-94,-13,28,29,-114,80,-30,20,64,-73,80,-79, 
  /* [18][0][][] */ 51,-7,36,90,-62,-8,-59,113,-26,87,-40,-122,-63,-45,63,44,-58,20,30,-3,44,-6,127,30,-88,100,8,33,-63,-52,-22,-54,-53,-52,47,-5,66,47,89,-123,21,94,-47,15,7,-24,-23,42,-68,41,-25, 
  /* [19][0][][] */ -69,91,19,111,-54,-5,104,14,-24,-46,19,70,10,-60,-29,-12,13,-55,-53,-40,36,0,-73,70,-91,-46,-99,-38,80,29,127,125,91,16,-22,43,43,28,-27,94,-29,-11,74,-21,7,119,4,-88,69,-6,88, 
  /* [20][0][][] */ 53,3,-56,127,-44,-27,0,69,-55,59,18,30,84,-63,11,23,-20,21,5,36,57,-41,-55,4,-21,114,36,-49,-71,-37,-14,-15,-3,-58,68,-122,7,13,-67,-28,-49,66,-18,26,-58,-44,106,34,43,68,-28, 
  /* [21][0][][] */ -3,-12,71,1,-73,37,24,34,43,-6,30,-25,2,22,-75,127,71,8,-7,-60,13,-7,32,27,-6,11,19,-15,67,-6,-26,-41,33,107,69,-18,-26,-5,37,-9,102,27,-53,14,-16,-82,-1,23,-8,-39,-64, 
  /* [22][0][][] */ 70,-37,25,-42,-46,-21,0,-17,93,-43,-51,-109,15,44,4,42,-2,5,15,15,11,14,15,-19,-30,-23,-19,-127,-10,-5,52,-119,-37,-34,34,97,-22,36,84,-56,-5,53,-15,6,44,-17,43,45,-50,14,10, 
  /* [23][0][][] */ -60,20,-18,-58,-3,50,12,15,36,-82,-3,-68,-34,-51,-82,25,-25,90,30,81,-20,-37,25,-79,92,107,-40,90,-74,-86,117,-21,109,-10,-54,-32,5,-127,66,2,-2,-17,62,-104,-116,-31,118,-47,-114,-53,-53, 
  /* [24][0][][] */ -11,-11,-47,56,77,50,45,-19,-3,39,-12,-9,48,-36,127,12,-12,-6,-35,-22,-15,-13,-28,-36,25,50,5,-23,36,-2,11,22,48,9,-31,115,-57,6,-16,-5,-11,-59,78,27,24,-32,35,-52,-44,64,-34, 
  /* [25][0][][] */ 4,22,14,-9,5,37,-1,23,36,-38,6,23,-40,-47,-30,67,42,-19,-12,34,-38,89,-8,80,35,-18,-7,18,6,-10,1,-14,-18,56,-59,12,-39,-4,52,9,127,-33,-18,-1,12,9,-21,-35,-10,6,-26, 
  /* [26][0][][] */ -44,-36,-19,-43,-51,92,64,26,69,28,55,-16,29,-124,-39,99,12,-26,15,34,13,-127,115,76,-56,-13,32,18,-28,-40,124,-38,-53,43,77,-38,52,49,-28,9,58,55,-40,3,28,-60,29,31,-12,21,-65, 
  /* [27][0][][] */ 109,-68,-35,-23,42,-3,36,-17,77,64,29,23,-15,3,-10,18,-11,-4,-72,14,3,49,-41,112,-27,50,27,39,74,-18,35,-127,-43,20,-20,-21,42,46,-21,-51,15,51,37,-30,21,-28,-5,-27,-54,-57,28, 
  /* [28][0][][] */ 36,-52,85,-2,13,46,34,-20,-34,60,78,-33,2,-120,-17,71,-16,-25,-47,-82,-14,-18,-98,9,86,70,3,-16,56,59,76,-37,48,-29,-87,-57,-85,5,78,51,8,-44,71,-26,35,-15,-41,-121,127,8,46, 
  /* [29][0][][] */ -52,94,66,-75,12,1,-15,-60,108,-29,47,41,33,41,41,114,-2,-15,101,11,-34,88,-26,-57,15,-32,126,-71,-49,33,-45,-50,-11,127,47,14,24,-10,62,52,76,39,83,-72,73,14,35,-89,36,40,51, 
  /* [30][0][][] */ -23,-39,23,39,-99,12,-13,-16,-19,-40,-127,-51,-76,-46,17,1,-74,53,-36,-105,-2,-51,50,-25,-30,-8,57,14,-5,-68,24,46,63,34,-57,-67,-84,-47,-26,4,-15,-7,-34,-32,0,-38,40,27,38,81,-78, 
  /* [31][0][][] */ 22,10,51,19,11,50,-75,12,-53,32,-26,47,-19,77,-56,21,-3,-8,-5,-29,33,34,4,51,2,45,-8,90,39,11,127,-37,-37,15,-1,-9,19,53,-52,-82,10,33,65,-15,0,-60,-76,-28,-7,-21,27, 
  /* [32][0][][] */ 62,-15,-65,98,-9,4,-40,-66,-11,-33,-54,65,18,-12,-6,80,42,-38,-69,-59,10,-48,-86,-16,2,8,-96,-39,-53,-95,-95,10,-9,54,31,-77,44,-26,85,12,-5,-83,52,28,37,-28,-93,-6,39,-16,-127, 
  /* [33][0][][] */ 3,52,24,13,24,60,26,-37,15,13,-20,52,23,-49,5,12,-4,20,-9,-47,-23,-4,5,9,34,-12,19,12,-46,-57,16,28,28,91,-39,-8,-3,-32,51,-30,21,-43,9,-40,37,-26,127,0,63,36,-45, 
  /* [34][0][][] */ 20,9,39,-28,26,-127,-8,-114,12,-68,-39,-109,-48,-39,-14,-26,19,15,-7,8,-42,25,-36,-36,-51,-33,14,-5,-11,-118,-76,42,-13,100,103,-13,-22,-40,86,-51,0,-34,13,0,-31,-3,33,14,3,-20,45, 
  /* [35][0][][] */ -2,42,-31,22,2,54,-32,-61,14,70,104,-8,24,13,-26,-24,0,47,-9,-7,-15,-41,44,21,35,26,-9,19,0,-81,-13,-13,32,17,-7,7,-22,-60,30,-35,-5,127,8,41,-24,-6,-12,-24,79,-14,42, 
  /* [36][0][][] */ 12,0,37,-19,-4,8,-18,59,-7,-44,-49,-2,92,18,-41,-101,40,-8,-21,-92,-13,34,72,-15,58,12,-55,8,-98,78,-57,124,-127,0,-6,23,-120,105,66,-97,10,43,2,7,-24,46,8,59,-18,87,-40, 
  /* [37][0][][] */ 8,36,-26,49,-11,48,-49,-14,60,-80,-22,-23,1,-51,4,52,-13,70,8,44,-46,16,-53,38,-4,25,11,-1,9,-9,-52,-31,-67,-93,-10,-12,-38,-23,57,6,-25,107,-1,-27,23,37,-23,-27,-14,24,127, 
  /* [38][0][][] */ -27,-1,-17,24,-37,-107,54,-76,-87,16,108,4,95,57,-56,-12,8,48,-22,127,-70,79,69,71,2,29,-75,-26,-20,30,61,2,101,61,11,-26,43,-36,7,-69,11,-15,40,-14,-33,-90,-29,-7,62,9,62, 
  /* [39][0][][] */ -69,-61,-99,-6,-16,-23,-21,7,-16,31,30,1,17,-56,-3,-17,-76,-6,-54,70,25,78,-31,17,-44,-68,-26,-79,127,-42,-119,-82,-24,85,38,3,-51,41,14,54,-26,20,34,-25,23,21,-17,-56,-25,-57,-20, 
  /* [40][0][][] */ 36,42,-10,120,-4,-10,-64,47,53,-86,46,-4,-2,-58,-117,127,23,-57,5,-66,-7,7,2,16,-10,-8,-112,-68,2,-19,-72,-6,-60,12,-39,31,-46,-29,33,3,-9,15,-28,-34,22,40,11,-32,-75,-10,42, 
  /* [41][0][][] */ -40,27,14,6,2,-1,-84,40,35,1,56,6,39,73,-27,-17,71,-37,110,47,-22,-53,37,28,21,24,-14,3,-6,-15,77,-127,-20,-41,17,-33,67,19,-35,2,16,49,38,-49,-15,-31,0,-46,18,69,-119, 
  /* [42][0][][] */ -23,31,19,-6,-61,1,39,83,-26,-39,-5,-30,35,28,0,36,-12,48,-34,-87,-20,-5,-19,-40,-15,127,-43,14,-38,-59,-3,-23,67,42,-64,-26,-12,62,30,17,54,26,30,3,-13,34,-23,-23,-11,-31,20, 
  /* [43][0][][] */ 17,-9,57,18,55,-2,-22,-92,66,9,-66,63,-96,-15,26,19,-17,13,5,93,-74,-35,-40,-53,-17,-31,-106,-41,20,14,66,11,36,26,-127,-15,-51,18,24,-7,15,-39,74,58,50,-26,15,-75,-5,17,16, 
  /* [44][0][][] */ -84,38,2,23,-44,40,43,-41,53,17,13,3,76,-33,29,28,-3,53,29,-52,10,-40,27,-13,-127,72,-8,-5,17,-62,18,48,-21,-22,11,0,-72,-64,-54,-41,-7,-48,22,9,-14,-22,57,11,-21,-45,-20, 
  /* [45][0][][] */ 40,-6,-34,99,-26,-88,-32,-76,-2,-57,7,-82,42,0,-61,-13,-4,15,-16,-50,-118,-44,15,38,-23,9,-31,20,-19,-71,1,-36,127,34,-59,-10,56,-57,0,29,13,-117,-57,89,-35,-81,-57,27,-24,25,11, 
  /* [46][0][][] */ -46,-13,-31,76,-18,-84,-9,-48,-41,-14,-55,106,24,-49,-18,47,-23,-53,-30,-30,-52,-5,-29,14,-127,-40,7,97,-1,-32,6,56,13,29,-12,-69,-1,7,-10,-12,7,-19,-38,-42,8,-56,-17,-69,-41,1,22, 
  /* [47][0][][] */ -3,127,12,-7,-41,36,43,12,11,39,29,4,37,-12,-8,-77,21,15,25,30,-49,-2,-3,-57,-55,-28,-22,-3,11,19,-20,-36,14,37,-108,21,-113,-44,-55,66,-21,1,-68,-16,-17,29,-31,-10,66,4,-70, 
  /* [48][0][][] */ 1,21,-41,-11,45,-29,-30,-57,2,-44,-29,-36,-11,81,21,37,1,54,-28,-6,-68,-35,-16,-29,-11,-7,-43,-3,17,24,127,-28,-13,-11,-21,21,24,-44,-24,41,9,-53,-7,53,27,-3,13,0,-17,-25,-2, 
  /* [49][0][][] */ -10,-45,-78,-71,-56,-5,-61,7,15,20,31,-34,-127,-24,35,-37,-8,76,17,-19,-20,-34,-65,94,-12,-30,-11,30,11,-37,-39,-126,9,7,9,-46,-33,93,46,15,2,-23,-27,-22,-23,16,-30,37,-46,-40,-46, 
  /* [50][0][][] */ -127,19,28,48,22,72,25,51,-81,-89,-43,85,2,24,45,7,-34,34,-22,48,42,14,-67,16,-51,4,24,-41,-64,-48,12,-28,-65,29,-64,-101,0,42,-4,-100,-7,-38,9,-67,13,-28,111,27,16,-74,17, 
  /* [51][0][][] */ 13,10,42,29,27,28,42,-21,-25,43,41,-3,61,37,-11,5,6,7,50,17,41,10,-18,7,2,0,37,-34,37,-13,-10,44,89,-26,-13,66,-2,36,-15,34,-3,12,7,11,127,29,13,-29,3,-16,57, 
  /* [52][0][][] */ 8,5,86,43,-14,-14,53,-9,52,-36,-19,41,-25,33,31,-43,-23,-67,20,-14,51,21,-127,-54,-62,-4,47,-40,20,-11,-73,1,-24,25,-34,16,-2,-14,38,1,14,21,-36,-42,-43,-29,-9,-6,-15,-20,-56, 
  /* [53][0][][] */ -33,43,23,22,-29,3,127,20,-25,29,3,-15,-102,8,40,-20,-63,-33,48,-62,-60,11,37,-2,-57,69,-14,34,-18,58,-3,-46,-27,-4,-70,-42,-10,-30,5,-1,43,5,40,-54,4,26,-38,-1,2,-15,-22, 
  /* [54][0][][] */ 69,-6,121,110,63,-43,-56,-41,-39,8,1,32,-26,28,-9,-118,-41,81,10,70,-15,19,-33,-23,20,12,25,41,13,28,-17,3,23,-77,-74,-10,28,56,7,-64,-24,-58,102,-127,-83,12,115,-53,-12,-2,-62, 
  /* [55][0][][] */ -14,-39,1,6,31,-2,4,-46,34,-17,7,29,-18,1,13,-11,-28,-1,-19,62,-18,-38,127,21,-23,-22,-51,-12,13,-18,11,-35,-18,18,-39,-9,8,3,-24,21,11,-21,34,4,5,-5,49,26,5,-8,-19, 
  /* [56][0][][] */ 83,-37,51,34,29,-49,-50,49,21,-71,-23,-68,-102,-23,-26,-16,31,-64,71,-31,-13,51,53,14,-13,-19,77,44,6,24,-79,5,2,-14,13,-5,-34,9,43,-5,-8,47,-22,-30,105,8,127,23,-24,12,-2, 
  /* [57][0][][] */ 61,-2,-44,8,19,33,15,20,88,64,-80,53,-4,-46,-45,96,-27,63,-60,-83,-21,34,1,-15,104,7,108,53,-95,-2,-76,-23,-30,-40,127,-52,28,55,-7,60,-30,-90,12,47,15,-50,-31,-1,-100,-5,-65, 
  /* [58][0][][] */ -55,-7,-22,32,4,-69,8,-14,52,-27,12,61,-21,9,34,-84,21,-9,42,-94,27,-48,-39,-18,63,-35,-2,5,-44,37,127,-71,32,53,-120,8,-25,46,-25,2,-2,48,24,29,-10,76,8,35,93,33,38, 
  /* [59][0][][] */ 36,-74,-68,72,8,27,108,-1,74,-33,103,-29,127,41,-82,-22,-65,-6,107,-29,27,-15,18,5,-55,98,-53,57,-4,29,-78,53,45,49,1,-79,-19,87,37,0,-4,-12,-22,28,-1,-35,-28,-32,-121,-9,-88, 
  /* [60][0][][] */ -20,47,31,-28,27,-2,14,-119,-34,-4,9,-22,30,25,9,-28,59,-7,-19,6,-81,-43,-29,-9,17,76,15,37,-25,-13,62,-16,60,0,-127,-3,13,114,-14,51,-22,4,8,-13,-13,75,0,60,-27,46,-58, 
  /* [61][0][][] */ -2,26,3,-18,40,-11,21,11,-19,-22,29,61,-13,6,50,15,-4,16,4,127,-32,-57,19,-20,-25,-6,-73,-34,-7,-19,37,87,-76,37,5,16,68,-58,-5,9,32,5,14,-57,33,-56,-24,66,-60,-43,3, 
  /* [62][0][][] */ -40,-31,-27,-18,-79,-27,-41,-35,6,-16,-10,-14,-47,-127,43,86,-14,35,44,-50,-21,-68,-85,-37,-2,-105,8,9,-40,-29,-65,-17,63,5,-87,-57,29,-42,4,-41,-1,-97,-61,-26,77,20,58,36,-12,12,-66, 
  /* [63][0][][] */ 20,-5,2,21,4,-18,-21,9,-67,18,98,18,-84,-33,-57,70,127,22,8,100,1,-98,-43,37,9,-51,45,68,-29,-58,25,-54,-53,107,47,-50,26,95,112,3,89,-23,-116,-26,10,-55,-37,-11,7,88,42, 
  /* [64][0][][] */ 30,-89,-29,-30,-20,-69,-33,-48,20,0,21,50,-22,70,105,64,8,-5,95,41,-8,8,-60,71,5,-41,-10,-4,-40,-33,34,-111,-81,28,39,2,-17,30,40,70,21,71,22,-48,67,123,-7,-59,-34,61,127, 
  /* [65][0][][] */ 50,-44,48,5,20,-12,53,-23,-10,-56,4,3,-32,-49,-58,-24,-54,-36,13,14,-55,-6,-50,-24,94,8,18,2,54,-27,75,110,1,127,76,27,8,-105,-32,-45,28,63,-27,56,-86,99,-21,8,-15,-6,-31, 
  /* [66][0][][] */ 85,1,-43,-27,69,69,89,42,66,-4,-59,-40,-17,-79,-71,127,-27,-12,-42,35,-52,72,71,42,108,49,116,53,-20,-11,-30,-8,-44,41,18,5,-60,-41,71,31,73,103,23,96,23,-15,-10,-13,22,21,-17, 
  /* [67][0][][] */ 16,-3,-27,-53,-56,-11,-48,29,-5,-38,51,29,24,-33,-94,-31,52,39,60,35,13,3,71,-63,36,12,-23,15,-41,-22,-23,-60,-93,26,27,33,28,-56,45,127,-25,-31,-73,-20,-57,61,54,33,-7,-42,-71, 
  /* [68][0][][] */ -3,22,-45,-10,-63,-4,-41,-28,1,102,25,-2,76,38,32,0,-3,-6,-79,-28,-3,27,-9,35,-63,-37,42,-127,59,-64,48,12,6,39,47,-66,8,72,106,26,35,75,-5,47,28,34,-15,26,39,-17,16, 
  /* [69][0][][] */ 3,-18,72,-31,84,-36,-21,25,47,34,-21,27,43,-24,25,39,-3,-27,59,85,70,57,67,11,18,-2,-45,18,-76,-33,67,-74,-42,86,-127,-45,-23,-33,-38,18,30,4,-70,-95,-18,-79,-12,-24,-10,37,45, 
  /* [70][0][][] */ 22,-1,35,-26,113,77,3,47,28,-44,9,-25,-39,3,63,30,-5,-57,65,-50,-87,22,-45,60,-18,-103,1,69,-61,17,-35,-28,3,5,-5,-2,-30,-26,93,-49,14,-61,-73,-38,72,-58,127,28,30,-3,-76, 
  /* [71][0][][] */ 31,-84,0,72,-36,-11,124,36,27,-77,53,-7,-7,65,-53,98,58,-33,-10,-4,5,-27,15,66,53,8,53,73,38,-61,-54,-86,-57,-19,-77,17,7,-76,20,-74,64,-44,-3,1,-85,-47,52,-127,6,-34,-42, 
  /* [72][0][][] */ -16,-24,61,62,3,-26,53,66,63,17,51,46,41,44,14,-127,-27,9,34,6,26,-37,10,13,-26,29,-50,-62,-48,58,-13,92,34,22,-5,-75,-61,26,20,-52,-10,-4,4,-83,-14,-44,17,15,99,-25,-33, 
  /* [73][0][][] */ 33,-21,72,64,-61,-3,4,34,-34,84,0,-9,41,43,-100,-25,-25,9,-67,-102,30,82,-84,30,127,26,14,-68,67,19,-32,48,85,-21,22,6,38,46,-18,25,-20,41,46,-12,13,52,-34,-94,79,-59,-45, 
  /* [74][0][][] */ -38,-33,6,32,-31,-24,-20,-19,-7,-24,-44,35,46,-6,-108,103,-26,16,0,1,-12,19,70,-96,-28,10,28,23,37,-6,-27,-60,46,55,-85,-49,-17,22,73,28,75,-66,127,-3,15,-96,-48,-109,8,-26,-28, 
  /* [75][0][][] */ 12,-83,34,8,14,-5,-24,-105,12,-108,101,-9,-14,51,48,31,-23,0,69,30,-35,16,35,99,-91,40,-86,-28,-57,-118,80,-44,39,-23,-50,-16,22,-21,18,2,-72,0,-127,-79,-21,81,28,-112,-43,55,-25, 
  /* [76][0][][] */ -5,-63,89,12,9,49,13,57,10,54,-8,26,-14,23,-9,83,104,-107,-63,8,-19,63,55,-74,-127,22,-74,-84,-1,34,46,-73,-79,70,-6,-40,-41,-16,79,-26,79,-100,-50,-10,-83,14,-127,-51,25,10,33, 
  /* [77][0][][] */ 1,-83,10,59,41,44,-9,32,52,-39,-28,30,-26,64,45,-5,7,-16,-5,95,58,-25,-19,11,7,20,7,51,-47,-24,62,-7,-114,-76,-13,13,-36,-62,-93,-62,-35,-9,-28,-103,-41,45,-31,3,-127,-60,-5, 
  /* [78][0][][] */ 60,1,-20,102,-13,-110,-2,-105,61,-32,-64,43,-127,0,-32,-112,47,1,-14,-1,-92,0,-53,15,-120,33,58,-93,-49,97,97,118,111,-41,-4,-52,34,-25,37,-15,-37,9,13,-30,-4,6,-76,88,12,-14,20, 
  /* [79][0][][] */ 103,-21,30,109,-37,-49,-32,12,26,42,15,-28,59,-13,-5,88,33,-60,52,45,-44,46,35,33,82,81,-15,-41,40,-29,36,-69,-127,38,-22,26,75,-37,-33,46,-13,-16,36,67,21,6,23,-49,-47,-56,19, 
  /* [80][0][][] */ 47,-18,4,37,-9,-17,-68,58,-19,-20,35,58,101,-12,7,38,4,117,27,127,-23,-100,-45,10,1,93,4,-8,-58,-27,-21,-2,-17,-47,74,-33,-103,-10,-47,69,12,72,94,-55,9,-94,55,-29,74,48,-98, 
  /* [81][0][][] */ -52,10,11,-48,-23,-16,-60,-2,4,-14,-56,-42,-7,-7,1,2,17,12,41,-32,-14,-10,-19,34,-39,20,32,13,-1,-60,-9,-64,7,29,-40,-6,-10,18,-57,-18,-37,-44,-10,40,-25,-43,127,-70,7,-8,32, 
  /* [82][0][][] */ -62,-22,34,61,-25,14,-6,83,43,-32,21,9,22,127,26,2,88,-3,-82,107,77,-97,70,35,-64,-5,25,36,-42,-21,-67,-1,30,74,-41,-23,6,-2,-24,54,15,42,22,-26,14,14,-17,-36,45,-3,50, 
  /* [83][0][][] */ -55,-16,-47,-98,-71,-51,71,-74,-34,55,-64,6,49,-22,-82,17,-4,26,-84,81,-26,112,67,-16,-119,64,83,-46,-81,-51,4,-92,-21,-94,-86,62,127,-40,11,89,-33,-75,-64,-28,117,71,80,-66,-18,-8,-42, 
  /* [84][0][][] */ -16,24,79,-34,-10,73,-8,9,-27,9,-17,-76,-28,79,63,-62,-50,-6,12,111,-51,8,-93,6,53,-66,46,-27,-22,1,64,-38,-8,5,-5,-16,31,32,-48,-27,-5,50,23,-7,-13,127,22,-7,-44,28,-21, 
  /* [85][0][][] */ 11,34,-33,74,-37,-9,-2,47,18,-77,64,89,-3,-33,-37,14,40,-42,-12,15,28,51,114,-28,-59,-7,20,127,8,-60,43,-82,-6,78,-8,3,47,-107,-26,-8,29,-108,37,-20,4,84,-14,-41,-11,-28,27, 
  /* [86][0][][] */ 22,2,-42,-19,-32,35,-6,-127,19,-33,-20,-4,14,18,45,-1,8,12,-33,-26,9,-9,49,31,37,4,-13,1,38,86,11,2,21,-4,14,-22,46,-25,42,-23,-13,10,-1,-3,25,37,7,4,50,-23,31, 
  /* [87][0][][] */ -15,-39,54,111,-44,-8,63,-127,10,-58,-18,25,-56,-51,-71,-72,-9,74,17,46,-23,-38,-5,22,-102,2,54,-73,-11,41,71,-29,98,16,-43,-65,-58,-13,26,-18,-25,-46,-75,-40,31,5,35,33,-40,8,-114, 
  /* [88][0][][] */ 25,57,-56,-15,-127,-92,8,22,19,9,15,-58,-60,-22,-13,10,-35,19,-23,15,20,-32,25,8,-39,-34,-18,-57,-7,-64,-93,-47,104,5,60,-47,-18,73,54,47,4,37,1,-25,-21,-28,94,-38,-86,-14,-22, 
  /* [89][0][][] */ 37,0,-34,63,-17,30,-22,35,48,-21,127,-60,37,-53,-24,24,-21,3,-2,-85,-12,1,24,-99,0,-49,57,16,-73,-23,23,103,27,-70,24,-44,-54,107,-35,-16,-18,43,22,-8,-10,97,-60,36,13,-14,54, 
  /* [90][0][][] */ -56,-86,-69,6,-31,-57,42,-18,41,-4,45,-12,24,-52,-17,-35,-14,7,41,-19,53,127,-61,2,-19,-63,-45,-4,8,10,28,-24,48,23,-36,-14,-9,38,32,-42,57,-11,-16,16,-13,-14,-30,-124,80,48,-41, 
  /* [91][0][][] */ 6,-24,-19,-14,-6,-30,-18,-20,30,-23,-33,-11,38,-92,9,34,29,-36,15,56,23,16,34,23,-1,-24,-28,-37,34,18,1,-127,-19,16,-68,6,55,-40,-45,-19,14,1,2,-11,13,-26,-4,3,-1,-26,-3, 
  /* [92][0][][] */ 6,66,-118,-18,-6,-11,10,20,-41,61,73,-69,78,2,32,37,30,5,-60,2,52,-23,-49,-64,-28,-30,2,-74,20,0,4,127,90,-2,0,73,-56,30,26,-22,-16,0,-38,55,12,-46,-21,-14,2,-19,66, 
  /* [93][0][][] */ -20,35,1,-25,-3,32,-43,32,15,64,68,-15,-19,34,7,12,13,25,5,4,-10,20,1,39,-1,-11,20,-39,-58,23,73,-56,28,-16,75,-6,7,-74,105,84,3,18,-19,27,-7,51,-74,-11,127,5,-27, 
  /* [94][0][][] */ -24,12,-10,-74,11,-101,-5,-12,-31,6,13,127,0,-71,21,35,-50,-44,13,45,-64,-72,95,-29,66,113,62,-103,3,38,40,-64,26,10,-27,-48,32,13,9,-51,66,-116,71,-54,33,51,-63,-71,-10,12,10, 
  /* [95][0][][] */ -40,-2,6,7,24,8,23,12,72,15,117,-9,13,-22,-45,22,-84,51,-82,51,119,63,56,-14,18,-27,-40,-72,-35,43,16,-74,57,27,-54,41,46,-31,127,12,24,70,-38,35,-16,-62,-19,-30,7,-64,67, 
  /* [96][0][][] */ -56,69,-66,8,-82,-24,-39,24,-31,-42,24,10,71,31,-17,-16,46,-11,10,70,-12,8,28,30,67,-35,38,-33,23,-25,40,-1,21,46,37,-42,-12,44,-11,26,-49,32,12,55,5,-37,17,-38,-127,-18,-9, 
  /* [97][0][][] */ -85,2,-37,127,13,-23,-50,-32,27,-39,-67,-39,44,40,38,-64,-50,4,104,-89,-95,-25,52,44,11,107,39,-66,-22,-27,6,86,1,44,-2,-47,51,30,29,-51,-6,24,-63,-25,-30,-20,-30,-24,24,-54,-61, 
  /* [98][0][][] */ 17,-18,-68,10,119,53,57,-38,-15,43,30,-13,41,-2,-8,1,11,124,-39,18,40,24,-10,32,10,21,50,-88,25,-58,36,32,-12,-40,43,-9,26,-4,31,19,-27,110,-101,86,-22,20,-36,-9,-23,56,-127, 
  /* [99][0][][] */ 71,10,-38,-109,-4,-8,-77,-28,30,1,-8,-3,-49,-107,106,-85,63,-59,-3,87,28,127,-33,48,37,-15,42,-44,45,59,35,91,-88,113,95,9,15,105,16,40,-71,-44,-3,67,38,-55,75,1,-36,74,-5, 
  /* [100][0][][] */ 86,-56,40,18,-23,-17,20,29,-2,32,30,-10,-6,-69,127,-15,37,5,35,10,3,-27,-41,23,34,70,-21,-19,16,-10,-12,31,11,39,19,-49,-13,-37,-18,9,-4,-5,-7,18,2,6,37,-30,-81,-68,-63, 
  /* [101][0][][] */ -55,-59,-12,-37,-74,27,-20,-34,-22,-36,-7,66,-9,-28,-23,-3,-23,41,63,65,-44,83,57,37,29,14,7,6,18,66,-66,-27,14,-29,-3,-6,-8,127,4,24,-14,75,-35,29,-22,-48,4,-60,-82,32,-105, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 102,1,1,51 } };
const TfArray<102, float> quant12_scale = { 102, { 0.0041326084174215794, 0.0025668612215667963, 0.0023246924392879009, 0.0018046129262074828, 0.0026606498286128044, 0.0025579819921404123, 0.0071715638041496277, 0.0020098169334232807, 0.0017902413383126259, 0.0023408860433846712, 0.0028990777209401131, 0.0035622406285256147, 0.0048589259386062622, 0.0026612044312059879, 0.0015295193297788501, 0.0052927960641682148, 0.001968777272850275, 0.0016832026885822415, 0.0027348662260919809, 0.0025720398407429457, 0.001740908483043313, 0.0042181345634162426, 0.0034253525082021952, 0.0019255907973274589, 0.0014498155796900392, 0.003329036757349968, 0.0060970531776547432, 0.0025147837586700916, 0.0024380737449973822, 0.002915774704888463, 0.0014936939114704728, 0.0019415488932281733, 0.0016752851661294699, 0.0025170175358653069, 0.0029114650096744299, 0.0023691498208791018, 0.0017532529309391975, 0.0039176135323941708, 0.0015914798714220524, 0.0043003768660128117, 0.0022402878385037184, 0.0034041735343635082, 0.0027838347014039755, 0.0028312043286859989, 0.0027415815275162458, 0.0034775380045175552, 0.0034895476419478655, 0.0033699707128107548, 0.0042601986788213253, 0.003758549690246582, 0.0039597311988472939, 0.0042903386056423187, 0.0033933201339095831, 0.0035190777853131294, 0.0044568362645804882, 0.00404772674664855, 0.0026220837607979774, 0.0015826119342818856, 0.0023001525551080704, 0.0029287077486515045, 0.0039519928395748138, 0.0034707966260612011, 0.0014127133181318641, 0.0049269888550043106, 0.0021164671052247286, 0.0035100963432341814, 0.0024107845965772867, 0.0041835159063339233, 0.0031880282331258059, 0.0018844208680093288, 0.002621430903673172, 0.002330634742975235, 0.0029762913472950459, 0.002862769179046154, 0.0021808508317917585, 0.0027156544383615255, 0.0027083843015134335, 0.0049705463461577892, 0.0020470414310693741, 0.0024331596214324236, 0.0026386992540210485, 0.0034954780712723732, 0.0040194760076701641, 0.0018916062545031309, 0.0039108740165829659, 0.0019724967423826456, 0.0035603516735136509, 0.0023578281980007887, 0.0036220462061464787, 0.0023249913938343525, 0.0029127357993274927, 0.0048723039217293262, 0.0038823049981147051, 0.0030628368258476257, 0.0025002590846270323, 0.0019510023994371295, 0.0045102010481059551, 0.0034026848152279854, 0.0029460764490067959, 0.0024847909808158875, 0.0027264512609690428, 0.0048709223046898842, } };
const TfArray<102, int> quant12_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[51] = { 31607, 12291, 21145, -12227, 31980, 21062, -6937, -7119, 23102, -2440, -5696, 31793, 22404, -5872, 48863, -7904, 2544, 29506, 30866, -941, 39801, -5953, -4656, 15380, -140, 25735, 35687, -1457, -82, 22180, 573, 1641, -2262, -3136, -3590, 35104, -506, -2329, 20401, -296, -2076, -7950, 30596, 28889, 13494, -2918, -4752, -934, -9035, 38310, -11116, };
const TfArray<1, int> tensor_dimension13 = { 1, { 51 } };
const TfArray<51, float> quant13_scale = { 51, { 0.00010008797835325822, 0.00025609738077037036, 0.00016448348469566554, 0.00010799951269291341, 0.00010684588050935417, 0.00012988902744837105, 7.1496229793410748e-05, 0.00012654761667363346, 0.00012164911458967254, 7.7676406363025308e-05, 0.00010617187945172191, 0.00013353124086279422, 0.00017391754954587668, 7.9691075370647013e-05, 8.8592416432220489e-05, 9.3669390480499715e-05, 0.00012627179967239499, 0.00012067239003954455, 0.00011197566345799714, 5.7894372730515897e-05, 7.1765185566619039e-05, 6.6060405515599996e-05, 0.0001019999326672405, 0.0001858745381468907, 9.7584554168861359e-05, 0.00013513963494915515, 9.2176873295102268e-05, 7.2456263296771795e-05, 6.8402259785216302e-05, 0.00015449205238837749, 0.00011942887067561969, 0.00025130019639618695, 0.00011410392471589148, 0.00011705562064889818, 0.0001546896091895178, 8.7672720837872475e-05, 0.00012147776578785852, 7.4194853368680924e-05, 0.00014108626055531204, 0.0001489835703978315, 0.00018477613048162311, 8.8111810327973217e-05, 0.00010249154729535803, 0.00014271841791924089, 0.00018708530114963651, 0.00010332927922718227, 0.00013917585602030158, 0.00011082167475251481, 7.290631765499711e-05, 7.8788580140098929e-05, 0.00014114633086137474, } };
const TfArray<51, int> quant13_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data14[1*3*3*51] = { 
  /* [0][0][][] */ -59,-75,-127,127,-127,-126,118,-37,-101,127,77,-124,-79,77,-110,-93,120,-127,-76,31,-36,48,87,-127,121,-66,-127,95,113,-120,-25,55,119,-45,18,-127,60,3,1,82,58,-29,-80,-76,-47,-6,93,82,122,-121,109, -80,-57,-114,127,-93,-127,79,-58,-127,108,107,-127,-77,78,-93,-58,127,-75,-67,39,-47,26,127,-15,127,-67,-102,127,127,-127,-32,127,127,-14,22,-107,127,-6,15,79,-28,110,-70,-127,-88,2,93,94,127,-127,127, -28,-20,-13,21,-53,-15,63,-34,-29,42,29,-32,-29,16,-56,-24,70,-37,-30,-12,-69,16,29,-76,17,6,-45,21,-11,-7,-20,10,-4,-26,31,-28,14,7,13,2,-57,114,-29,-11,-4,-35,-5,3,4,-58,37, 
  /* [0][1][][] */ -118,-72,-103,126,-78,-85,79,-27,-104,82,93,-108,-127,18,-127,78,-66,-53,-100,100,-124,90,72,-45,104,-127,-87,94,127,-124,49,-42,54,97,127,24,84,112,-127,31,43,101,-126,-111,-79,53,127,127,123,-117,7, -127,-127,-111,119,-43,-46,127,-79,-102,119,127,-127,-115,50,-74,50,-23,-85,-127,95,-127,115,70,-69,85,-91,-115,89,97,-98,53,-32,56,127,110,-20,74,123,-103,33,-1,127,-127,-108,-127,65,105,113,120,-115,-41, -19,2,-14,0,-5,-39,-111,-65,-24,38,53,-14,-10,7,-32,53,-47,-10,-20,13,-39,20,45,4,36,9,-7,7,20,-55,12,-25,-41,12,57,-14,26,-1,-12,-9,-27,78,-56,-26,-32,39,-12,13,22,25,-52, 
  /* [0][2][][] */ -45,-63,-12,6,-61,-18,101,108,78,-47,-30,-2,-4,127,-70,127,-16,-95,-9,127,-57,114,55,-26,-91,-127,-58,31,4,-72,102,-53,-14,74,-25,-100,-44,127,-71,10,127,10,-46,-18,-30,109,9,45,78,-100,54, -24,-57,-12,10,-16,22,110,127,92,14,-35,-43,0,91,-99,57,-9,-91,-16,124,-75,127,53,-55,-96,-82,-49,7,0,-15,127,-82,-45,92,-101,-64,-48,117,-59,18,-41,28,-76,-17,-29,127,9,22,65,-61,37, 17,16,5,2,-8,-12,-69,43,30,25,2,19,0,74,-56,107,-19,-51,42,32,5,48,2,-9,-4,-65,9,-1,-11,16,39,-8,-16,36,-11,-62,-4,22,-10,-127,-105,11,-4,18,19,43,32,-51,9,-11,-44, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant14_scale = { 51, { 0.0046463850885629654, 0.011888810433447361, 0.0076358183287084103, 0.0050136623904109001, 0.0049601071514189243, 0.0060298396274447441, 0.0033190702088177204, 0.0058747208677232265, 0.0056473179720342159, 0.0036059725098311901, 0.0049288179725408554, 0.0061989221721887589, 0.0080737760290503502, 0.0036994996480643749, 0.0041127265430986881, 0.0043484149500727654, 0.0058619165793061256, 0.0056019756011664867, 0.0051982472650706768, 0.0026876309420913458, 0.0033315557520836592, 0.0030667227692902088, 0.004735143855214119, 0.0086288554593920708, 0.004530168604105711, 0.006273588165640831, 0.0042791278101503849, 0.0033636377193033695, 0.0031754388473927975, 0.0071719861589372158, 0.0055442475713789463, 0.011666111648082733, 0.0052970475517213345, 0.0054340739734470844, 0.0071811568923294544, 0.0040700314566493034, 0.0056393635459244251, 0.0034443484619259834, 0.0065496484749019146, 0.0069162659347057343, 0.0085778636857867241, 0.0040904153138399124, 0.0047579659149050713, 0.0066254180856049061, 0.0086850626394152641, 0.0047968560829758644, 0.006460962351411581, 0.0051446757279336452, 0.0033845305442810059, 0.0036576029378920794, 0.0065524373203516006, } };
const TfArray<51, int> quant14_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data15[51] = { -12968, 11141, -4701, 47872, -2132, -10673, 40459, -19971, 43569, -9008, -5735, 6482, 15323, 22704, 38093, 22728, 21051, 11951, 30725, 8646, 32393, 3144, 37696, 16627, -16095, 47751, 7082, -8739, -279, 3931, 2849, -47516, 25848, -471, -6767, 3376, 18488, 9176, 17672, -2324, -18273, 6406, 39660, 42663, 7599, -8013, 19189, 3300, -16177, -15198, -18190, };
const TfArray<1, int> tensor_dimension15 = { 1, { 51 } };
const TfArray<51, float> quant15_scale = { 51, { 7.1704576839692891e-05, 4.5642860641237348e-05, 5.5544249335071072e-05, 4.5752021833322942e-05, 7.2229791840072721e-05, 0.00010756970004877076, 7.7493306889664382e-05, 9.4978204288054258e-05, 4.6985038352431729e-05, 9.5039686129894108e-05, 4.9948710511671379e-05, 3.9615548303117976e-05, 5.1592549425549805e-05, 5.754361700383015e-05, 3.9367518184008077e-05, 7.2898488724604249e-05, 6.5140506194438785e-05, 4.9017289711628109e-05, 5.2942792535759509e-05, 0.00011478295346023515, 8.5574858530890197e-05, 8.0278383393306285e-05, 4.1860639612423256e-05, 7.6815362263005227e-05, 8.380576764466241e-05, 5.4110005294205621e-05, 5.1403156248852611e-05, 7.9448174801655114e-05, 8.4937899373471737e-05, 5.5137687013484538e-05, 5.0857706810347736e-05, 6.4200983615592122e-05, 9.382366988575086e-05, 0.00010650420881574973, 4.4070104195270687e-05, 5.4860232921782881e-05, 6.0068563470849767e-05, 6.1374841607175767e-05, 9.2292735644150525e-05, 9.5777148089837283e-05, 8.4357714513316751e-05, 7.3215698648709804e-05, 6.3781219068914652e-05, 4.3728323362302035e-05, 0.00012213211448397487, 6.1372003983706236e-05, 6.5511463617440313e-05, 0.00010067250696010888, 5.1809172873618081e-05, 6.1280778027139604e-05, 7.1396847488358617e-05, } };
const TfArray<51, int> quant15_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[51*1*1*51] = { 
  /* [0][0][][] */ -25,33,-16,-8,-13,-36,-18,-44,20,-3,-37,39,10,-13,9,-70,47,67,-27,62,-73,33,-11,-5,35,-6,0,34,17,26,17,-127,31,-12,49,60,55,119,3,-46,-74,-29,53,6,127,-67,-3,31,112,60,-50, 
  /* [1][0][][] */ 26,-109,106,-6,-50,13,100,-15,26,-127,-39,1,29,-23,76,-113,-14,-13,-23,28,-77,-35,0,-9,20,-46,-31,-8,-2,-57,6,-76,27,10,-42,-12,-36,30,56,37,2,-77,5,102,25,44,47,-49,-40,-78,-61, 
  /* [2][0][][] */ -24,-3,21,-7,64,30,-11,23,-3,-27,37,66,10,-2,31,-61,-39,16,51,-47,36,-29,10,24,-17,-30,-8,-12,29,65,-4,12,-18,-33,-30,25,63,64,19,-32,-12,-24,127,12,-24,-97,2,-64,25,-59,16, 
  /* [3][0][][] */ 33,4,92,-39,44,-64,35,-72,-29,-50,-126,-24,-83,-27,6,-49,9,-22,33,10,-38,25,26,17,-15,-25,-50,33,-94,5,14,-66,92,-27,7,-93,-4,53,-1,-5,-10,-62,-20,24,-92,-127,-26,53,-9,85,-21, 
  /* [4][0][][] */ 97,24,42,-45,-48,-4,-7,-35,-7,-26,-35,45,-19,46,36,-22,5,-19,-59,127,0,16,9,8,-27,17,20,-34,66,34,25,-6,-40,-39,33,-14,30,-2,34,26,56,17,-6,31,0,45,-21,-15,-23,15,-4, 
  /* [5][0][][] */ 34,-22,31,51,-20,36,32,-6,-21,0,20,15,23,-4,-5,-6,-6,-16,71,-59,-21,53,-38,-37,-26,-8,-40,-33,4,4,19,71,-14,55,14,0,-21,-8,15,-33,-11,-14,-5,30,22,37,-31,127,9,-6,5, 
  /* [6][0][][] */ 11,18,-89,-39,-31,-3,21,-67,7,-54,-127,22,93,-93,-6,64,33,-47,-34,-56,-22,38,66,-87,-75,-18,-8,-40,68,-64,-73,3,-57,86,27,59,-11,-11,60,-1,-16,-15,51,-24,-25,-80,-19,-27,32,-46,6, 
  /* [7][0][][] */ 15,-10,35,-20,-28,68,-6,26,-5,55,69,42,27,7,-10,-27,4,10,35,0,17,39,-15,-2,0,30,-53,25,29,-31,-5,127,-12,42,-8,-9,3,-50,28,-17,33,23,7,26,8,21,-33,-33,47,33,17, 
  /* [8][0][][] */ 38,-37,37,127,-63,-25,-6,3,32,70,-7,25,-59,23,59,-12,13,115,-6,-39,12,-29,43,-73,65,-52,32,-1,-39,-29,-87,-26,-62,19,-12,-13,-15,-28,17,-43,17,-108,44,-65,-21,-4,-30,-49,-44,-26,-49, 
  /* [9][0][][] */ -29,-52,10,-59,36,25,13,20,-5,54,-15,-15,37,62,4,-82,-27,99,81,40,-82,-25,-22,-35,-25,63,37,-36,-49,-35,99,-15,37,66,3,127,34,50,-44,52,95,31,-57,-17,-23,-39,-49,-46,36,-42,16, 
  /* [10][0][][] */ 50,76,16,5,-29,-99,-34,-6,-119,94,-4,22,33,-8,-18,-127,5,110,53,60,41,-10,79,121,-80,-23,36,-54,23,-74,-1,106,-10,-17,17,-17,-104,8,51,95,-29,68,-39,-25,1,0,29,25,-34,-11,22, 
  /* [11][0][][] */ -29,47,0,127,34,-17,33,-54,-11,-62,28,82,2,66,10,58,22,15,117,14,21,-33,61,70,-15,3,50,34,1,-4,10,72,-29,22,-47,44,26,-44,-4,-80,-5,-36,33,46,-37,-14,32,28,81,-4,-104, 
  /* [12][0][][] */ 3,-61,46,-8,-13,41,9,33,22,-63,-41,37,-60,-11,-14,109,-40,36,0,34,15,-37,13,-27,-22,64,1,-35,6,-105,-25,72,-57,-58,32,-70,34,-28,23,-14,58,-76,78,16,21,-127,21,-6,10,37,7, 
  /* [13][0][][] */ 47,-23,-18,-48,37,-66,-47,-10,-115,-95,-13,-25,46,23,-18,-86,34,9,-24,4,127,-85,0,62,-46,-41,-36,-30,-3,-14,-17,120,43,7,85,24,-2,43,23,-32,2,-25,-54,-56,-98,-72,-24,-20,26,94,31, 
  /* [14][0][][] */ 22,-57,-127,24,2,-50,28,-1,35,27,79,28,89,-23,-14,112,-73,-118,-16,56,-47,-111,40,84,6,-48,-88,73,-108,-80,-55,21,-57,-78,52,39,56,-2,-68,-55,77,38,0,3,63,-83,-32,-74,103,28,2, 
  /* [15][0][][] */ 17,2,-42,-67,18,-68,38,-72,74,-12,-71,45,-24,-2,15,-56,127,-7,-20,9,-22,-24,20,49,127,-25,-3,22,-54,-42,-62,26,-22,-44,57,-16,36,14,-58,60,-25,-23,-24,-29,-6,-57,-63,-2,-39,29,31, 
  /* [16][0][][] */ -10,19,-69,-127,-38,-32,16,-77,32,-55,30,20,48,-11,-38,83,-80,-15,-23,-18,-87,20,-20,48,-8,-8,31,-51,37,-51,-88,-15,46,-53,19,16,-32,-13,-27,71,-70,13,0,-15,42,21,32,-69,-40,9,23, 
  /* [17][0][][] */ 39,-30,-8,-70,70,28,21,62,-21,27,-42,-127,56,-25,63,-67,-3,56,-93,40,-15,-81,23,59,-52,-11,24,69,67,27,-17,-36,63,-51,-16,21,24,-79,-1,-14,54,-96,60,-1,3,63,4,31,50,-11,-13, 
  /* [18][0][][] */ 101,30,-76,45,23,-30,-23,-12,22,-78,-24,-41,30,-19,26,52,58,18,119,-21,-69,9,34,-10,-17,40,27,-79,-5,11,-31,-34,18,-26,-19,-116,-15,98,-127,-63,-6,-51,32,13,67,35,-51,-31,-87,-48,-14, 
  /* [19][0][][] */ -37,26,7,-51,-8,-14,127,11,-10,5,-17,31,42,24,-3,-7,-46,-51,-7,-6,48,13,-4,-49,25,-18,-20,-20,15,0,-3,-1,56,-47,-38,-35,19,9,-18,70,-17,-30,11,-18,32,-15,-53,-15,-1,22,21, 
  /* [20][0][][] */ 52,-20,-64,34,38,-59,8,-20,74,-99,-64,21,10,-11,-127,-71,-34,30,8,43,27,-53,14,9,25,2,-61,-63,0,17,-1,-20,-78,-13,11,9,-59,24,-34,18,1,-42,-8,19,-26,0,5,37,21,-96,30, 
  /* [21][0][][] */ -2,-58,-8,8,-38,-11,127,3,14,18,73,-2,-9,41,52,76,3,22,-54,-8,-56,7,-27,96,53,-68,16,-32,49,-15,-27,5,36,21,65,-66,-40,3,4,-40,-11,-31,-21,-26,-12,12,-5,-47,-24,-18,19, 
  /* [22][0][][] */ 56,125,-25,-56,24,-13,23,-100,10,82,-49,58,-2,14,-22,27,47,-26,-77,-38,0,-42,-72,36,-33,-20,1,-30,26,-22,-94,-52,44,-1,-28,34,-1,12,-44,-89,15,-87,25,10,-60,-42,59,-29,-127,6,91, 
  /* [23][0][][] */ 2,14,21,-24,-12,3,-14,-60,-30,23,18,4,45,86,-19,-35,-16,58,4,10,-2,-1,-8,4,21,-49,-64,-68,-15,-13,23,-127,24,-33,-21,-38,21,-19,-23,-42,76,-40,-37,-51,-13,25,70,18,27,-1,7, 
  /* [24][0][][] */ 16,-100,33,-67,-17,8,-29,8,25,4,-11,20,-11,-18,25,1,28,-11,20,-5,17,-12,26,34,21,13,29,-23,4,7,26,41,9,8,2,-12,2,61,127,-63,41,64,64,-22,-51,60,-18,27,22,56,-6, 
  /* [25][0][][] */ -16,96,-53,-40,-20,-25,-15,-8,3,-30,-23,-127,-15,-4,-13,-49,7,25,5,-20,-69,-11,-68,-40,27,-37,13,-31,70,-29,-15,-29,8,2,-39,-24,-18,-91,-11,-29,76,54,51,2,-11,-82,-79,-24,-7,-8,-57, 
  /* [26][0][][] */ -40,-65,-24,-93,-82,-16,8,-58,-14,6,59,-9,20,-3,-47,32,49,39,49,27,-72,-95,127,-58,-32,14,-36,-15,0,49,57,105,-27,86,-56,-15,-45,5,-33,46,1,-3,11,43,-3,22,5,3,28,85,73, 
  /* [27][0][][] */ -22,51,-5,-6,32,-8,32,41,-25,-54,-11,20,23,28,9,127,9,79,-44,7,-51,83,28,51,-19,-38,-19,-26,13,8,47,33,44,-14,-48,-28,61,-30,56,-76,24,-49,-6,0,36,24,33,-30,-5,-6,103, 
  /* [28][0][][] */ 15,-88,73,19,-27,-127,-103,61,13,-61,-35,-92,-22,-63,8,57,33,12,17,66,17,-23,-70,100,-72,-79,14,36,-52,32,98,111,33,34,107,-46,56,57,-9,-16,-4,-21,-37,-22,-47,1,38,-32,-7,-24,28, 
  /* [29][0][][] */ 11,-27,127,-1,39,29,-24,11,-34,-14,28,25,25,1,17,6,80,-5,26,-12,-102,-7,-36,-75,-18,-67,-5,-38,32,-20,-12,49,-21,3,13,-24,-40,-19,31,4,-35,-32,-4,-45,76,-53,27,-64,20,23,36, 
  /* [30][0][][] */ -16,-17,22,-20,-30,28,19,-22,-37,26,-10,-88,-37,-15,87,5,56,-3,70,75,34,-8,-5,45,-13,22,-106,41,119,32,42,-7,27,64,-26,-69,-5,-2,1,-29,33,38,-15,-44,127,84,85,-1,54,-50,-50, 
  /* [31][0][][] */ 89,65,23,85,40,35,33,-24,-29,-4,127,7,9,16,8,-33,9,78,37,-11,119,-4,61,15,-34,38,23,42,58,15,29,-20,22,45,-6,36,5,38,12,-24,-32,17,-16,54,67,118,12,-9,33,-14,15, 
  /* [32][0][][] */ 68,-70,32,-8,-1,-65,13,17,-11,3,-35,73,-48,-40,29,-27,-10,-52,-65,-5,-4,-9,16,-1,-18,-18,8,-3,-50,32,9,-9,63,-69,60,19,-16,-61,-45,-42,11,-1,39,-127,31,-44,-21,30,-69,-12,-1, 
  /* [33][0][][] */ -10,1,11,31,10,20,41,0,-24,-17,24,18,-25,31,-17,18,127,19,-40,-18,56,-5,23,-15,-31,7,-1,3,17,28,-26,-50,12,-14,5,16,-23,2,8,-26,-6,29,-11,5,-14,13,21,-15,24,11,5, 
  /* [34][0][][] */ -9,-19,58,100,51,69,-3,-88,-21,15,-18,-54,22,-11,66,-48,64,-40,30,76,-118,54,4,-105,69,-127,83,117,72,-66,-109,78,72,9,54,-75,1,41,-80,62,93,-63,107,109,-68,-59,-63,-34,-80,71,61, 
  /* [35][0][][] */ -19,-71,-1,-69,-55,-90,2,66,-3,-6,-78,8,127,98,-89,25,1,79,23,-5,77,12,53,30,42,-112,-56,59,-18,-15,-93,-41,55,-11,-2,-98,-28,0,43,12,-30,102,34,-22,-74,40,31,108,30,-37,109, 
  /* [36][0][][] */ 13,-47,-127,79,64,-38,87,-28,-52,-1,32,-41,2,-47,82,-97,-57,8,-3,13,-2,119,61,-40,-57,4,-45,-48,-12,15,-3,-59,-28,-23,-20,8,1,44,-29,-56,-1,118,19,2,-59,-101,-17,64,-26,74,29, 
  /* [37][0][][] */ 5,24,-14,31,-7,-68,38,-6,-21,24,65,9,-14,123,-1,19,47,54,21,-21,-3,28,-51,-22,-85,17,-36,42,-2,25,-24,-66,30,13,15,-24,-1,-78,-49,127,-69,-42,-28,49,-8,-45,42,22,37,18,-18, 
  /* [38][0][][] */ -26,21,-29,115,8,14,88,-8,24,-16,-68,41,-67,7,-22,34,-42,13,-69,-24,-48,-25,3,-7,-64,-39,-25,127,-17,-40,-29,30,4,-14,36,-55,-62,33,-66,-2,-22,4,-36,2,17,-8,1,12,17,6,23, 
  /* [39][0][][] */ 127,-66,-32,-65,13,85,-15,-73,8,12,-111,-48,43,62,-22,45,-30,11,-2,7,6,6,42,14,69,-28,-31,-6,-40,29,31,73,54,62,-58,-10,31,-45,49,20,-2,37,49,-12,24,-73,31,-12,-28,27,15, 
  /* [40][0][][] */ 18,-5,29,26,10,7,88,-5,16,0,38,15,29,-16,13,7,127,-22,0,-1,3,28,-20,33,60,-29,-23,29,12,9,3,17,5,-16,3,12,12,-23,11,82,-3,15,70,7,1,-27,-3,-3,-28,12,18, 
  /* [41][0][][] */ -1,12,-56,2,6,11,-1,21,-70,-14,-50,26,33,-21,35,127,-28,-17,4,61,-39,-42,27,51,5,21,0,30,-20,-10,-22,-97,-4,95,-33,43,-19,34,-27,7,-11,14,-40,-37,-30,-3,-31,1,67,-19,79, 
  /* [42][0][][] */ -42,-29,-52,-45,67,-27,-18,-28,-20,38,-64,-36,-33,101,24,127,-8,-8,-36,39,-48,-64,-15,-97,-26,-45,-18,11,4,12,-22,81,-59,-24,-23,-3,-34,-18,-18,-1,40,-25,-19,3,-64,-5,14,-47,-20,35,-43, 
  /* [43][0][][] */ 12,-65,-65,75,-18,-54,11,-70,4,-8,-38,-43,-2,-38,78,46,22,-23,67,35,-46,23,-72,-77,40,101,29,1,-92,58,-82,127,-40,-85,37,-74,-23,-32,37,-35,2,-4,-2,-67,-63,-47,29,-52,40,0,63, 
  /* [44][0][][] */ 46,13,-17,-2,24,17,-15,67,17,-14,-5,32,18,-34,-8,3,-16,-6,26,7,13,-16,-18,14,5,-3,43,-21,-34,17,-12,-1,-38,-22,-14,-32,5,31,59,3,-5,2,-127,42,3,-33,-23,-10,6,-29,-19, 
  /* [45][0][][] */ -20,127,-50,-4,9,38,57,-97,-19,-17,61,-40,-72,100,-30,-94,-19,45,-44,81,31,27,-9,-30,10,-17,-44,13,-27,30,14,4,35,-60,17,47,-14,-21,-15,-34,-55,29,-29,62,3,28,-17,21,61,-21,71, 
  /* [46][0][][] */ 19,-72,30,-27,127,-54,-15,-81,20,-24,29,17,57,-1,-44,55,-32,-16,26,0,3,-25,2,-38,7,81,-55,35,-3,-36,20,-27,-14,-32,10,-104,36,-28,110,6,-55,-38,23,16,-21,-3,-114,-8,-26,-80,5, 
  /* [47][0][][] */ 16,32,27,127,-8,-54,4,52,7,20,-49,6,-28,2,-23,-40,17,-36,-5,29,-45,-8,-3,16,-13,3,-36,-31,-9,-1,6,3,41,27,-68,-11,-22,-4,28,-27,1,31,39,53,50,-34,1,13,-44,-25,5, 
  /* [48][0][][] */ 87,23,32,-13,22,-2,43,20,-7,5,64,51,63,63,11,74,-15,-32,1,-108,73,14,43,-56,59,20,-35,70,127,-16,81,18,-35,-66,17,39,-99,-36,35,6,3,-36,-8,38,-55,-21,51,3,22,16,17, 
  /* [49][0][][] */ -57,64,-74,-122,44,17,17,-16,3,89,61,-65,82,-7,-15,-71,-16,-10,51,81,-54,112,-27,-74,17,-13,60,-4,-32,-14,34,-13,55,97,41,-38,31,19,-72,-61,-22,2,62,-1,-44,44,127,51,24,12,-33, 
  /* [50][0][][] */ 21,85,-2,-14,34,65,16,75,86,-12,127,-16,7,8,-17,11,23,38,-31,25,23,-26,39,-67,20,-14,-26,29,-12,30,-54,81,15,29,7,37,5,-19,42,14,11,-9,29,-10,33,-35,11,-2,-25,-63,22, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant16_scale = { 51, { 0.0030474443919956684, 0.0019398215226829052, 0.0023606305476278067, 0.0019444609060883522, 0.0030697660986334085, 0.0045717121101915836, 0.0032934655901044607, 0.0040365736931562424, 0.0019968640990555286, 0.0040391865186393261, 0.0021228201221674681, 0.0016836607828736305, 0.0021926832851022482, 0.002445603720843792, 0.0016731194918975234, 0.0030981856398284435, 0.0027684716042131186, 0.0020832347217947245, 0.0022500685881823301, 0.0048782755620777607, 0.0036369313020259142, 0.003411831334233284, 0.0017790771089494228, 0.0032646527979522943, 0.0035617449320852757, 0.0022996752522885799, 0.0021846340969204903, 0.003376547247171402, 0.0036098605487495661, 0.0023433517199009657, 0.0021614525467157364, 0.0027285416144877672, 0.0039875060319900513, 0.0045264288783073425, 0.001872979337349534, 0.0023315597791224718, 0.0025529139675199986, 0.0026084308046847582, 0.0039224410429596901, 0.0040705287829041481, 0.0035852028522640467, 0.0031116672325879335, 0.0027107016649097204, 0.0018584537319839001, 0.0051906146109104156, 0.0026083099655807018, 0.0027842370327562094, 0.0042785815894603729, 0.0022018898744136095, 0.0026044328697025776, 0.0030343660619109869, } };
const TfArray<51, int> quant16_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[51] = { 97, -31915, 29168, -10754, 27806, 33454, -2970, 20106, 807, 33068, -5903, 924, 45963, -17540, 28431, -5952, -4210, 33812, -7254, 1528, -21795, -4450, -6415, -9952, -1527, 36356, 31114, -3388, -8742, 28254, 24575, -7755, -2216, -22198, 22113, -22097, -2126, 39043, -7476, -6828, -14559, -3216, -6501, 44482, 39011, -14253, 34735, 35186, -18246, 29308, 37318, };
const TfArray<1, int> tensor_dimension17 = { 1, { 51 } };
const TfArray<51, float> quant17_scale = { 51, { 6.33500239928253e-05, 9.526224312139675e-05, 0.00010641415428835899, 0.0001368365774396807, 0.00011183474271092564, 0.00010580022353678942, 0.00012202614016132429, 0.00014531644410453737, 9.1240981419105083e-05, 9.0864574303850532e-05, 9.9385382782202214e-05, 9.2670481535606086e-05, 6.3381827203556895e-05, 6.9012945459689945e-05, 8.7240769062191248e-05, 9.4972958322614431e-05, 7.2587987233418971e-05, 7.8960001701489091e-05, 0.00010093220043927431, 9.5080446044448763e-05, 0.00011920675751753151, 0.00010662437853170559, 0.00017526985902804881, 9.6930903964675963e-05, 3.3519747375976294e-05, 8.4139763202983886e-05, 8.0221994721796364e-05, 0.00017704434867482632, 0.00011016241478500888, 8.2617421867325902e-05, 0.00014277428272180259, 9.0381967311259359e-05, 0.00015781538968440145, 0.00013581091479863971, 7.3601804615464061e-05, 8.633407560409978e-05, 8.2492690125945956e-05, 9.5248840807471424e-05, 0.00011406470002839342, 7.9765290138311684e-05, 8.4184175648260862e-05, 9.6563278930261731e-05, 0.00018320260278414935, 8.518468530382961e-05, 7.6581847679335624e-05, 6.9799789343960583e-05, 9.2345864686649293e-05, 7.4507814133539796e-05, 0.00010086552356369793, 0.00011806998372776434, 7.2311428084503859e-05, } };
const TfArray<51, int> quant17_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data18[1*3*3*51] = { 
  /* [0][0][][] */ 44,41,-97,5,-1,-21,78,-53,-127,21,127,-100,-92,127,-26,-16,97,-127,88,5,48,23,36,14,57,-117,-76,29,39,-119,24,127,56,78,-53,127,41,-118,3,-27,0,23,-3,-104,-18,68,-58,-67,112,-31,-65, 2,127,-43,27,-56,-50,76,-34,68,-127,3,-12,-10,97,-85,-56,127,-76,-107,10,42,127,63,-4,124,4,-101,29,82,-10,13,89,-66,14,-79,29,-85,-46,-14,34,38,46,72,-36,-87,99,-13,-11,-57,-127,-43, 30,45,-73,-38,-6,-36,55,-71,69,30,94,-70,-30,107,-16,-58,49,-127,120,43,51,64,72,53,124,-127,-43,-17,-6,-87,16,90,27,40,-27,125,-26,-46,19,-8,7,10,-11,-127,-38,17,-34,-65,88,-39,-102, 
  /* [0][1][][] */ -61,79,-52,122,-127,-72,48,-21,-71,-127,69,127,-101,82,-76,85,42,-97,127,127,112,30,32,35,76,-38,-55,35,-15,-109,-84,56,-44,59,-47,117,105,-50,96,15,74,127,34,-84,-127,12,-65,-127,57,-102,-124, 127,114,-127,127,13,-127,53,-39,41,-120,33,8,-66,100,-53,-31,82,-117,122,75,44,34,-22,-33,-1,-100,-76,127,-1,-127,-36,-7,49,38,-127,-16,54,-63,127,71,127,-19,127,-73,-4,78,-122,-9,-9,-121,-127, -52,65,-70,83,-102,-29,14,-10,36,-76,50,127,-127,50,-17,55,19,-58,77,103,127,-14,-30,15,54,-29,-39,12,38,-65,-49,32,-6,15,-13,74,127,-93,60,7,84,124,24,-79,-96,47,-78,-82,43,-65,-39, 
  /* [0][2][][] */ 112,74,42,4,-11,-113,-127,-46,-83,22,37,72,-38,-100,-120,127,-121,-39,-35,-17,20,-10,8,127,73,-38,-59,-33,127,-62,-6,-77,27,127,109,16,-16,-26,-1,62,119,32,7,-46,-16,93,-127,-43,114,82,4, 20,70,8,-53,-62,-83,-54,-127,21,-36,-34,-25,-50,33,13,95,-39,-97,-98,-25,-6,8,-4,87,65,-54,-127,27,38,-11,-127,-11,127,-2,89,4,56,-127,35,127,70,36,59,-72,-113,127,12,-42,72,-57,-51, 115,48,45,-71,-39,-64,-83,-26,64,-2,36,43,-35,-104,-127,54,-93,-42,-12,-20,16,46,127,111,127,-57,-52,-49,64,-35,-16,-36,29,69,91,44,59,7,31,34,12,47,-13,-29,-46,55,-104,-27,127,64,-36, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant18_scale = { 51, { 0.0038538775406777859, 0.005795246921479702, 0.0064736693166196346, 0.0083244070410728455, 0.0068034292198717594, 0.0064363214187324047, 0.0074234195053577423, 0.0088402768597006798, 0.005550614558160305, 0.0055277161300182343, 0.0060460763052105904, 0.0056375777348875999, 0.0038558123633265495, 0.0041983793489634991, 0.0053072632290422916, 0.0057776481844484806, 0.0044158659875392914, 0.0048035052604973316, 0.006140176672488451, 0.0057841870002448559, 0.0072519034147262573, 0.0064864582382142544, 0.010662483051419258, 0.0058967592194676399, 0.0020391626749187708, 0.0051186145283281803, 0.0048802783712744713, 0.010770433582365513, 0.0067016938701272011, 0.0050260033458471298, 0.0086856260895729065, 0.0054983566515147686, 0.0096006467938423157, 0.0082620112225413322, 0.0044775409623980522, 0.0052521047182381153, 0.0050184153951704502, 0.0057944315485656261, 0.0069390879943966866, 0.004852494690567255, 0.0051213162951171398, 0.0058743949048221111, 0.011145069263875484, 0.0051821819506585598, 0.0046588312834501266, 0.0042462470009922981, 0.0056178299710154533, 0.0045326580293476582, 0.0061361202970147133, 0.007182748056948185, 0.0043990416452288628, } };
const TfArray<51, int> quant18_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data19[51] = { -7969, 31378, 16035, 3979, 10065, 1902, 12893, 10224, -16569, 26896, -3174, -6290, -18569, 15226, 30496, 11505, 11767, -8685, 36440, 19718, -6491, -1818, 1021, 29371, 4432, 26173, -9709, -22695, 32280, 23101, 2980, -3934, 20668, 13558, 19926, 7997, -16032, 44691, 16980, 9935, 2587, -8677, 32267, 18560, -5828, -5701, 17144, 18465, 13850, 24671, 38945, };
const TfArray<1, int> tensor_dimension19 = { 1, { 51 } };
const TfArray<51, float> quant19_scale = { 51, { 8.740563498577103e-05, 3.0462380891549401e-05, 5.4927626479184255e-05, 4.8719866754254326e-05, 5.0931910664075986e-05, 5.1916282245656475e-05, 4.2313404264859855e-05, 6.8929846747778356e-05, 8.4693427197635174e-05, 5.2118626626906916e-05, 4.228714169585146e-05, 6.8430781539063901e-05, 6.2488768890034407e-05, 5.4459309467347339e-05, 5.9748985222540796e-05, 9.3952927272766829e-05, 7.7609882282558829e-05, 0.00010541425581322983, 6.4410334744025022e-05, 6.7354187194723636e-05, 4.6075849240878597e-05, 9.0729219664353877e-05, 6.532473344122991e-05, 7.1808884968049824e-05, 8.9271568867843598e-05, 4.997693031327799e-05, 7.8108023444656283e-05, 4.9877235142048448e-05, 6.1989172536414117e-05, 8.8574088294990361e-05, 4.8534737288719043e-05, 9.157144813798368e-05, 5.5858894484117627e-05, 7.4657247751019895e-05, 7.7161952503956854e-05, 6.2234073993749917e-05, 0.00011480711691547185, 4.6331693738466129e-05, 5.7628487411420792e-05, 9.0054214524570853e-05, 5.6774340919218957e-05, 6.6293599957134575e-05, 4.5538301492342725e-05, 5.2646180847659707e-05, 4.9625399697106332e-05, 4.6044842747505754e-05, 5.7937220844905823e-05, 6.0730457335012034e-05, 5.0366270443191752e-05, 5.1874005293939263e-05, 5.8655612519942224e-05, } };
const TfArray<51, int> quant19_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data20[51*1*1*51] = { 
  /* [0][0][][] */ -24,-4,15,29,58,-2,12,42,21,-48,-34,-81,33,127,11,-10,68,46,15,8,26,54,28,84,-17,37,-63,-57,-5,99,-30,-35,6,37,64,-35,-11,52,56,-56,12,-35,74,45,-44,-41,-66,22,-65,-40,-20, 
  /* [1][0][][] */ -13,-11,-33,76,41,-38,-83,-29,-105,68,-15,30,14,-38,12,4,17,-54,74,55,-14,-41,8,45,-15,-7,-97,-50,-10,-8,-42,-39,86,-50,32,34,5,-10,7,-22,17,-60,-37,-38,25,59,-12,6,24,-66,127, 
  /* [2][0][][] */ 58,-17,-66,68,-28,-12,-24,29,63,-112,35,31,-71,-6,41,-30,-32,-2,-10,-90,-12,127,-18,85,-25,9,3,-5,30,-41,-12,40,-1,-34,12,-46,59,-79,-26,17,-20,5,38,65,-60,-8,-2,37,-19,-20,25, 
  /* [3][0][][] */ -66,-24,-53,-4,-7,-40,5,-3,0,41,-43,-9,-83,12,-29,-51,-16,-19,29,94,-14,47,17,26,104,19,-1,-4,-56,-12,14,-60,76,32,-11,-34,-72,-57,-70,-44,127,-17,97,22,19,44,60,-3,-69,-42,-40, 
  /* [4][0][][] */ -65,19,-12,0,22,-26,-31,101,-11,-69,-19,-30,61,-14,37,-9,27,67,15,35,60,106,-127,-57,24,1,74,-95,-4,4,-26,-16,16,-28,-15,86,-83,65,-19,17,-19,-62,-30,84,68,68,30,-99,65,10,29, 
  /* [5][0][][] */ -37,9,-7,3,83,72,41,78,39,-24,75,-1,47,-12,-54,26,5,-1,39,20,-17,-44,-13,26,22,-18,22,4,-11,-54,-45,34,127,-46,-57,39,-55,-22,-22,-40,-63,-56,88,-54,49,-1,-2,-28,-31,82,-45, 
  /* [6][0][][] */ 26,3,23,92,17,-8,32,21,57,80,-71,-20,8,46,43,87,7,-7,-127,-9,-48,41,28,-9,26,-7,107,-65,54,-47,28,19,42,-87,28,96,12,-25,-53,-100,-43,42,-7,-116,25,35,-31,-67,-46,54,-42, 
  /* [7][0][][] */ 84,5,-2,18,10,-8,3,36,-56,-15,-4,-24,-40,42,-71,7,-43,-32,-23,42,56,-21,27,-127,7,-11,0,-18,3,-11,31,-25,-23,5,-23,16,-88,-6,-27,-30,49,37,-82,5,-41,34,-7,42,83,20,19, 
  /* [8][0][][] */ -9,-12,53,31,11,17,85,-62,5,127,-1,16,0,-9,-48,-23,40,35,-12,10,26,30,85,25,-68,-89,13,48,27,49,17,-1,-20,2,-18,-12,-13,1,77,-24,51,-55,1,10,20,33,4,23,17,-39,40, 
  /* [9][0][][] */ -57,-18,12,-72,-9,46,-59,38,-127,-97,-83,32,-47,72,76,-22,82,12,20,-61,38,-55,-56,-60,35,-23,-45,-40,-80,-54,15,51,27,-58,21,20,37,-95,-3,95,74,50,-18,-54,47,-21,18,37,79,-12,17, 
  /* [10][0][][] */ 31,12,106,18,-27,37,-58,-12,63,-30,40,3,66,127,-25,-44,100,-109,-14,-84,72,45,2,-6,-28,4,77,50,-10,32,75,57,-23,13,-53,-4,-5,6,-84,-69,-21,-23,-15,23,53,38,-25,33,-53,21,85, 
  /* [11][0][][] */ -9,-16,-119,88,82,-33,20,-24,-54,107,-61,10,-58,31,32,89,27,-38,13,-20,5,-1,-84,-50,-40,45,-39,127,-18,16,29,-43,109,29,17,-85,2,-1,40,57,-21,37,-17,36,-16,-93,-47,28,-51,90,-82, 
  /* [12][0][][] */ 127,76,54,-75,-27,0,-69,46,48,52,74,11,-50,-51,39,30,-76,-27,20,-88,-23,18,18,-59,-47,96,26,-27,-7,22,6,-8,116,47,74,43,7,41,-44,45,28,-9,63,39,-64,4,-23,61,0,64,11, 
  /* [13][0][][] */ 117,-21,-28,-21,78,31,-18,49,-54,-56,-47,11,-54,127,-21,8,44,-63,-42,-60,28,-8,-52,12,21,-67,-68,-3,6,-1,-41,30,83,29,-105,23,13,-59,-20,81,11,-21,-107,-31,-76,-27,90,-7,-70,-2,-3, 
  /* [14][0][][] */ 110,10,32,-118,-6,-38,50,7,-127,-6,9,-15,56,-20,84,2,-53,-53,-44,91,-27,26,45,-57,50,32,13,58,-71,-37,52,-83,-127,-13,92,-50,-49,-19,27,-47,-63,-13,19,-16,30,-25,87,23,-34,33,60, 
  /* [15][0][][] */ -20,4,-24,1,-1,-21,-3,-42,-19,19,-2,-15,4,8,15,-2,5,-20,1,-6,-6,19,1,127,-9,-8,-28,-23,-27,-17,-11,18,-8,-12,-32,0,-5,-6,45,28,-18,-23,26,-22,-14,23,-14,-9,2,11,6, 
  /* [16][0][][] */ 57,-39,4,21,1,-64,24,-14,14,8,72,19,-34,108,0,24,22,2,24,-52,-127,-51,-58,28,-18,-1,-87,0,14,-5,22,0,53,7,62,43,-3,-29,-11,-107,-11,4,-33,19,15,-11,-20,-5,31,-16,-45, 
  /* [17][0][][] */ 0,2,-7,43,-30,5,-13,34,-45,29,83,-36,4,24,53,46,23,7,29,21,11,8,68,56,6,14,6,12,-35,9,1,13,-25,-7,11,-42,7,-19,-30,11,127,3,-42,-21,-12,9,-27,-35,5,-23,-25, 
  /* [18][0][][] */ -112,30,55,55,-32,-9,4,23,23,8,-37,-12,-25,-16,-11,-106,-50,-1,-127,-26,9,-24,-46,-91,-6,-40,-32,-5,-25,25,-34,36,51,-22,-9,38,-33,40,-4,-31,87,-26,58,-12,-111,5,-43,-49,-5,58,-26, 
  /* [19][0][][] */ 54,-3,51,87,-97,11,-53,-5,67,-18,-64,-1,13,34,-15,-11,-29,54,22,-35,17,12,27,-7,30,-5,-28,35,-27,-8,55,-70,14,-9,27,2,-86,-40,127,-22,-41,40,-73,-81,-19,20,44,-76,-34,-50,3, 
  /* [20][0][][] */ -1,65,-12,-44,-46,20,-32,5,-34,68,3,22,20,31,18,28,59,58,-11,-10,-46,-5,90,127,-33,-42,19,37,24,22,27,15,-42,0,-37,12,-29,29,65,109,-32,3,-12,56,-23,39,33,14,31,23,35, 
  /* [21][0][][] */ 42,9,-45,69,-6,-49,-17,-15,-13,7,-32,8,-10,-29,29,109,66,-15,52,-31,-1,-28,1,-16,11,50,-2,20,-46,-29,127,17,25,3,-15,-21,102,-7,14,-97,-12,7,17,-15,-24,-39,44,3,25,-22,14, 
  /* [22][0][][] */ 42,-19,-29,-35,56,11,-43,-24,15,-2,2,-4,-3,23,41,4,-35,0,26,-16,86,4,20,-19,10,22,-23,70,38,-23,127,-8,9,-121,18,1,23,-11,49,-30,-14,-3,-27,38,27,34,29,18,-6,-33,-55, 
  /* [23][0][][] */ 22,7,-18,-24,-10,7,12,-51,-14,42,-17,2,-53,58,21,-27,-36,28,-17,-9,-32,-54,-44,-127,18,-50,15,-2,4,-45,48,-12,-27,-40,9,-12,49,4,41,30,23,-16,56,-78,3,-7,-71,19,19,23,79, 
  /* [24][0][][] */ -27,-5,18,28,14,-55,-99,60,31,-12,43,-55,-2,123,-24,5,-59,63,-37,41,-73,-88,13,-103,35,85,-73,-63,-52,-44,28,-39,48,-89,-26,-6,68,41,34,118,-56,127,-73,9,-6,36,32,4,4,10,-36, 
  /* [25][0][][] */ 50,50,8,82,-47,-26,3,58,-127,-23,86,44,34,2,-108,10,-65,111,-3,-97,82,83,-38,66,56,-10,4,-40,18,16,-16,-48,-64,-1,92,-35,125,-14,19,37,-3,-46,39,-24,-14,-22,-25,-4,-72,47,-102, 
  /* [26][0][][] */ -94,105,104,70,64,55,46,24,-26,-1,59,-25,-15,-65,-9,13,8,-18,33,-21,-28,-49,-28,-36,-41,1,-45,-61,127,-15,16,-81,14,40,-9,7,-23,-9,3,-11,28,97,63,65,17,31,21,-5,-7,-44,-15, 
  /* [27][0][][] */ -78,-66,45,76,31,77,5,127,12,99,35,-17,-73,9,65,-72,9,-6,3,109,47,-25,-48,-49,36,-68,-27,-36,-39,22,1,73,59,30,3,-61,27,52,0,11,7,44,-14,19,27,35,-51,80,-17,-5,2, 
  /* [28][0][][] */ -56,2,-30,44,-77,69,16,16,16,-45,-89,34,15,-37,18,-18,-41,29,3,41,59,-49,39,13,68,8,10,-1,-54,116,-64,5,-58,-49,-28,-60,3,-76,-31,-48,8,45,44,-5,-8,-44,38,23,-68,127,22, 
  /* [29][0][][] */ -33,-48,-46,-64,2,-21,4,-4,1,55,32,39,-5,1,1,48,70,-48,20,-4,37,-6,19,-127,-11,-31,20,-54,-14,30,41,-6,-58,-81,-38,49,-3,43,17,-1,-42,33,-91,1,-5,-8,1,-29,-50,-59,-14, 
  /* [30][0][][] */ 44,50,49,0,58,-117,32,43,-48,48,12,54,46,9,36,-54,-115,28,43,-127,67,3,10,-43,-70,47,-61,26,12,-54,1,-23,-31,27,-44,13,-22,-36,54,23,37,35,57,90,25,-4,4,-18,-46,-37,98, 
  /* [31][0][][] */ 127,3,22,28,12,-23,-7,-27,22,-17,10,32,43,1,39,22,26,-4,2,16,28,-8,16,-24,-6,-19,-48,-19,-6,-29,-15,3,-11,-19,21,6,51,-49,-25,42,-17,-32,-13,-65,8,9,27,-5,38,-16,4, 
  /* [32][0][][] */ -125,-12,25,-58,1,71,-28,-54,-105,113,37,42,17,21,-79,-23,3,-1,-47,-54,18,-64,108,-70,72,-43,19,-52,-127,-76,50,77,16,-20,-23,-48,54,-15,2,-70,-24,55,8,7,-43,51,61,-42,-70,-64,6, 
  /* [33][0][][] */ -33,-74,71,-70,24,-19,38,65,14,127,-4,3,8,-27,20,-26,-40,-2,15,-14,29,34,3,38,6,-13,28,30,10,-6,-62,-41,-16,44,24,-57,-31,3,-16,-69,-40,11,24,-87,-7,27,3,1,-14,68,-9, 
  /* [34][0][][] */ -89,-19,13,49,-25,-45,16,-2,-31,0,-39,12,18,-14,-38,-37,-99,-11,-17,-15,20,-75,-41,7,-70,9,18,1,62,-14,3,77,-22,-59,70,37,-36,-40,-6,-29,9,64,127,32,-20,125,19,-22,38,-15,-31, 
  /* [35][0][][] */ 5,40,-15,36,24,4,42,-9,4,-23,-13,45,85,27,16,56,25,18,-43,31,2,3,13,36,-20,45,-14,-28,127,-16,38,38,-53,85,-27,65,-32,10,60,-3,42,-56,-18,-103,11,-35,-13,-13,24,-51,-56, 
  /* [36][0][][] */ 12,8,40,-19,8,28,12,83,-28,67,-47,55,18,-14,17,13,5,32,25,27,-24,-31,-90,127,1,14,22,2,-21,4,14,-55,25,17,-20,-44,-45,11,7,-2,49,75,7,-21,20,-33,-14,-19,-43,11,47, 
  /* [37][0][][] */ 49,-16,121,13,-2,-42,-33,-23,-105,-32,13,-36,1,-5,46,-15,-127,79,46,59,-38,33,-67,-72,-2,-16,70,-33,-47,-2,59,5,-4,-37,12,6,16,-73,-4,-95,-16,-3,50,3,-43,-51,-37,12,-65,-44,-48, 
  /* [38][0][][] */ -24,2,10,-51,27,-72,9,1,47,12,-17,17,7,40,-125,42,-108,20,-39,35,46,35,-12,-127,-37,-22,23,27,-36,-52,-8,-14,32,39,-45,18,-22,58,-10,-36,59,104,-6,-38,50,31,-33,25,-42,-21,-35, 
  /* [39][0][][] */ -32,71,3,-35,25,-22,2,2,14,127,-21,-1,13,0,16,-19,-25,-22,-33,24,6,1,-48,5,-23,8,12,31,26,37,-44,-16,-21,5,-13,-7,34,-30,-10,4,34,-7,19,-32,15,-33,-31,46,6,-35,-23, 
  /* [40][0][][] */ -13,1,61,-8,-40,28,80,-70,-15,-16,-13,93,-67,40,2,58,33,-14,64,-40,-36,102,-59,2,22,-33,52,62,38,29,48,-49,6,-65,21,-127,46,34,-5,-50,36,89,-27,32,-35,44,43,-26,83,18,-74, 
  /* [41][0][][] */ -59,-25,-69,-2,-2,29,-17,-55,-23,27,69,-24,2,84,64,30,-10,32,-58,-33,29,-59,-64,-34,16,5,-13,53,83,78,-34,23,49,-26,18,-41,-11,17,-34,21,-25,32,12,-111,7,22,127,36,18,-8,120, 
  /* [42][0][][] */ -58,38,-26,-48,-31,1,3,-3,-18,-27,2,86,-31,3,73,-38,-52,-17,-119,47,-35,-4,-1,-127,1,4,15,-14,27,-20,39,20,49,23,48,-74,35,27,27,-68,-33,71,88,-58,19,19,-47,-107,-50,-9,-2, 
  /* [43][0][][] */ -53,40,13,-46,-53,71,37,-3,-13,101,7,16,55,74,1,127,-66,-46,-73,32,54,3,45,8,-121,-10,-42,-22,-86,47,-20,-32,-7,13,-38,8,12,51,30,-59,3,-25,18,-45,44,-72,-10,-13,73,8,35, 
  /* [44][0][][] */ 55,4,60,52,4,-69,13,117,-35,31,-37,50,-34,14,-15,-24,-41,-55,25,-55,-80,63,127,-69,72,38,91,52,17,32,-44,-17,101,-88,93,-12,82,-37,36,10,28,-9,49,-49,-52,19,-115,-54,54,-29,65, 
  /* [45][0][][] */ 42,85,46,-41,-18,-86,50,7,1,54,2,-21,63,-49,-87,66,6,-24,14,113,64,20,0,67,-56,-50,-87,13,127,14,48,29,15,12,65,37,27,-63,-47,43,108,-21,62,-60,26,-70,16,-44,70,-25,27, 
  /* [46][0][][] */ -3,-1,59,-4,32,2,-1,-39,-29,-57,-45,33,124,81,-56,-127,-109,-83,93,-36,36,32,0,-11,21,18,-35,-63,-6,2,23,51,-22,-5,30,-73,-33,-6,32,2,-3,-8,-8,-3,8,12,48,-20,54,0,-18, 
  /* [47][0][][] */ -46,119,-57,-95,-30,-40,121,-37,-5,-82,83,-10,-67,-53,76,-120,-1,-38,1,31,29,-9,21,1,98,-46,70,-39,-8,-33,-25,-127,50,71,13,47,103,-25,84,-69,-13,79,-36,111,-13,41,-58,7,23,48,-23, 
  /* [48][0][][] */ 5,65,73,87,-48,-62,-60,-7,-83,-74,-11,-8,-42,17,27,-41,-3,29,81,39,-19,23,36,9,-7,-127,-39,22,-81,40,-16,-7,-40,27,21,1,29,66,100,32,-26,-18,119,28,16,-76,32,53,22,12,0, 
  /* [49][0][][] */ -127,15,-67,-69,46,36,22,-12,49,-55,83,54,-5,-34,23,15,15,-30,-50,1,-22,29,-20,-2,-26,41,49,8,-12,-3,-23,22,-17,82,44,61,23,-1,52,-18,-22,44,15,-37,-89,-100,-29,-10,0,16,49, 
  /* [50][0][][] */ 6,-9,4,-127,-112,-34,25,117,-58,-28,-3,-17,-48,7,-39,-1,-84,17,13,17,60,-105,73,-109,17,49,9,13,83,-55,3,-38,68,-10,-88,49,-109,66,-38,-56,8,-87,-26,-21,-38,-67,35,9,-93,7,-4, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant20_scale = { 51, { 0.0037147393450140953, 0.0012946511851623654, 0.0023344240617007017, 0.0020705943461507559, 0.0021646062377840281, 0.0022064419463276863, 0.0017983196303248405, 0.0029295184649527073, 0.0035994704812765121, 0.002215041546151042, 0.0017972034402191639, 0.0029083082918077707, 0.0026557724922895432, 0.0023145205341279507, 0.0025393317919224501, 0.0039929994381964207, 0.0032984199933707714, 0.0044801058247685432, 0.0027374392375349998, 0.0028625528793781996, 0.0019582235254347324, 0.0038559918757528067, 0.0027763010002672672, 0.0030518774874508381, 0.003794041695073247, 0.0021240194328129292, 0.0033195908181369305, 0.002119782380759716, 0.0026345397345721722, 0.0037643986288458109, 0.0020627263002097607, 0.003891786327585578, 0.002374002942815423, 0.0031729328911751509, 0.0032793830614537001, 0.0026449479628354311, 0.0048793023452162743, 0.0019690969493240118, 0.0024492107331752777, 0.0038273041136562824, 0.0024129094090312719, 0.002817477798089385, 0.0019353777170181274, 0.0022374626714736223, 0.0021090793889015913, 0.0019569057039916515, 0.0024623319040983915, 0.0025810443330556154, 0.002140566473826766, 0.0022046451922506094, 0.0024928634520620108, } };
const TfArray<51, int> quant20_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[51] = { -5557, -164, 516, -11477, 31815, 36421, -203, -1732, -11209, -20097, 42996, 29192, 18416, 3926, 61565, -11218, -13632, 22903, -11820, 24855, 44693, -5766, -9203, -31794, 5820, 674, -9692, -12961, -22554, 305, -16239, 9075, 48465, 38375, -10820, -16694, -7624, -430, 804, -13092, -2777, -2355, 4471, -2614, 22969, -9908, -5169, 19458, 49755, -10172, -7590, };
const TfArray<1, int> tensor_dimension21 = { 1, { 51 } };
const TfArray<51, float> quant21_scale = { 51, { 0.00013508350821211934, 0.00011691721010720357, 0.00015051482478156686, 6.3868341385386884e-05, 7.7910313848406076e-05, 7.6503805757965893e-05, 7.6582786277867854e-05, 5.1924616855103523e-05, 0.00020698287698905915, 7.2415263275615871e-05, 7.2049864684231579e-05, 5.6834014685591683e-05, 0.00013172515900805593, 0.00014662148896604776, 5.3257008403306827e-05, 0.00016409278032369912, 9.906495688483119e-05, 5.3947747801430523e-05, 0.00023301827604882419, 0.00012493519170675427, 7.7893280831631273e-05, 0.00017399831267539412, 0.00011955914669670165, 0.00012050341319991276, 7.868276588851586e-05, 0.00010127080167876557, 5.6129141739802435e-05, 0.00011977427493548021, 9.8009404609911144e-05, 0.00010235239460598677, 0.00023544105351902544, 0.00021932496747467667, 8.5092702647671103e-05, 7.15270871296525e-05, 0.00010329171345802024, 9.186793613480404e-05, 7.6445787271950394e-05, 0.00013997127825859934, 0.00017305617802776396, 5.5565284128533676e-05, 0.00012541819887701422, 0.00013025956286583096, 0.0001118976651923731, 0.00014365254901349545, 8.8858658273238689e-05, 0.00010256612586090341, 0.00011282334889983758, 0.00013295779353938997, 7.404203643091023e-05, 0.00011819921928690746, 4.8030593461589888e-05, } };
const TfArray<51, int> quant21_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data22[1*3*3*51] = { 
  /* [0][0][][] */ 127,47,109,13,-127,-50,127,127,127,127,-125,-117,-122,-11,-127,3,122,-124,50,-127,-111,-48,127,127,78,29,114,33,-72,49,46,-16,-76,34,33,23,100,-54,127,97,-76,-68,95,105,-16,-55,-15,-127,-105,65,62, 18,-13,127,61,-48,-22,121,54,-13,101,45,32,-68,71,-91,-56,127,19,-2,-1,33,127,87,-16,127,69,-34,91,52,45,80,-36,-57,-28,31,16,127,4,-109,95,-16,38,23,-32,-127,-51,87,12,-46,127,116, 116,76,77,-24,-65,-69,88,116,95,111,-45,-111,-127,-23,-66,-34,120,-127,53,-108,-127,-25,80,111,47,37,101,-8,-66,43,-95,-29,-127,17,42,27,78,-57,-35,42,-40,-64,91,88,-12,-33,-11,-108,-85,30,84, 
  /* [0][1][][] */ -39,115,36,87,-7,-127,35,44,12,85,-127,-127,-9,20,-103,127,29,-23,36,-39,-39,-13,-12,18,-16,48,106,-9,100,34,74,-127,-47,-111,22,60,27,35,30,127,72,31,53,46,-38,106,55,-91,-58,62,127, 20,25,-79,90,-87,-9,35,29,-71,56,-123,34,-52,127,-14,16,-43,56,127,-47,-54,-5,-71,-77,16,86,-42,104,76,127,59,12,-12,-86,11,55,22,127,-31,116,127,127,1,-111,-107,67,127,-109,-2,112,82, -27,112,28,99,-36,-108,-32,28,38,115,-125,-116,-27,23,-81,117,26,-38,20,-60,-44,-4,6,33,-10,31,93,-24,90,14,22,-91,15,-109,7,66,11,33,4,114,46,38,59,72,3,97,5,-101,-60,31,118, 
  /* [0][2][][] */ 91,-73,-69,81,-100,-31,-42,72,101,-54,-38,-81,-71,-89,-127,106,24,-102,27,-58,-110,38,79,114,-109,-127,127,127,58,6,127,-27,-81,-52,127,127,52,-9,98,8,26,-6,-123,127,-59,127,-29,19,-127,-2,21, -27,-30,16,127,-52,-9,9,70,7,57,-58,-56,45,40,-7,27,85,4,28,-62,-7,110,41,28,-30,-11,53,57,127,1,72,-47,-18,-127,47,47,75,79,-73,33,112,65,-25,-56,-84,62,71,-119,-64,-34,45, 84,-127,2,35,-63,-26,-19,79,67,-90,-11,-114,-32,-86,-120,91,33,-100,45,-42,-107,36,38,108,-104,-103,124,105,60,27,3,-11,-117,-15,113,106,35,0,-41,18,17,-8,-127,103,-71,116,-27,40,-104,33,28, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant22_scale = { 51, { 0.0067223357036709785, 0.0058183027431368828, 0.0074902642518281937, 0.0031783629674464464, 0.0038771519903093576, 0.0038071582093834877, 0.003811088390648365, 0.0025839919690042734, 0.010300356894731522, 0.0036036947276443243, 0.0035855106543749571, 0.0028283046558499336, 0.0065552098676562309, 0.0072965151630342007, 0.0026502974797040224, 0.0081659620627760887, 0.0049298978410661221, 0.0026846716646105051, 0.011595990508794785, 0.0062173120677471161, 0.0038763042539358139, 0.0086589036509394646, 0.0059497766196727753, 0.0059967674314975739, 0.0039155925624072552, 0.0050396700389683247, 0.0027932273223996162, 0.0059604826383292675, 0.0048773689195513725, 0.0050934948958456516, 0.01171655859798193, 0.010914552956819534, 0.0042345784604549408, 0.0035594950895756483, 0.0051402393728494644, 0.0045717433094978333, 0.0038042706437408924, 0.0069655720144510269, 0.0086120190098881721, 0.0027651672717183828, 0.0062413481064140797, 0.0064822756685316563, 0.0055685085244476795, 0.0071487682871520519, 0.0044219885021448135, 0.0051041310653090477, 0.0056145745329558849, 0.0066165509633719921, 0.0036846499424427748, 0.0058821011334657669, 0.0023902086541056633, } };
const TfArray<51, int> quant22_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data23[51] = { 86421, 27307, 1045, 63728, -30525, 9008, -838, 51994, 18665, 37307, 48067, 1265, -3511, 9412, 30301, 33364, 56978, 71711, 53416, 30632, 54990, 16747, 12606, 47166, -40950, 77549, -12679, -21121, 41251, -18284, 55606, -14691, 35337, 37745, 39662, -574, 23942, -13397, 43395, 35732, 12548, 67067, 78103, -6602, 66288, 14074, 5327, 12313, 35236, 44810, -5334, };
const TfArray<1, int> tensor_dimension23 = { 1, { 51 } };
const TfArray<51, float> quant23_scale = { 51, { 2.8663071134360507e-05, 0.00010279145499225706, 4.576424544211477e-05, 3.4116550523322076e-05, 0.00010718287376221269, 5.3582483815262094e-05, 6.620297790504992e-05, 8.4981424151919782e-05, 7.1940005000215024e-05, 3.4304499422432855e-05, 4.0490143874194473e-05, 0.00010813208791660145, 5.3171464969636872e-05, 4.9617443437455222e-05, 7.024431397439912e-05, 3.7957008316880092e-05, 3.4509845136199147e-05, 0.00010813698463607579, 3.3958101994358003e-05, 4.6898381697246805e-05, 5.5319338571280241e-05, 4.4546737626660615e-05, 4.5719600166194141e-05, 5.9556379710556939e-05, 7.1989175921771675e-05, 8.496500231558457e-05, 8.3160186477471143e-05, 4.2307852709200233e-05, 2.7581971153267659e-05, 5.5872402299428359e-05, 2.8271480914554559e-05, 6.5262887801509351e-05, 4.8572983359917998e-05, 5.6838816817617044e-05, 7.4496696470305324e-05, 3.7984569644322619e-05, 5.8871606597676873e-05, 9.2593145382124931e-05, 3.7085439544171095e-05, 3.9688409742666408e-05, 6.4399238908663392e-05, 4.8331286961911246e-05, 4.1338964365422726e-05, 4.7205212467815727e-05, 5.2928706281818449e-05, 4.8376030463259667e-05, 5.5658165365457535e-05, 8.2049657066818327e-05, 4.0253406041301787e-05, 3.9820926758693531e-05, 3.8206886529223993e-05, } };
const TfArray<51, int> quant23_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data24[51*1*1*51] = { 
  /* [0][0][][] */ 63,-82,-30,-127,-37,-116,-15,-14,-28,61,-46,60,-26,5,-104,14,97,-26,-24,3,65,3,39,37,56,6,-62,-23,-90,17,-43,-106,10,-73,-48,67,-1,-74,70,-18,-116,-92,-1,-48,-34,22,77,1,10,-39,-23, 
  /* [1][0][][] */ -127,-47,28,-48,3,37,-4,26,18,-38,5,-49,-18,-46,-27,1,16,-55,-1,77,36,-11,-12,-58,22,28,32,12,3,19,-57,27,39,71,-5,-9,-32,-92,-50,4,2,114,7,-21,56,-20,-24,-23,1,-25,-77, 
  /* [2][0][][] */ 19,-58,0,19,-63,127,-60,18,24,88,3,61,60,27,60,-4,37,13,69,27,65,-41,-8,19,43,-57,5,13,-123,25,-31,-5,10,-30,-123,-6,24,88,9,63,-20,41,-79,-3,-23,-60,38,27,8,-37,-31, 
  /* [3][0][][] */ -14,127,73,-10,22,99,-77,-4,-38,-74,-77,-42,-50,-18,8,-27,15,2,-68,-7,50,-2,-29,-67,-30,57,46,-32,-32,-52,81,-7,24,-26,35,23,-101,-10,43,65,-83,-32,63,-30,13,-1,-5,-72,-86,-33,-57, 
  /* [4][0][][] */ -33,-8,-19,41,84,5,30,36,7,70,14,7,4,9,-22,28,34,-8,-10,-14,18,-4,13,15,13,36,5,-14,-20,25,28,61,-72,-24,3,49,-2,-22,23,17,-22,6,23,-31,127,-41,44,1,22,-19,23, 
  /* [5][0][][] */ 69,14,8,33,-51,9,9,-127,-31,-51,-4,-75,59,-26,81,45,4,18,-5,124,11,42,67,33,14,-19,23,-29,36,75,27,-50,24,-69,9,32,58,-3,20,-1,-26,14,-52,-29,-52,-39,-55,80,-1,-23,33, 
  /* [6][0][][] */ -36,-35,-72,-83,80,63,36,-76,-11,-37,3,61,-41,-14,47,-78,-95,0,-14,-65,38,25,18,47,19,8,5,108,-98,65,59,-38,94,2,70,61,14,-4,-2,28,-18,-44,-102,-28,-47,-127,57,20,30,73,-20, 
  /* [7][0][][] */ -18,6,35,20,28,-30,4,-14,-35,36,-90,53,10,-10,-3,12,-23,-4,-84,-3,-49,-29,51,-127,46,-15,-35,-11,14,-8,-5,7,-44,-24,-3,-69,-33,75,18,57,-22,27,-29,46,-60,-66,14,-57,-7,-37,-38, 
  /* [8][0][][] */ -26,10,9,14,6,-59,6,-1,-20,-8,-25,28,29,4,-28,9,13,7,7,-7,-2,-127,-25,3,-10,-16,-10,24,-18,24,-5,2,28,9,-4,40,2,-21,-1,-8,15,-2,-19,21,45,-15,22,4,-2,-7,-7, 
  /* [9][0][][] */ -50,14,39,-10,30,-85,7,19,-16,19,-31,61,74,80,-37,72,65,-13,-42,-10,52,-55,49,35,40,17,17,-42,27,-15,-1,-21,69,26,-37,-22,-21,-6,-44,16,127,56,9,-102,-67,70,-45,4,-6,-28,24, 
  /* [10][0][][] */ -7,-127,-15,-46,21,21,-43,7,-120,-46,-39,47,-37,-69,-76,13,-23,-36,17,-3,46,-25,93,101,-56,-2,45,83,-20,-53,-79,10,-47,-56,84,-20,44,62,-20,85,-60,35,20,-49,-9,-34,5,-27,18,-1,-68, 
  /* [11][0][][] */ -16,38,-5,90,2,24,32,17,-62,-23,21,19,-5,-16,-4,58,-89,23,-62,-10,-49,1,18,1,-6,0,-20,45,-10,12,-13,-98,26,-25,-15,-10,-27,21,-29,-8,74,3,31,127,-9,-19,-12,42,15,-56,0, 
  /* [12][0][][] */ -23,26,-6,31,28,26,34,45,-21,-23,72,-24,127,-14,-88,-49,31,2,-14,-21,36,14,-14,-16,-23,-7,-56,12,-11,31,49,-52,-32,22,-8,-35,63,-3,-26,-21,106,42,-21,-30,13,-53,-81,-40,-20,4,-31, 
  /* [13][0][][] */ 18,64,6,29,-65,18,-18,5,-46,-13,2,12,-37,-41,-20,-26,-13,-2,5,10,30,1,-7,-39,27,-30,-34,14,-24,-4,53,-5,-42,-43,-28,-23,-121,74,28,84,127,18,47,-14,-30,59,51,50,-19,14,14, 
  /* [14][0][][] */ -39,-13,-19,-1,-26,-37,77,51,-31,-20,28,20,6,34,-42,-41,-23,29,11,-19,-6,30,-26,-6,23,47,127,19,-44,63,-55,-8,18,3,10,10,33,-11,-23,31,-9,-1,-12,-44,-31,-24,-64,26,-37,-12,16, 
  /* [15][0][][] */ -1,-79,59,-46,-43,61,22,-12,-6,59,10,50,-28,17,-7,-29,-35,-56,-96,-11,10,-14,-7,127,-9,28,-4,-19,-33,-18,22,-7,13,-85,-33,29,39,22,10,-13,-63,13,-33,-30,-19,74,33,55,47,31,-6, 
  /* [16][0][][] */ 37,29,-35,-25,-21,-127,-10,-5,36,63,-7,-56,18,43,-113,65,-72,40,40,-101,-15,-55,20,33,-52,-8,-37,23,42,-19,51,-41,5,-5,6,-1,-7,-24,32,35,-9,-60,-27,34,-24,-11,-70,27,3,26,-57, 
  /* [17][0][][] */ 48,-19,-17,17,-37,-56,-40,-15,16,-43,-61,-45,-10,-18,22,4,94,41,-69,66,-109,-24,-86,36,-22,-8,-6,-19,-32,-71,-74,-61,-9,-3,-53,-31,-61,-12,-9,-40,17,29,-22,-28,-59,1,-93,13,-1,-62,-127, 
  /* [18][0][][] */ -64,-67,-3,9,-37,-43,127,-88,-11,-5,-7,-37,-7,-23,-12,-41,64,38,20,19,7,26,-9,58,-2,94,-26,29,14,-20,-40,10,-1,-107,-55,-37,7,-18,14,1,-117,19,-47,3,5,22,-20,-54,34,19,13, 
  /* [19][0][][] */ -64,16,-1,-127,-110,-61,-43,-11,13,-16,43,0,50,-8,48,-4,-23,37,-23,3,-19,15,16,22,-5,-5,-18,9,51,24,-37,7,4,-43,-8,-12,-76,79,-5,-42,-88,13,32,-9,79,22,-71,2,24,-4,13, 
  /* [20][0][][] */ -62,40,61,-59,-60,-14,-127,-33,-20,-9,10,-36,0,4,-53,-4,7,-22,-1,-4,-43,-12,-33,-28,2,6,-17,-34,31,-32,-48,30,-82,36,-98,26,123,-7,26,78,-27,16,73,-6,-52,34,0,62,-38,-38,12, 
  /* [21][0][][] */ -29,-44,0,3,31,86,-5,-13,6,10,-5,-22,-27,3,-53,-15,-46,-19,-8,-24,30,-11,-48,-21,-22,-75,57,60,-65,-36,67,39,42,-35,-118,24,70,96,2,-33,127,-33,20,-36,-43,72,20,-3,-9,-2,-28, 
  /* [22][0][][] */ 26,-72,93,-29,27,111,-88,-10,4,-7,5,31,-43,-20,-46,-39,-62,-59,22,10,-8,41,-29,-8,33,24,-10,40,80,-72,-16,25,56,-43,10,-17,0,48,2,27,-3,15,-29,-10,61,10,-9,84,2,-28,127, 
  /* [23][0][][] */ -33,-24,17,3,-21,127,-26,16,-6,-42,3,5,27,-45,-25,-2,-16,-5,-4,24,27,42,8,-48,-13,-5,-27,14,42,27,-13,-8,6,5,44,2,-16,12,15,-40,-6,15,-34,4,-66,-30,14,-2,-4,-31,-7, 
  /* [24][0][][] */ 20,111,-8,-29,-55,94,-60,23,3,28,71,48,24,54,87,11,-3,40,36,-13,21,-2,0,-7,6,105,34,50,15,-9,42,68,80,-32,5,23,-12,-15,-9,0,38,-9,41,25,-127,18,-56,24,-10,49,68, 
  /* [25][0][][] */ -29,-93,10,-23,-5,-127,32,-36,-68,-37,-37,-83,-43,-63,44,47,-68,7,-15,10,-119,5,-43,-47,-9,-13,-9,-27,-29,-5,6,34,-114,24,7,-53,-22,-92,-35,-64,24,-42,-41,8,36,78,-17,1,38,-72,-38, 
  /* [26][0][][] */ 51,38,-5,29,-23,-27,38,127,1,-40,-2,16,34,10,56,17,-8,-2,-14,29,17,-15,-7,-6,-23,19,-7,-24,107,32,32,25,63,-13,-9,-11,11,13,40,7,-74,-29,116,-67,-8,8,-41,-18,-12,-29,-31, 
  /* [27][0][][] */ 9,-25,114,-7,26,80,2,-20,-10,-41,51,-104,-31,43,27,-26,1,-7,4,-27,-9,67,29,25,54,99,59,85,127,44,-50,-5,-3,-4,-17,22,46,93,-22,16,-11,20,-27,-6,45,-33,45,35,-18,22,-11, 
  /* [28][0][][] */ 58,-90,-22,45,32,43,14,-10,-44,59,24,101,121,-31,113,-13,7,9,38,7,-23,-99,-36,-88,-75,-31,-127,32,-64,91,83,-75,24,94,80,11,-24,9,-61,37,35,-11,17,-76,31,5,-13,52,4,37,84, 
  /* [29][0][][] */ -18,-44,-24,16,123,-83,-12,7,127,-51,28,-14,0,-33,127,58,50,-14,29,58,-52,7,43,116,1,124,-93,49,-48,66,-32,52,3,-27,-2,-52,-11,44,28,79,-74,-88,5,83,-49,67,-14,76,-1,-70,12, 
  /* [30][0][][] */ -2,-97,5,34,-127,4,43,-39,-94,50,15,-8,-23,7,-9,-21,-15,12,-31,19,29,-31,-2,39,-12,-9,-26,33,-36,26,-22,-43,33,-58,-46,18,-7,-10,26,7,-18,28,47,-13,5,5,1,26,35,-31,-24, 
  /* [31][0][][] */ -62,-15,-4,-33,-22,127,12,19,-59,39,34,19,-1,18,25,-41,16,-8,-34,-25,29,17,30,32,-1,6,7,23,-22,-37,-19,-8,-11,-18,-18,12,37,8,-7,27,-16,-69,-10,39,21,47,72,-40,5,4,30, 
  /* [32][0][][] */ 14,54,-41,0,-84,-14,-46,-26,-29,50,4,-30,25,97,80,-3,39,6,-22,-8,3,19,-23,7,-1,-66,35,81,-36,-20,27,-10,9,-53,27,9,18,-59,47,36,-110,46,-127,-19,29,-43,-1,-41,-18,-3,20, 
  /* [33][0][][] */ -45,-38,-9,22,18,38,14,34,-25,21,12,-4,-47,-90,-71,44,66,16,17,-78,-40,-14,-11,-29,36,-69,-34,-41,6,-27,-30,-34,24,127,15,-4,-35,71,42,-13,-30,-3,-61,21,10,38,-75,0,1,39,-6, 
  /* [34][0][][] */ 1,-12,-13,-62,-33,-91,86,16,-1,-61,42,93,1,49,-90,68,-23,50,-7,26,30,-18,-40,22,25,-25,47,8,-11,9,5,23,-58,15,0,-127,-40,-15,46,-4,-75,-31,-41,-23,-39,3,-26,-6,38,-22,21, 
  /* [35][0][][] */ -105,-108,23,68,56,50,-39,-38,0,20,71,2,38,13,-11,73,-64,53,-21,103,21,90,-9,3,74,-14,16,-19,127,-98,93,-15,-57,-17,45,25,52,27,78,2,39,-32,20,23,67,21,-42,-4,-18,-25,-24, 
  /* [36][0][][] */ 52,-38,-13,-6,34,18,-4,29,2,-36,20,116,11,-21,-24,-41,-41,-39,-127,23,35,-16,-40,32,43,-34,-10,-49,-9,0,5,3,-5,-4,51,-21,-8,74,21,47,-117,62,-26,-9,-64,-12,84,19,-34,-32,22, 
  /* [37][0][][] */ 5,50,-16,8,-35,12,26,17,-43,-2,-47,9,11,-12,65,5,-127,103,-10,12,10,9,6,25,5,-17,40,-45,-69,-29,6,25,-19,-23,-14,-8,8,-23,29,-25,-4,16,47,-7,67,37,20,12,4,25,45, 
  /* [38][0][][] */ -44,24,91,11,-40,36,-127,21,-53,-33,-84,17,62,26,-59,43,93,-76,45,-12,42,-71,7,-83,-24,-7,-48,-30,49,-70,-34,-15,-24,-28,11,35,-43,26,12,-50,50,-25,28,27,-82,4,-42,34,117,44,-10, 
  /* [39][0][][] */ 24,84,15,-81,62,-8,6,-36,22,-55,31,20,-7,-20,-42,31,-33,11,-10,-23,62,63,-63,-57,42,94,-3,19,-64,0,5,-21,-5,9,-28,17,62,124,-29,-32,-27,9,-41,-18,19,36,-13,-25,35,-66,-127, 
  /* [40][0][][] */ -24,-36,1,-1,10,-112,32,5,33,-36,31,73,9,44,39,9,-10,-127,44,-13,3,-24,11,-16,-12,16,-16,5,-17,5,8,32,11,27,-44,9,11,1,-6,3,-19,16,-14,-2,-4,-30,32,34,12,108,-24, 
  /* [41][0][][] */ 35,-21,1,-92,-91,-124,127,15,17,-13,-12,-28,-64,-36,-47,55,51,-80,-30,49,-69,-12,-24,-44,32,40,13,-97,-82,-32,6,34,-41,-41,65,24,12,4,-8,-27,1,-37,-22,51,1,8,-55,21,46,-6,-86, 
  /* [42][0][][] */ -36,-8,-20,-30,-22,-126,1,6,59,114,-40,-127,18,-10,11,30,31,-89,33,-34,59,-46,-19,0,13,-4,-27,41,-8,-14,-8,6,-41,-65,-69,-119,-21,13,23,51,37,-43,-59,9,-10,11,8,40,-24,-90,-26, 
  /* [43][0][][] */ 33,-8,8,-26,28,97,71,16,63,17,-36,-11,-17,32,-19,-39,-30,-84,-23,70,12,45,75,89,-23,-40,-46,42,47,74,9,1,48,64,-8,-15,-19,-2,-31,96,-127,1,42,-35,-29,-10,63,-62,-36,18,72, 
  /* [44][0][][] */ -111,-118,-2,-54,-2,-65,7,2,-97,-44,-25,28,-97,-24,127,12,-51,-61,3,-61,43,1,-43,38,18,-110,-77,-34,-63,27,-65,-73,-8,-22,9,-9,29,9,12,-41,5,-69,-6,41,-21,-68,-107,76,-35,36,20, 
  /* [45][0][][] */ 51,-17,18,-127,-70,-13,73,34,20,-31,-7,42,78,-3,-28,10,-4,2,39,36,15,4,38,-21,13,-22,6,36,11,-26,-26,18,47,-39,-17,50,41,6,11,30,-37,-7,8,-9,-12,10,-1,-7,-47,3,9, 
  /* [46][0][][] */ -88,-29,13,-25,-5,108,68,-15,19,22,-59,-6,-52,33,33,-27,82,67,-50,-30,5,-18,44,-52,-7,-17,-11,12,35,16,71,58,-11,14,10,-1,20,33,8,11,22,69,-24,9,-64,-20,3,127,-12,10,-32, 
  /* [47][0][][] */ -10,-42,-12,-30,-6,-127,-28,-2,6,13,8,-10,15,5,-15,45,25,10,4,-24,15,10,-14,-14,1,4,13,-21,1,26,24,39,35,-55,-12,44,8,-26,-7,-8,-5,0,-33,9,-61,13,70,-49,17,19,13, 
  /* [48][0][][] */ -50,-6,17,-21,57,73,62,-48,52,-36,-84,-50,31,-10,-41,127,3,-77,-86,-110,58,-45,-103,-62,-75,3,67,-5,28,42,-64,-124,-7,32,61,52,11,48,6,34,48,46,73,1,15,97,17,38,7,-33,-19, 
  /* [49][0][][] */ 122,-17,5,-51,22,-127,5,2,17,17,44,62,90,-23,-52,-50,56,-94,54,-53,-86,-23,-15,34,6,-43,32,-40,-123,-9,81,-9,-76,-33,29,27,-54,-43,-10,37,-48,-3,-44,14,-17,103,40,-35,-78,58,-30, 
  /* [50][0][][] */ -33,127,-25,20,73,-39,71,-45,-54,59,-28,-20,48,-85,44,-29,26,-76,-32,55,-11,-34,-5,26,19,32,61,65,-31,30,70,-16,-2,109,61,33,-31,53,17,-55,48,-14,76,-16,-77,-103,-1,83,35,5,96, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant24_scale = { 51, { 0.0012181805213913321, 0.0043686367571353912, 0.0019449804676696658, 0.0014499534154310822, 0.0045552719384431839, 0.0022772555239498615, 0.0028136265464127064, 0.0036117103882133961, 0.0030574502889066935, 0.0014579411363229156, 0.0017208311473950744, 0.0045956135727465153, 0.0022597871720790863, 0.0021087413188070059, 0.0029853833839297295, 0.0016131728189066052, 0.0014666684437543154, 0.0045958217233419418, 0.0014432193711400032, 0.0019931811839342117, 0.0023510719183832407, 0.0018932363018393517, 0.0019430828979238868, 0.002531146164983511, 0.0030595399439334869, 0.0036110125947743654, 0.0035343077033758163, 0.0017980837728828192, 0.0011722337221726775, 0.0023745771031826735, 0.0012015379033982754, 0.0027736728079617023, 0.0020643516909331083, 0.0024156495928764343, 0.0031661095563322306, 0.0016143441898748279, 0.0025020432658493519, 0.0039352085441350937, 0.0015761310933157802, 0.001686757430434227, 0.0027369675226509571, 0.0020540796685963869, 0.0017569059273228049, 0.0020062215626239777, 0.002249469980597496, 0.0020559811964631081, 0.0023654720280319452, 0.0034871103707700968, 0.0017107697203755379, 0.0016923893708735704, 0.0016237926902249455, } };
const TfArray<51, int> quant24_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[51] = { 58305, -24492, 4381, -35603, -16347, -12139, -6414, -11365, 64747, 60207, 42929, 6765, -16574, -200, 74592, 32001, 41701, 45987, 34261, 11, 80271, -7564, 46558, 70581, -546, -16238, -18531, 37172, -11518, -794, -22183, 51770, 62898, -16713, 30972, 45331, 53462, -9720, -206, -842, -57330, -15055, 47718, 46442, 72071, 85, 53018, -5069, -474, -14212, 67990, };
const TfArray<1, int> tensor_dimension25 = { 1, { 51 } };
const TfArray<51, float> quant25_scale = { 51, { 8.7319633166771382e-05, 8.8781940576154739e-05, 4.8189089284278452e-05, 8.8768356363289058e-05, 0.0001228232285939157, 0.00015449560305569321, 0.00017486883734818548, 8.5200925241224468e-05, 3.6732260923599824e-05, 7.7094693551771343e-05, 6.3162791775539517e-05, 0.00020940828835591674, 0.00013483982183970511, 5.1961840654257685e-05, 8.1588288594502956e-05, 0.00015689837164245546, 0.00011389929568395019, 0.00011519695544848219, 0.00014101166743785143, 5.0060421926900744e-05, 3.9032402128214017e-05, 0.00030805126880295575, 6.1907419876661152e-05, 8.0380385043099523e-05, 0.00015216651081573218, 5.3474719607038423e-05, 0.00011843104584841058, 0.00012077004794264212, 8.3806458860635757e-05, 5.9639794926624745e-05, 5.7219614973291755e-05, 3.9522456063423306e-05, 3.9064481825334951e-05, 0.00021314916375558823, 0.00012339258682914078, 4.7864381485851482e-05, 4.9304358981316909e-05, 9.4308023108169436e-05, 6.1937833379488438e-05, 3.9147769712144509e-05, 0.00011136016109958291, 6.3919105741661042e-05, 9.4534101663157344e-05, 0.00013623028644360602, 7.6776290370617062e-05, 4.4830729166278616e-05, 7.9386445577256382e-05, 0.00010538731294218451, 5.5988763051573187e-05, 7.3534465627744794e-05, 4.3115876906085759e-05, } };
const TfArray<51, int> quant25_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data26[1*3*3*51] = { 
  /* [0][0][][] */ -122,121,37,104,87,4,6,33,-87,-95,-89,-70,57,127,-94,12,-8,28,10,56,-63,51,-94,-111,73,66,62,-8,127,51,111,-31,-63,114,9,-110,-81,33,-97,42,103,36,-72,-58,-104,76,-103,-56,52,13,-6, -42,-8,48,115,67,-6,127,114,-76,-83,-110,-127,81,40,-90,-114,-68,10,-117,99,-110,87,-79,-120,48,60,66,-66,100,114,38,-116,-114,4,-38,-114,-92,53,127,86,46,102,-55,-127,-126,106,-127,45,127,86,-125, -79,97,68,92,54,14,-13,28,-78,-76,-73,-78,66,97,-87,14,-6,10,12,57,-73,21,-98,-70,-127,70,55,-24,118,44,111,-49,-51,58,23,-85,-80,35,-4,49,127,31,-58,-38,-84,49,-103,-52,47,39,-6, 
  /* [0][1][][] */ -127,100,62,127,90,10,71,127,-81,-107,-98,22,127,117,-119,-126,-92,-98,-56,96,-82,127,-94,-108,82,112,42,-127,68,93,124,-91,-103,127,-127,-50,-92,34,96,110,91,114,-127,-117,-94,91,-24,101,74,127,-91, -116,93,127,126,127,68,104,97,-67,-127,-127,-1,65,48,-114,-79,-127,-127,-127,127,-108,19,-127,-127,23,88,127,-81,101,127,64,-127,-127,41,-112,-92,-68,53,119,90,72,59,-74,-101,-87,127,-78,127,28,68,-127, -127,69,104,120,96,-4,85,103,-115,-70,-97,38,126,119,-108,-119,-80,-82,-50,104,-30,-45,-96,-80,-102,88,35,-119,46,70,127,-73,-103,89,-119,-43,-78,41,67,127,85,114,-108,-93,-98,92,-27,107,87,102,-94, 
  /* [0][2][][] */ -87,127,44,44,6,125,-46,-77,-127,-35,-47,36,5,33,-45,-23,-23,-99,-44,39,-66,64,-76,-70,61,124,51,-1,-31,35,68,-40,-71,18,-47,-127,-127,127,76,89,96,33,-14,-33,-44,74,-99,40,67,75,7, -19,6,116,83,8,50,69,-89,-77,-115,-97,39,25,88,-127,-127,-68,-58,-105,55,-127,85,-61,-91,38,17,50,-41,-11,89,101,-70,-76,13,-27,-100,-42,119,82,80,69,127,-62,-82,-127,98,-105,84,126,59,-118, -82,100,83,54,2,127,-27,-40,-104,-27,-59,42,14,0,-72,-12,-17,-96,-27,45,-24,-33,-79,-53,-113,127,13,-24,-38,23,106,-50,-48,-8,2,-114,-85,117,72,85,119,33,-23,-21,-29,58,-104,5,72,90,4, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant26_scale = { 51, { 0.0041054901666939259, 0.0041742431931197643, 0.0022656968794763088, 0.0041736043058335781, 0.0057747554965317249, 0.0072638895362615585, 0.0082217734307050705, 0.0040058749727904797, 0.001727033406496048, 0.0036247461102902889, 0.0029697127174586058, 0.0098457084968686104, 0.0063397372141480446, 0.0024430796038359404, 0.0038360205944627523, 0.0073768598958849907, 0.0053551807068288326, 0.0054161925800144672, 0.0066299177706241608, 0.002353681018576026, 0.0018351787002757192, 0.014483585953712463, 0.0029106889851391315, 0.0037792287766933441, 0.0071543832309544086, 0.0025142102967947721, 0.0055682491511106491, 0.005678221583366394, 0.0039403117261826992, 0.0028040725737810135, 0.0026902833487838507, 0.0018582196207717061, 0.0018366869771853089, 0.010021592490375042, 0.0058015249669551849, 0.0022504301741719246, 0.0023181333672255278, 0.0044340617023408413, 0.00291211879812181, 0.0018406029557809234, 0.0052357986569404602, 0.0030052720103412867, 0.0044446913525462151, 0.00640511279925704, 0.0036097757983952761, 0.0021077976562082767, 0.0037324968725442886, 0.0049549746327102184, 0.0026324125938117504, 0.0034573555458337069, 0.0020271707326173782, } };
const TfArray<51, int> quant26_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data27[51] = { 59684, 3248, -48085, 31559, -4643, 39690, 45714, 19267, 16056, 36958, 12203, 11689, 65425, -12935, 45463, 84718, 41898, 44670, 27388, 3231, 80, 57605, 1520, -2645, -204, -3600, 54992, 15831, 43495, -13411, -17556, -9691, 5049, 11403, 16542, -15954, -8755, 65759, -8744, 21433, 148053, 8475, 9529, 57218, 16294, -31432, 16981, -17290, -3150, 27782, -12640, };
const TfArray<1, int> tensor_dimension27 = { 1, { 51 } };
const TfArray<51, float> quant27_scale = { 51, { 3.3199128665728495e-05, 5.4892669140826911e-05, 0.00011990777420578524, 3.5013934393646196e-05, 5.4511008784174919e-05, 4.8850251914700493e-05, 3.129311153315939e-05, 5.2593644795706496e-05, 8.1589176261331886e-05, 4.6245568228187039e-05, 9.4717019237577915e-05, 3.0382632758119144e-05, 3.2793781429063529e-05, 9.7006995929405093e-05, 2.7020314519177191e-05, 2.0477715224842541e-05, 3.824754458037205e-05, 3.6447596357902512e-05, 3.3497668482596055e-05, 0.00010123747051693499, 0.00011439993977546692, 2.5545141397742555e-05, 0.00013256650709081441, 5.0321847083978355e-05, 4.7743706090841442e-05, 6.3013299950398505e-05, 4.0187387639889494e-05, 4.5190252421889454e-05, 4.2977648263331503e-05, 0.00011405131226638332, 5.9824022173415869e-05, 0.00011487658048281446, 0.00016568205319344997, 6.4763305999804288e-05, 5.472872726386413e-05, 0.00011842522508231923, 0.000110065215267241, 3.6452976928558201e-05, 0.00011446350254118443, 0.00011879864177899435, 2.1616046069539152e-05, 9.9160832178313285e-05, 4.0159033233067021e-05, 4.5708809921052307e-05, 3.8238093111431226e-05, 0.00011116516543552279, 7.1263690188061446e-05, 4.8882531700655818e-05, 0.00016081525245681405, 5.3449566621566191e-05, 8.6892083345446736e-05, } };
const TfArray<51, int> quant27_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data28[51*1*1*51] = { 
  /* [0][0][][] */ -25,19,-3,41,-10,2,46,-50,-15,-59,25,-80,16,-40,-46,10,28,-4,10,-21,-41,-69,15,-84,47,-32,8,-44,-5,-14,22,-23,42,-29,-99,-2,9,127,97,-20,65,-63,73,-6,-49,-26,34,14,-13,-36,45, 
  /* [1][0][][] */ 10,15,6,-20,-20,-11,9,31,15,-29,24,6,-5,16,-32,27,81,16,127,-1,-79,-7,14,-23,-56,-4,1,-7,0,-11,76,-36,54,2,-11,-25,-1,30,27,-25,20,101,-14,-15,14,0,76,-25,-44,-11,6, 
  /* [2][0][][] */ -11,65,-1,40,112,111,8,11,54,-87,22,-50,-4,14,-57,-14,-28,34,18,-32,8,-12,-6,-19,21,18,127,-88,-9,-76,19,-24,30,102,-16,4,16,74,34,-34,10,68,-21,-30,95,-11,-1,9,-35,-43,-7, 
  /* [3][0][][] */ -8,125,33,28,-53,30,45,-50,-7,-3,30,8,21,-33,-2,13,-43,10,41,-8,-15,-20,86,-58,-49,22,-46,127,-25,51,95,13,-9,1,-29,41,61,-58,6,-27,55,-31,3,-33,0,-80,-5,-20,8,19,35, 
  /* [4][0][][] */ 51,-38,-23,-3,22,38,8,127,-4,17,8,24,14,35,-2,75,-21,-25,-4,15,11,1,52,34,-32,20,-2,13,43,-6,-53,-19,48,-14,-15,-48,-22,-30,16,0,-6,-3,-9,-18,-8,-11,-2,-2,-25,-27,-32, 
  /* [5][0][][] */ 14,-29,-5,-16,-4,-34,-59,-64,-18,-11,3,-7,4,4,-36,3,14,12,28,-20,20,-12,-3,-69,-5,22,9,-9,9,-5,63,-48,-28,32,4,34,2,30,93,18,-29,-127,-13,40,18,33,18,27,4,-6,32, 
  /* [6][0][][] */ -3,-49,-63,-34,0,12,-14,-16,30,-15,86,-12,-46,-4,-13,-34,-61,-15,15,4,-34,36,-20,-106,13,15,25,19,-30,39,84,-78,-18,33,-17,61,9,23,127,0,49,-91,28,35,-102,-8,-6,2,14,32,17, 
  /* [7][0][][] */ -16,-23,-23,-28,-25,-8,43,-1,78,-11,-25,81,33,-3,-60,-127,7,-64,63,-36,72,-52,-34,-4,4,-3,17,66,50,65,28,8,115,-79,-74,19,-21,29,-24,10,11,-15,-26,-2,-10,42,80,64,16,-63,32, 
  /* [8][0][][] */ 10,30,13,78,64,0,-105,41,46,29,-61,-48,11,-15,-89,-44,39,63,-5,-39,19,-34,24,-10,-58,76,74,-11,21,42,68,47,127,-80,-39,-99,30,56,-30,-54,5,2,-61,-55,-7,94,14,36,-45,-26,35, 
  /* [9][0][][] */ -45,52,45,32,-35,49,-61,-26,-1,-104,-29,17,30,52,25,7,25,-39,9,-8,70,-28,-37,-81,18,-43,-41,7,-28,108,-82,18,-44,43,3,10,-44,-127,-37,-51,37,-5,-66,-67,-37,41,33,-35,21,-43,32, 
  /* [10][0][][] */ 1,-107,-117,73,43,90,34,16,-127,-93,34,-62,-34,9,-108,13,-9,89,21,-104,9,-40,4,-30,-40,28,30,-41,50,-17,-36,5,-21,-44,43,-69,12,14,1,-6,-52,-57,56,-40,-2,76,-59,9,-31,-33,0, 
  /* [11][0][][] */ 29,-49,1,82,49,66,-12,-12,127,5,32,-52,6,-20,50,33,45,2,43,-26,18,-42,-5,-7,-21,38,12,-22,-11,25,50,-7,-62,-13,53,48,12,-47,-23,6,52,73,29,10,41,85,9,-24,-33,4,6, 
  /* [12][0][][] */ -13,-7,-10,60,4,-32,58,-64,43,-25,-1,-43,-127,7,1,20,-32,-18,-22,-52,29,-8,-9,-41,12,24,-14,0,80,-11,-45,58,32,-33,28,-12,10,-32,31,-53,28,-112,-48,-16,-40,-58,-12,-33,20,22,39, 
  /* [13][0][][] */ -23,48,5,33,-57,-24,8,-6,11,-74,17,12,12,1,38,27,-12,32,9,5,59,22,0,23,39,2,-22,-127,20,59,-1,31,-15,67,-33,-39,32,15,22,31,126,-31,-111,-31,78,22,5,39,-20,-51,21, 
  /* [14][0][][] */ -68,-18,66,53,15,-1,77,-19,11,15,-78,91,-55,33,-31,-35,-23,16,38,43,-25,85,122,9,-29,-7,7,11,-77,64,44,-25,-77,40,-44,-58,-10,-11,-9,-109,5,127,-68,-28,-29,-37,-66,104,63,36,-5, 
  /* [15][0][][] */ 33,29,24,25,17,-63,100,-127,-105,-57,-80,79,53,27,79,58,41,-14,-45,6,99,-11,-55,-34,-55,-5,-36,72,40,35,-14,-18,-1,-125,-62,-38,42,-42,-44,58,-9,-115,-20,121,-35,36,-33,112,68,53,27, 
  /* [16][0][][] */ -47,-25,-10,-58,86,-105,-4,-31,-9,-4,-32,-45,-42,-35,36,36,-89,32,-40,0,24,-5,11,6,16,-8,58,23,60,11,24,6,-25,-36,12,-17,-13,40,8,45,-68,127,3,9,24,40,6,-60,66,-23,46, 
  /* [17][0][][] */ -60,21,-39,66,37,-18,36,9,-4,17,72,-1,9,-21,17,10,14,30,17,26,5,38,-127,-84,-12,17,39,57,28,1,8,37,-6,-20,7,8,-52,-1,5,-11,50,-58,-77,-16,49,-14,36,-23,-6,-20,73, 
  /* [18][0][][] */ -65,40,-41,15,-39,-50,16,12,31,-45,-24,-22,-1,29,34,-15,20,10,-19,36,68,30,-64,14,22,1,-29,-22,-25,-20,-38,25,-9,-28,-11,71,-68,-3,3,127,53,81,66,-23,-23,-74,-48,70,34,28,38, 
  /* [19][0][][] */ 28,47,-15,127,19,54,-103,-35,-20,-15,42,-67,13,21,-96,-44,32,6,-16,-70,-79,30,-17,-6,-63,-22,9,-49,6,-34,-46,-7,62,51,110,38,-14,-8,54,-103,19,-26,3,-59,49,-2,88,-8,-28,-4,-77, 
  /* [20][0][][] */ 40,43,-78,5,7,60,32,53,-48,-28,-118,-74,16,14,5,-7,8,93,24,-58,1,67,22,-127,24,48,12,7,9,2,47,4,20,-38,40,61,-10,56,16,-26,-54,36,53,-1,-40,-37,15,18,-91,-21,2, 
  /* [21][0][][] */ 30,22,19,-18,47,-5,-22,-75,-66,28,7,9,15,-9,36,58,-20,16,-127,27,-13,16,-43,-115,22,-56,36,33,-7,29,-71,-92,-17,-52,-19,12,-27,7,59,110,35,-92,-9,15,-53,20,-11,-17,18,53,-12, 
  /* [22][0][][] */ 53,-41,-2,-6,32,66,-15,28,-100,-1,127,-77,14,-46,-77,-8,-16,56,9,-86,-81,-58,-4,-21,-9,2,36,40,3,-12,-26,-7,-21,63,15,-16,18,9,13,-38,-19,-35,-37,-43,39,0,20,-3,111,-12,-27, 
  /* [23][0][][] */ 29,30,23,-4,34,10,-27,-29,9,-21,10,50,2,56,6,-57,-17,8,60,-24,21,4,80,127,-1,13,20,-24,19,38,-18,0,-18,-10,-40,-9,96,103,81,34,-73,21,13,31,34,-24,-26,-60,-7,-33,66, 
  /* [24][0][][] */ 32,-27,16,93,-4,78,-3,-25,46,-65,17,35,-32,-35,-37,34,38,5,-40,-37,-24,-14,127,21,-22,59,12,6,-26,31,58,-13,1,27,9,30,63,1,95,-24,-3,-35,11,-20,-61,81,10,-23,-29,-16,9, 
  /* [25][0][][] */ -26,56,-44,-78,41,-29,-21,-16,-7,13,16,-17,-51,-74,-16,79,-51,46,-27,-9,54,25,-50,127,37,60,88,-5,-41,46,-36,13,7,14,75,-2,62,25,14,5,-11,76,-23,-14,-36,36,67,-2,-20,42,11, 
  /* [26][0][][] */ 15,28,-43,-68,13,-85,-26,-1,-16,50,35,-40,-24,53,19,-44,17,-33,34,-42,56,-65,24,-35,66,-24,56,26,3,-50,-52,32,40,-58,87,25,66,76,35,1,-30,-28,5,-2,-127,-64,14,62,110,-53,0, 
  /* [27][0][][] */ 52,72,-83,66,-55,-18,21,-18,0,-41,11,-40,-50,-40,-9,-16,-25,-19,36,10,-2,-15,-37,-27,53,-35,-33,86,34,16,1,69,-22,47,1,-49,23,-56,-7,60,-41,127,-29,-59,10,5,76,-16,13,-29,36, 
  /* [28][0][][] */ -55,57,75,-3,46,-63,38,112,-23,48,-32,51,-50,12,11,-74,53,7,20,-55,25,-10,127,-77,7,-19,29,-21,10,35,-59,50,54,-64,24,-34,-58,25,-116,44,-63,-36,21,-13,18,-26,-21,0,35,-50,-25, 
  /* [29][0][][] */ 42,-100,100,26,0,115,-26,26,-127,2,-13,-11,4,60,-20,-25,-6,70,-13,-27,-94,-16,-3,-23,25,-18,-1,21,82,0,-39,-10,3,22,3,2,-23,-11,39,23,28,-2,0,12,1,-78,-15,-22,-3,-21,-15, 
  /* [30][0][][] */ -33,9,35,72,-34,7,-35,15,4,-40,-52,-12,26,-74,7,-52,66,-4,0,-10,75,-30,-25,50,-17,18,-4,1,14,-67,-12,-5,4,65,-8,-10,26,-37,83,-4,-38,127,28,-31,43,-33,18,-35,102,-32,-10, 
  /* [31][0][][] */ 90,0,78,53,24,36,1,24,-127,-79,43,-24,-30,56,-40,37,-29,-30,1,-27,-33,14,2,-31,-34,17,32,-106,25,6,28,5,37,32,86,33,-1,24,-5,37,15,-10,-53,-87,2,-24,10,9,-20,-24,-18, 
  /* [32][0][][] */ 15,0,-8,46,25,44,9,12,-127,8,-5,-45,-18,-20,-31,2,48,44,3,-20,-51,-20,-4,-8,10,25,37,-19,32,3,-20,-5,11,8,1,-22,19,25,19,11,-33,-19,-48,-22,13,12,20,7,13,-28,-10, 
  /* [33][0][][] */ 5,17,-5,-30,2,20,0,-32,20,10,-8,-2,-4,-28,13,-12,-16,-1,127,12,0,8,18,-6,-1,-5,-1,-20,4,-15,28,-2,0,-3,-12,38,1,-1,-6,8,6,-5,5,11,-27,6,8,-9,31,25,5, 
  /* [34][0][][] */ 76,11,29,-43,4,-70,26,-62,25,-18,26,-56,10,-20,-14,28,4,0,15,9,32,17,-127,2,3,13,53,-18,14,14,-5,0,-41,16,3,9,8,81,40,-4,-12,28,53,9,8,-30,8,-15,-8,-14,-6, 
  /* [35][0][][] */ 1,-29,8,-40,26,80,127,33,-59,-25,-65,-35,-21,-69,-67,-16,55,67,12,-85,-3,-41,6,-19,-17,-13,7,0,85,-4,100,0,-29,41,36,-8,20,10,21,29,-49,-7,-31,-26,12,-10,-19,-2,36,-13,-15, 
  /* [36][0][][] */ 6,-37,127,-16,38,65,14,5,-7,-63,33,-55,22,-15,-14,22,-15,-18,79,-17,-41,13,-1,-10,84,16,2,18,-48,-18,-31,44,29,-9,40,12,23,-13,24,-11,35,-6,-32,25,-11,12,11,24,-3,-19,15, 
  /* [37][0][][] */ -2,-16,-42,6,-28,117,40,-72,-28,35,3,-49,-20,-11,2,-62,39,-69,-21,16,-47,-26,0,-99,-29,9,34,39,29,122,32,0,9,-127,16,40,20,-17,28,53,25,-120,23,20,-46,3,0,-10,26,6,-51, 
  /* [38][0][][] */ 1,-58,79,23,-12,11,-18,-27,-23,-127,9,16,21,63,-44,-53,24,-24,3,-82,29,29,14,-11,50,33,-21,67,-31,13,-76,-6,120,-88,49,66,23,-35,32,-9,24,17,-19,-53,16,-57,-7,-45,1,10,116, 
  /* [39][0][][] */ -5,72,19,41,12,-31,-127,6,29,7,-8,-24,-18,-20,-18,-28,-28,-8,-26,-5,-125,8,0,9,27,-32,0,32,82,-12,33,12,-15,-12,-38,-3,1,35,2,-34,64,5,16,-7,7,-24,10,-16,-12,-32,-49, 
  /* [40][0][][] */ -2,51,58,22,24,-5,13,-85,9,58,8,29,-19,-7,4,-5,2,-34,-127,50,47,9,-50,-115,-17,-32,24,-47,-7,-57,35,58,-34,-51,18,51,-35,-12,-68,68,-25,-29,0,60,-31,35,1,30,-10,0,-99, 
  /* [41][0][][] */ -127,21,11,-19,36,26,78,5,-35,-37,59,4,-35,-9,33,9,55,9,14,-62,53,-69,0,-63,-44,47,34,-73,-62,22,-37,-5,-36,-32,30,57,-5,17,19,116,-58,-44,-68,14,1,72,74,26,-51,-4,36, 
  /* [42][0][][] */ -61,84,79,40,1,9,-1,1,49,16,-45,27,-20,-52,-4,-53,10,38,39,-9,45,-8,42,127,-39,-91,-21,-36,58,-51,29,-4,-4,-75,78,14,-37,17,1,48,-28,54,50,-61,-83,-28,-21,-56,-21,-50,46, 
  /* [43][0][][] */ 38,51,-63,4,-9,-70,-25,23,109,62,-19,-54,12,-24,35,54,63,25,-34,38,30,-3,-25,91,49,38,10,3,-55,-14,-44,-29,45,-72,31,-25,-13,-9,-127,4,120,-108,16,73,-82,74,14,-27,-23,114,-38, 
  /* [44][0][][] */ -4,-24,-19,-5,-6,-16,20,-12,-16,18,30,38,89,-9,14,100,-12,-47,-48,7,-69,-38,105,108,-15,21,2,19,-24,12,45,-11,92,127,73,-1,-50,-55,-20,-47,-34,-14,79,26,-13,40,-2,2,40,32,5, 
  /* [45][0][][] */ 43,16,105,-21,17,110,16,45,-3,21,-28,-22,-5,-20,-52,15,-30,38,-12,-51,-122,-58,-7,-22,-55,-27,8,-14,127,30,-40,-14,21,77,42,50,5,8,41,8,63,38,-21,12,21,-27,51,-5,28,-31,-52, 
  /* [46][0][][] */ -23,-17,-9,41,5,-42,-18,127,-3,-12,5,7,1,-22,29,21,-23,-16,-21,-22,-10,-15,-102,-15,18,-14,11,-5,-12,31,-10,15,12,10,-20,28,10,-5,41,-14,-29,-28,-11,-14,42,32,-5,-18,-23,-27,2, 
  /* [47][0][][] */ -4,41,-22,83,0,66,15,-40,28,63,-35,77,-19,-6,-17,27,31,30,71,-10,-26,3,127,-53,-34,-15,-2,12,-56,20,74,-6,18,-76,-33,5,-102,-22,62,24,51,90,23,62,34,-19,8,-19,-24,-30,-31, 
  /* [48][0][][] */ -31,-105,10,-18,20,127,-11,31,-49,-12,19,-41,-2,-82,-21,-6,22,106,14,-63,-42,-8,-3,-65,-12,50,29,-17,-16,8,-2,-23,61,26,7,-7,-83,-15,68,-10,-65,-15,26,-46,35,67,26,17,-28,-3,1, 
  /* [49][0][][] */ -52,34,35,-31,-48,-79,-61,58,58,-33,28,23,-3,40,-69,63,14,-68,72,19,12,-7,116,-107,127,127,33,60,-55,-33,-26,-108,69,-30,27,-27,39,34,-4,-11,-70,-37,36,-26,-74,54,-58,-5,-90,30,5, 
  /* [50][0][][] */ -30,-31,61,29,49,74,-37,5,-17,-67,25,39,36,-39,-127,-12,-6,86,-11,-92,-17,-32,-6,-10,-44,61,10,-67,98,36,-38,28,95,-69,86,24,44,-1,110,-91,97,15,-15,-89,69,78,71,7,1,-48,-89, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant28_scale = { 51, { 0.0014109630137681961, 0.0023329383693635464, 0.0050960802473127842, 0.0014880922390148044, 0.0023167177569121122, 0.002076135715469718, 0.0013299572747200727, 0.0022352298256009817, 0.0034675397910177708, 0.0019654366187751293, 0.0040254732593894005, 0.0012912618694826961, 0.0013937357580289245, 0.0041227973997592926, 0.0011483633425086737, 0.00087030284339562058, 0.0016255206428468227, 0.0015490227378904819, 0.0014236508868634701, 0.0043025924824178219, 0.0048619974404573441, 0.0010856684530153871, 0.0056340764276683331, 0.0021386784501373768, 0.0020291074179112911, 0.0026780650950968266, 0.0017079638782888651, 0.0019205857533961535, 0.0018265499966219068, 0.0048471805639564991, 0.0025425208732485771, 0.0048822546377778053, 0.0070414873771369457, 0.0027524405159056187, 0.0023259709123522043, 0.0050330720841884613, 0.0046777715906500816, 0.0015492514939978719, 0.0048646987415850163, 0.0050489422865211964, 0.00091868196614086628, 0.0042143352329730988, 0.0017067588632926345, 0.0019426244543865323, 0.001625118893571198, 0.0047245193272829056, 0.0030287066474556923, 0.0020775075536221266, 0.0068346480838954449, 0.0022716065868735313, 0.0036929133348166943, } };
const TfArray<51, int> quant28_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data29[51] = { -1352, -4699, -417, -3704, -416, 46979, 24678, -41068, -5904, -2813, 15, -13264, -5335, 22613, -8616, 44313, -124, 8901, 10009, -13370, 45378, -2486, -9069, -96007, -5361, -284, -274, 15439, 12079, -769, -3721, 67, -5769, -3004, -1321, 25248, -324, -1736, 50436, 34778, 54685, -56148, -10997, 9874, 31680, -1324, -333, 88, -1481, -3611, 146, };
const TfArray<1, int> tensor_dimension29 = { 1, { 51 } };
const TfArray<51, float> quant29_scale = { 51, { 8.2891783677041531e-05, 0.00024157583538908511, 0.0001331802923232317, 0.00018935870321001858, 0.00019535158935468644, 0.00012205749226268381, 0.00021781922259833664, 0.0001273130183108151, 0.00033881037961691618, 0.00016260186384897679, 0.00011311870184727013, 6.7398046667221934e-05, 0.0002048573805950582, 0.00010741709411377087, 0.00021335539349820465, 6.8511209974531084e-05, 8.4662424342241138e-05, 0.00045895099174231291, 0.00014979900151956826, 0.00020084893913008273, 0.00015862786676734686, 0.00015118293231353164, 0.00018077182176057249, 9.5215771580114961e-05, 0.00010611170728225261, 0.00016133849567268044, 0.00013981778465677053, 0.00037079289904795587, 0.00034583875094540417, 0.00012901093577966094, 0.00010001470218412578, 0.00035111641045659781, 0.00015779546811245382, 0.00018790941976476461, 9.6180920081678778e-05, 9.2064328782726079e-05, 0.00027014350052922964, 0.00027193498681299388, 0.00012223256635479629, 0.00014738012396264821, 0.00011416111374273896, 0.00010106713307322934, 0.00022481927589979023, 0.00048289509140886366, 8.5785635747015476e-05, 8.9779270638246089e-05, 0.00025172968162223697, 0.00011348754196660593, 8.8434717326890677e-05, 0.00025236496003344655, 0.0001967588032130152, } };
const TfArray<51, int> quant29_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data30[1*3*3*51] = { 
  /* [0][0][][] */ -6,-1,-24,24,-71,8,-14,-11,2,-38,1,117,26,-21,20,16,35,2,107,18,-25,-10,127,88,-56,-66,-94,21,1,2,-7,10,15,10,-47,-8,-1,-5,-16,-37,-39,33,14,-7,-6,40,14,52,1,22,22, 63,-7,-32,-4,33,-127,-42,19,6,14,27,70,-50,-3,6,-37,29,-9,2,74,-57,46,76,127,-40,-127,71,-23,34,70,66,-3,13,73,38,-76,127,13,-60,-42,-48,94,39,-3,-37,24,-10,77,71,1,127, -16,-1,-24,16,29,17,-9,5,5,-29,2,92,22,-10,19,-2,12,5,68,15,-23,-43,126,91,-41,-45,15,12,0,-4,-11,22,17,3,-43,-5,24,-9,0,-12,-21,9,6,-3,-8,25,15,-15,-27,50,66, 
  /* [0][1][][] */ 55,40,44,18,-117,26,-44,74,0,70,47,127,45,-40,32,-69,44,-17,59,64,-60,42,15,51,78,-19,-127,-20,-11,127,92,127,2,28,83,-51,14,24,-108,-46,-104,127,55,-2,-36,34,16,-103,91,60,-31, 127,127,127,127,127,-114,-127,103,127,127,127,16,127,-127,127,-127,127,-127,-127,127,-127,127,11,118,94,67,93,-127,-127,24,127,-50,127,127,127,-127,-28,119,-127,-127,-127,125,127,-127,-127,127,127,127,127,127,19, 40,11,33,13,-5,43,-36,75,6,40,38,124,34,-34,14,-58,38,-10,13,53,-31,40,31,79,55,-42,51,-11,3,104,92,125,-12,12,84,-44,3,-127,-83,-29,-101,117,42,-14,-25,13,10,71,92,-1,-18, 
  /* [0][2][][] */ 31,20,18,39,-54,-25,-20,60,-1,7,-10,79,13,-5,19,-18,21,-4,91,38,-34,13,0,72,14,66,-71,8,-6,-106,-9,-11,23,-43,-10,-6,-13,9,-10,-14,-37,44,8,0,-11,23,-26,48,-15,-6,-10, 54,5,24,-26,13,-93,-36,127,20,63,-10,14,55,-12,32,-88,40,-15,-17,67,-35,33,17,112,127,91,51,-44,-20,-90,35,46,74,-16,49,-36,-96,12,-87,-37,-42,112,28,-23,-25,14,-116,84,62,53,-124, 24,10,14,38,32,-25,-10,73,2,12,-15,39,14,-2,15,-22,9,2,89,44,-22,1,19,102,5,61,2,15,-7,-81,-13,-16,21,-28,-10,-6,-26,-16,16,6,-33,63,1,-1,-19,11,-23,-45,-30,19,-49, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant30_scale = { 51, { 0.0038436646573245525, 0.01120179146528244, 0.0061755264177918434, 0.0087805008515715599, 0.0090583888813853264, 0.0056597655639052391, 0.010100205428898335, 0.0059034628793597221, 0.015710525214672089, 0.0075397947803139687, 0.0052452767267823219, 0.003125225193798542, 0.0094991689547896385, 0.0049808952026069164, 0.0098932189866900444, 0.0031768421176820993, 0.0039257686585187912, 0.021281406283378601, 0.0069461301900446415, 0.0093132993206381798, 0.0073555218987166882, 0.007010302972048521, 0.0083823297172784805, 0.0044151237234473228, 0.004920364823192358, 0.0074812127277255058, 0.0064833043143153191, 0.017193544656038284, 0.016036428511142731, 0.0059821945615112782, 0.0046376488171517849, 0.01628115214407444, 0.007316923700273037, 0.0087132975459098816, 0.0044598774984478951, 0.004268992692232132, 0.012526465579867363, 0.012609534896910191, 0.0056678839027881622, 0.0068339677527546883, 0.0052936132997274399, 0.0046864496544003487, 0.010424795560538769, 0.022391686215996742, 0.0039778514765202999, 0.0041630351915955544, 0.011672621592879295, 0.0052623800002038479, 0.0041006887331604958, 0.011702080257236958, 0.0091236410662531853, } };
const TfArray<51, int> quant30_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[51] = { -3933, 35339, 31322, 8501, 3710, 17754, 6188, 90071, 21162, 2195, -8143, 15703, -31904, 17715, 2362, 28366, 24223, 52744, -17722, -23313, 42844, 10059, 14565, 163029, 31274, 28044, 20253, 58333, 23122, -10011, 32394, -12068, 38221, 56703, -6009, 8586, 38225, 12866, 52515, 44587, 33726, 106115, -31011, -123, -3634, -11675, 11031, -12248, 4358, -7631, 13450, };
const TfArray<1, int> tensor_dimension31 = { 1, { 51 } };
const TfArray<51, float> quant31_scale = { 51, { 0.00012381671695038676, 3.8189722545212135e-05, 0.00010166416905121878, 6.5975575125776231e-05, 9.7609256044961512e-05, 6.7027001932729036e-05, 9.3707421910949051e-05, 4.1631890780990943e-05, 5.1998020353494212e-05, 7.3164213972631842e-05, 0.00015302600513678044, 5.0835707952501252e-05, 0.00015197263564914465, 0.00010175466013606638, 8.7712287495378405e-05, 0.00010452911374159157, 0.00011209633521502838, 3.3752679883036762e-05, 6.3935964135453105e-05, 0.00010037501488113776, 5.9485766541911289e-05, 0.00014501299301628023, 6.5271276980638504e-05, 1.9759332644753158e-05, 0.00012334907660260797, 4.4830543629359454e-05, 6.862146983621642e-05, 2.9563243515440263e-05, 4.6644261601613835e-05, 0.00010613547055982053, 8.4304054325912148e-05, 6.92468456691131e-05, 5.1108490879414603e-05, 4.79377486044541e-05, 9.1014604549854994e-05, 0.00012860225979238749, 5.5472755775554106e-05, 9.3902133812662214e-05, 4.2831336031667888e-05, 5.0366445066174492e-05, 3.9357517380267382e-05, 2.9137199817341752e-05, 4.5765555114485323e-05, 3.9769889554008842e-05, 0.00013305159518495202, 0.0001095437619369477, 5.3924515668768436e-05, 0.00019526874530129135, 0.00013367334031499922, 0.00010907723481068388, 4.2905594455078244e-05, } };
const TfArray<51, int> quant31_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data32[51*1*1*51] = { 
  /* [0][0][][] */ -43,65,-23,5,59,80,11,-41,-30,17,-86,13,-2,-4,-85,57,-7,22,35,-37,-43,-67,-31,49,-17,13,-18,38,17,-48,-30,102,68,35,-37,-50,17,-9,14,12,-1,17,-24,7,-127,-6,40,2,-25,39,-30, 
  /* [1][0][][] */ 31,-8,-44,12,-45,115,-12,74,14,-38,-4,-17,-101,66,23,19,65,88,8,43,50,66,-20,45,-107,46,-14,-90,-18,-35,-66,-78,-66,88,50,-9,-34,-54,13,1,12,63,15,-57,74,-26,-37,-66,10,88,127, 
  /* [2][0][][] */ -36,58,26,21,12,-20,-7,41,-19,-26,-4,-4,-5,-28,40,22,-22,-11,65,-1,51,41,5,45,15,14,14,-127,-14,18,8,24,11,7,-3,5,5,9,-22,-113,-15,17,-34,54,-34,-5,-9,-13,16,-20,-35, 
  /* [3][0][][] */ -23,-21,4,-18,51,50,35,19,10,127,-14,19,-84,-30,1,18,51,-36,4,26,-22,-66,17,-45,20,-15,42,-13,74,-65,36,18,45,-89,2,-36,12,-12,-56,-3,-22,-35,-31,35,19,-3,22,-2,47,11,-10, 
  /* [4][0][][] */ 5,-23,-36,127,26,9,-29,-1,25,15,42,11,34,29,16,-16,17,-45,-14,61,-4,15,29,-23,16,33,7,22,-19,30,-23,-24,-56,28,-13,-21,28,-1,-36,27,-64,15,-15,10,-16,-16,-10,2,4,-21,37, 
  /* [5][0][][] */ -8,86,18,-62,-14,39,-18,12,9,6,2,-26,50,-40,17,7,-29,127,87,-39,-8,-9,22,22,-60,69,-51,-16,52,-22,58,29,19,-81,-74,-7,28,1,24,63,63,-52,-14,52,5,30,8,28,15,-47,-13, 
  /* [6][0][][] */ 2,-15,24,-8,-9,-8,-12,5,-10,-32,-1,127,19,-4,10,-4,-16,-12,29,14,3,25,-13,5,-7,-6,7,-43,-18,-16,2,-7,-25,-3,-7,15,-2,12,3,55,7,10,0,-5,6,15,-7,4,15,-17,-1, 
  /* [7][0][][] */ -12,-65,12,-7,21,-15,1,-21,-32,28,-42,-38,-127,-20,6,83,28,-47,55,23,-30,-47,11,14,2,45,-26,-66,-10,-103,-49,33,-20,5,29,24,37,63,-17,-99,-6,-10,15,-56,-31,-10,-5,-12,38,67,37, 
  /* [8][0][][] */ 29,-20,4,96,-2,-6,8,-23,-1,13,-6,5,-18,45,-1,-13,18,-5,-44,-60,-10,-6,61,-21,0,30,31,-18,-19,10,-1,-35,-8,30,1,-92,81,1,-62,37,-127,-18,25,3,-19,-28,17,-3,6,-3,14, 
  /* [9][0][][] */ -17,5,-33,3,0,15,24,0,-18,28,66,71,37,-8,9,-6,-14,12,46,-28,29,12,9,21,33,-42,-81,-15,-123,7,-5,-17,14,10,20,29,-3,60,13,-73,1,-121,24,2,15,9,10,3,-38,-28,-127, 
  /* [10][0][][] */ -9,28,44,-14,-43,3,17,-7,-30,54,-7,-76,-8,-16,-10,14,-14,43,5,10,-3,21,49,-76,-16,-5,-20,38,2,-14,-1,18,-1,14,-10,42,-13,4,1,85,28,-4,24,2,-6,-26,127,-9,18,1,27, 
  /* [11][0][][] */ 45,-112,40,-101,30,46,-52,120,127,14,-62,-8,48,-34,-58,31,44,51,-108,37,27,-20,-7,-2,21,-11,63,-75,-69,30,-23,10,-47,109,3,65,48,9,-31,65,19,-23,-64,-110,22,-38,33,74,75,6,89, 
  /* [12][0][][] */ 44,8,-9,-33,-7,15,6,-17,-1,-27,1,96,-4,-25,-70,17,18,-2,-29,0,-48,-36,25,-55,21,-22,-12,127,-23,36,-3,-24,18,6,29,-20,-59,23,2,59,-28,-13,21,6,-7,-8,26,-9,50,9,13, 
  /* [13][0][][] */ 5,36,-10,-6,-56,-58,13,-48,51,-70,52,-127,8,-46,-42,30,116,-16,-48,3,90,124,-77,-84,-57,2,1,11,-50,-14,7,10,57,3,38,37,62,75,-13,-33,43,14,-90,34,-24,-20,-45,67,-62,-25,-4, 
  /* [14][0][][] */ -66,-56,-59,-51,44,-40,18,-24,55,-21,14,-23,-58,-7,42,-39,127,-52,58,-35,54,123,11,32,33,-3,74,-2,-16,14,22,-7,-94,47,27,-100,-67,39,62,21,12,-66,-11,6,-34,-36,-96,73,-54,-24,-15, 
  /* [15][0][][] */ -65,44,-5,-26,18,57,20,-127,-14,103,-59,17,14,-26,-90,93,-65,29,-82,-5,-53,-116,49,-40,10,21,-10,-16,47,-73,-27,-2,8,-2,13,34,-45,20,-84,-92,-6,40,-88,-8,-7,-113,73,-5,17,5,-21, 
  /* [16][0][][] */ 1,-1,-31,-77,40,10,-17,-94,-17,127,-64,19,-78,-52,4,4,-53,51,-50,-10,2,-6,-40,-53,61,-53,88,-75,6,-13,13,-3,-39,65,-17,5,23,-9,7,-27,58,15,85,-8,-72,-30,-16,-82,-38,3,-9, 
  /* [17][0][][] */ 12,-44,61,78,-26,-4,9,52,-13,54,-75,-53,75,78,-15,-33,-66,-33,55,78,22,-33,10,-3,-36,37,-45,-127,10,8,2,16,-62,-78,40,-55,31,-92,-43,82,-29,38,63,0,-7,58,7,64,-49,-20,-19, 
  /* [18][0][][] */ -7,18,4,-2,75,-1,2,25,-6,10,11,5,99,38,9,29,96,127,-17,-24,-56,-16,-19,8,22,-12,1,-13,-55,-23,2,-31,-30,11,61,-16,-15,-34,-15,9,-11,-4,44,12,-21,27,-2,14,-14,-10,17, 
  /* [19][0][][] */ 63,-55,-33,-35,-45,-75,-46,-54,37,-51,42,101,-27,-2,-28,-30,96,-80,-39,38,44,54,14,-40,50,-29,-12,122,29,34,54,-38,-53,-36,82,1,-4,91,6,38,18,-67,-30,59,43,54,-2,30,127,-94,-41, 
  /* [20][0][][] */ 7,-3,-15,-37,-57,-24,-20,-25,66,48,-5,31,2,34,-26,24,70,109,-27,-9,-9,-1,23,26,-51,13,-78,-52,-40,17,3,-32,9,-12,1,-5,-11,-20,-66,-127,-45,-42,59,-21,44,5,3,30,46,-29,44, 
  /* [21][0][][] */ -11,39,-35,-45,-31,-68,-47,-45,56,-10,-41,-30,6,-4,31,-12,57,-34,69,-75,28,-34,-4,-76,-21,-5,-71,5,37,-36,35,66,-60,-16,-3,-59,-36,25,18,127,-7,-11,-22,84,-22,9,-54,15,-17,5,4, 
  /* [22][0][][] */ 3,-12,34,19,2,-16,-8,0,-13,-5,1,-45,-126,0,12,21,127,-16,-16,-44,13,29,-10,54,0,18,33,-35,91,15,-10,-2,-13,-36,9,12,25,-15,-9,-50,-17,96,11,6,-61,-19,38,46,19,-9,-14, 
  /* [23][0][][] */ 60,46,-85,94,-70,-112,11,-19,2,-33,-32,13,-28,38,77,-66,81,-52,-12,8,101,84,-65,36,-47,24,35,-11,-48,-10,36,109,13,-69,127,19,78,12,-25,94,9,108,18,73,78,-2,13,-18,4,94,-26, 
  /* [24][0][][] */ -47,9,-35,-19,17,-27,30,-37,1,-21,3,-19,-11,-39,-32,9,30,17,32,39,-16,-1,-18,22,8,17,-20,-87,12,21,-41,-44,4,64,-1,-29,-32,53,41,-127,6,-24,-70,-19,-15,-51,-34,3,21,-1,5, 
  /* [25][0][][] */ -27,52,49,-127,-90,41,-75,2,-56,82,21,-25,-27,-101,-21,61,25,12,12,-58,-5,11,25,57,58,-94,-41,-41,-29,13,70,-57,18,17,24,8,-40,31,-7,28,49,-37,22,107,-97,-1,39,24,88,-52,-52, 
  /* [26][0][][] */ -11,81,57,-107,37,1,45,-1,-46,-5,-10,-87,-27,-33,-41,26,7,25,-4,-113,-22,9,-43,-9,-50,-21,-38,-43,25,-58,20,24,127,-79,-23,-12,13,-8,31,23,54,1,73,46,38,30,45,-29,19,78,-5, 
  /* [27][0][][] */ -22,114,-19,-48,-13,-7,24,45,42,47,-59,-64,-70,-37,4,4,-127,112,-5,25,-8,-62,83,49,-69,-20,-8,28,-35,-83,20,22,9,-20,-2,57,-88,-70,-9,30,30,-48,25,38,-32,-55,26,-5,45,42,-110, 
  /* [28][0][][] */ 48,12,-61,-15,-5,14,-21,-40,27,-41,-105,49,60,78,4,19,-15,-4,-35,-17,0,-64,-18,51,-45,25,-19,47,23,-29,32,108,37,-23,-24,-30,-2,-84,-31,127,-30,-43,3,22,23,1,-51,2,-40,23,-22, 
  /* [29][0][][] */ 10,1,127,7,5,-14,-32,-60,-56,24,5,-2,-23,-32,-18,9,8,28,-1,-19,22,1,43,-5,-10,-23,6,30,-2,-5,14,-14,110,36,4,-62,67,35,-28,26,1,-12,24,-9,25,8,13,-16,17,0,-20, 
  /* [30][0][][] */ 3,24,53,29,-9,7,29,37,-16,-68,-11,-127,-3,11,21,23,-35,35,80,0,-30,11,-21,15,-9,20,-27,-112,12,48,-4,32,-32,-58,-13,16,10,111,-3,-29,-5,3,11,-5,7,42,-2,17,77,31,-6, 
  /* [31][0][][] */ -27,43,3,32,68,10,19,-3,-25,36,25,-41,45,-20,-15,32,127,27,31,29,3,14,8,54,47,9,-18,-81,-15,-32,-3,-12,1,11,21,-9,-31,13,18,-102,-31,-29,-13,18,-49,-18,31,-2,10,25,6, 
  /* [32][0][][] */ -30,-108,-48,9,109,-13,34,-3,28,101,98,-8,-75,11,10,27,104,-1,-5,4,-35,-38,8,76,14,34,-34,-127,83,9,-103,-12,-40,-42,-42,-70,-55,26,-34,-68,-18,-1,50,-111,-9,-81,-41,-70,19,-33,-52, 
  /* [33][0][][] */ 36,-20,-66,58,30,-17,35,-4,62,-43,3,0,-49,34,-46,-37,-65,81,-15,36,6,-36,3,-40,23,127,39,-70,117,-10,-23,-1,-14,69,-41,44,-66,-71,21,-41,-35,97,-15,-45,-24,-18,1,-60,-13,17,-26, 
  /* [34][0][][] */ -59,-2,100,-55,7,12,49,37,-97,52,-68,36,-15,-112,-28,55,66,-13,71,-56,3,-13,37,12,-127,7,-24,4,-50,-25,-7,-4,58,29,-5,-19,41,23,-24,-25,-3,-33,6,12,-18,-43,1,13,-15,-40,13, 
  /* [35][0][][] */ -34,14,-37,-32,3,-12,-127,-67,35,-15,69,-33,28,-15,-52,-2,15,-15,-36,26,-4,52,49,5,101,-27,-7,58,-9,89,-12,-38,-52,-44,-34,-1,-99,87,33,3,19,24,-72,-3,-18,-6,75,16,9,-37,3, 
  /* [36][0][][] */ -6,-5,0,-13,-127,81,4,31,5,5,-44,-27,-22,-11,-42,9,-40,-7,-28,19,16,-33,-6,122,-20,-3,56,-2,-4,12,-3,-12,-30,27,41,5,-23,-11,4,6,3,3,-60,-27,-37,-36,-27,5,32,21,6, 
  /* [37][0][][] */ 2,8,-4,10,127,-24,18,-10,3,-6,-8,-5,-4,-9,14,-9,-4,18,14,-22,-3,24,-5,-32,7,3,-45,7,0,3,-6,8,-6,-11,-29,2,3,41,10,-12,-9,4,-5,1,5,-10,16,1,-9,6,0, 
  /* [38][0][][] */ -7,-42,-8,60,-54,-15,44,-8,-24,-30,-44,-9,7,7,9,17,-40,-34,57,-7,2,23,-70,-72,-35,-14,-15,27,44,48,13,24,51,13,86,-36,48,-127,60,-21,25,9,-62,24,58,-60,-19,18,1,2,-63, 
  /* [39][0][][] */ 31,-52,31,20,-64,73,-126,74,37,60,2,18,-28,-51,53,-82,13,-65,-60,78,43,120,10,-6,6,-6,-127,15,-9,-39,-24,20,20,53,66,-61,21,72,44,-14,46,-71,-8,-13,4,-20,-56,-34,-35,-50,-27, 
  /* [40][0][][] */ -1,-23,15,55,-42,91,0,-53,74,-80,9,-69,93,11,-1,10,93,-2,67,-22,1,82,-23,-52,-67,13,125,127,-45,86,35,-20,10,1,-73,-53,-12,10,-64,-8,-69,-27,0,16,4,-8,16,51,-2,-62,-2, 
  /* [41][0][][] */ -20,55,93,-24,80,-3,-17,73,-39,14,52,14,4,-23,35,-20,16,59,-71,-2,-37,-61,10,33,-27,-46,-8,-16,12,-27,10,-35,2,52,-89,-39,9,-127,38,-7,48,-81,-30,20,-16,-22,2,32,36,-38,75, 
  /* [42][0][][] */ 49,28,70,-4,73,-28,-17,4,7,77,52,44,-24,-35,-12,6,53,37,21,5,3,-19,-2,54,-43,44,32,126,1,28,5,-53,50,23,22,10,22,61,26,127,14,13,-12,24,-5,24,2,6,9,-97,-25, 
  /* [43][0][][] */ 18,-4,65,28,-72,-5,101,-12,-24,0,-64,-51,16,10,-62,35,21,44,23,-16,-30,-21,59,-33,-98,32,19,79,-4,12,13,18,61,89,0,55,-81,-1,-61,127,-75,8,94,10,-31,-49,26,-50,-24,53,-26, 
  /* [44][0][][] */ -42,-26,50,2,29,54,-14,15,-33,71,-71,-73,28,-37,-46,3,-5,22,28,-39,-46,-109,65,26,-79,-16,-29,23,-18,-42,2,0,2,-4,-36,36,-21,0,-11,127,-55,-13,30,-18,3,-30,39,-59,47,12,32, 
  /* [45][0][][] */ 49,30,-53,84,-7,9,-2,44,-46,14,0,-78,-14,-55,4,36,-8,77,-12,-6,-15,-33,-9,-27,33,1,-27,127,14,55,1,-49,46,30,-46,-51,-6,-10,-46,48,-112,-1,-7,-7,-7,-55,-5,-27,102,95,66, 
  /* [46][0][][] */ -21,41,68,-17,50,-19,-36,15,-34,93,-19,89,-37,-86,-16,46,76,24,-18,-44,42,22,-30,9,-2,-14,-25,-43,-40,14,50,-11,-18,127,-53,-40,42,32,-58,-90,19,-20,72,107,-81,-17,29,5,18,-37,16, 
  /* [47][0][][] */ 11,14,12,-22,38,13,-31,-30,-13,10,-10,-34,-27,-8,-8,5,5,3,-21,0,6,-67,5,10,11,15,-10,74,28,36,5,-2,-18,-13,-26,28,-17,12,-8,127,-7,-10,-20,14,41,-23,-40,0,-6,3,-1, 
  /* [48][0][][] */ -1,10,-42,-29,69,8,22,-27,79,-31,-59,-9,-54,37,-7,51,33,-22,49,-33,-11,-127,-20,42,-2,12,0,-23,24,-65,60,7,-56,-45,-11,-76,2,-35,3,102,-29,-41,5,61,40,6,-39,-37,-25,-1,9, 
  /* [49][0][][] */ 46,-38,-37,79,-44,11,116,-33,-6,-73,16,-127,-2,46,20,-6,96,9,75,-47,-44,74,-52,1,-11,1,46,7,-54,-24,14,-4,-10,-24,24,2,19,29,-1,13,-8,-23,41,-25,-13,12,4,-8,-21,16,38, 
  /* [50][0][][] */ 2,46,2,12,123,-8,72,10,28,55,-14,14,-11,-34,-15,34,18,24,-35,9,-5,22,8,-127,-2,-8,-22,-5,-21,45,100,23,16,67,-63,-4,-25,32,30,-10,-36,-32,-91,57,77,-84,104,-50,17,-16,-10, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant32_scale = { 51, { 0.0052622104994952679, 0.0016230631154030561, 0.0043207271955907345, 0.0028039619792252779, 0.0041483934037387371, 0.0028486475348472595, 0.0039825653657317162, 0.0017693552654236555, 0.002209915779531002, 0.0031094790901988745, 0.0065036052837967873, 0.0021605174988508224, 0.0064588366076350212, 0.0043245730921626091, 0.0037277720402926207, 0.0044424873776733875, 0.0047640940174460411, 0.0014344889204949141, 0.0027172784321010113, 0.0042659379541873932, 0.0025281449779868126, 0.0061630518175661564, 0.0027740292716771364, 0.00083977158647030592, 0.0052423356100916862, 0.0019052980933338404, 0.002916412428021431, 0.0012564378557726741, 0.0019823811016976833, 0.0045107575133442879, 0.003582922276109457, 0.0029429907444864511, 0.0021721108350902796, 0.0020373542793095112, 0.0038681207224726677, 0.0054655959829688072, 0.0023575921077281237, 0.003990840632468462, 0.0018203317886218429, 0.0021405739244073629, 0.0016726944595575333, 0.0012383309658616781, 0.0019450359977781773, 0.0016902202041819692, 0.0056546926498413086, 0.0046556098386645317, 0.0022917918395251036, 0.0082989213988184929, 0.0056811165995895863, 0.0046357824467122555, 0.0018234876915812492, } };
const TfArray<51, int> quant32_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[51] = { -43, 90, -2467, -3128, 31746, -1863, 19393, 5396, 4815, -29, -2400, 6410, 2012, -205, 5820, 423, 76413, 203, 221, 7822, -3363, 6529, 19489, 654, 12255, -253, -571, 10977, -133, -4313, -557, -2196, 17454, -254, 25992, 11704, -3129, 1491, -114, 5153, 7698, -44, -4319, -528, 2, -363, -499, 9621, 153, 744, -18, };
const TfArray<1, int> tensor_dimension33 = { 1, { 51 } };
const TfArray<51, float> quant33_scale = { 51, { 0.00036814931081607938, 0.00033517018891870975, 0.00042562762973830104, 0.00028571279835887253, 0.00010294386447640136, 0.00035650795325636864, 0.00013300922000780702, 0.000164826909895055, 0.00065441516926512122, 0.00035191481583751738, 0.00023952050833031535, 0.00028211486642248929, 0.00022623935365118086, 0.00010735006799222901, 0.00051222980255261064, 0.00047666329191997647, 0.00013305879838299006, 0.00029642001027241349, 0.0002433715999359265, 0.00010918870248133317, 9.9323624453973025e-05, 0.0004920769133605063, 4.8930000048130751e-05, 0.00016065196541603655, 0.00019133587193209678, 0.00032287478097714484, 0.00042812613537535071, 0.00036905880551785231, 0.00040264826384373009, 0.00017314913566224277, 0.0002052343770628795, 0.00046246912097558379, 0.00013839936582371593, 0.00013690385094378144, 0.00017072622722480446, 0.00015571486437693238, 0.00016124256944749504, 0.00025668495800346136, 0.00018303064280189574, 0.00032670586369931698, 0.00035883055534213781, 0.00033710576826706529, 0.0001912723237182945, 0.00021003691654186696, 0.00010053056757897139, 0.00011724141950253397, 0.00014618161367252469, 0.00036070405622012913, 0.00041431692079640925, 0.0002974294766318053, 0.00022540768259204924, } };
const TfArray<51, int> quant33_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data34[1*3*3*51] = { 
  /* [0][0][][] */ -6,-17,-4,-7,-1,-8,-2,-1,7,-15,-3,-10,-40,-18,5,-13,14,-3,12,-29,19,3,-24,-4,-9,-4,0,8,16,-39,23,4,-6,0,-46,6,-23,-5,7,-1,3,2,8,-20,-5,-1,-6,19,2,1,-20, 29,12,0,3,-58,11,-21,-4,-6,13,24,-9,127,72,-36,-12,-127,4,-4,-15,33,-6,-127,0,41,127,-16,7,-127,48,-2,-17,-31,25,-13,-54,46,-32,20,-20,-24,-127,54,8,33,29,-49,-69,-38,-2,-127, -18,5,-8,-10,-10,-8,8,-2,8,-11,-6,-9,-39,-30,8,-19,17,-3,8,-27,4,5,5,-4,-8,-5,2,6,14,-37,-11,1,-4,-3,-35,11,-32,-4,-6,-1,4,-4,-3,21,8,-7,-5,23,0,-1,-22, 
  /* [0][1][][] */ 7,43,-25,21,-127,-20,-26,-10,-1,-8,-1,-28,-17,115,-8,-22,-120,-127,-19,-73,-3,5,-113,-16,-123,3,-15,30,-7,53,127,-20,7,29,-75,-27,11,-20,28,-34,-34,-1,28,-127,0,16,-16,-25,-22,8,13, 127,82,127,127,42,127,-127,127,-127,127,127,127,41,127,-127,127,-48,101,127,-127,127,-127,104,127,7,-43,127,-127,94,127,-55,127,-127,127,-127,-127,127,127,127,127,-127,109,127,30,127,127,127,-127,127,125,108, 16,-127,-22,11,-61,-23,-19,-12,3,-16,-4,-26,-23,74,1,-33,-123,26,-19,-55,15,-1,-89,-6,-127,5,-21,29,-2,38,-84,-27,2,3,-6,-18,6,-22,4,-29,-21,2,-2,91,13,0,-24,-23,-24,-1,18, 
  /* [0][2][][] */ -21,-15,-4,-15,-33,-4,-1,-3,7,-18,-9,-3,-27,-31,11,-10,21,-6,-4,4,-7,9,-15,-1,11,-1,-4,6,-11,-69,48,1,-12,-4,-54,0,-16,-29,-13,0,7,-4,-3,-35,-13,-19,-12,2,-8,-13,-1, 12,12,-1,-12,-78,-33,15,-21,-3,4,-15,-19,54,81,10,-34,-57,8,-5,3,45,2,-60,20,70,-84,-20,24,36,44,-7,-23,-5,48,31,21,40,-93,-21,-31,-1,28,22,11,26,12,58,4,-10,-127,26, -16,2,-10,-18,-33,0,1,-6,10,-16,-6,-2,-27,-25,6,-12,30,-4,-11,-7,-12,7,-15,7,9,-1,-4,5,-14,-53,-29,-2,-6,-1,-17,3,-23,-12,-6,-1,9,-4,-13,27,0,-15,11,7,-9,-2,0, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant34_scale = { 51, { 0.015646345913410187, 0.014244732446968555, 0.01808917336165905, 0.012142794206738472, 0.0043751141056418419, 0.015151588246226311, 0.0056528914719820023, 0.0070051434449851513, 0.027812644839286804, 0.014956379309296608, 0.010179621167480946, 0.011989881284534931, 0.0096151726320385933, 0.0045623779296875, 0.021769765764474869, 0.020258190110325813, 0.0056549985893070698, 0.01259784959256649, 0.010343292728066444, 0.0046405196189880371, 0.0042212540283799171, 0.020913269370794296, 0.0020795250311493874, 0.0068277083337306976, 0.0081317741423845291, 0.013722177594900131, 0.018195360898971558, 0.015684999525547028, 0.017112551257014275, 0.0073588378727436066, 0.0087224608287215233, 0.019654937088489532, 0.0058819730766117573, 0.005818413570523262, 0.0072558647952973843, 0.0066178813576698303, 0.0068528088741004467, 0.010909110307693481, 0.0077788024209439754, 0.013884998857975006, 0.015250298194587231, 0.014326995238661766, 0.0081290733069181442, 0.0089265685528516769, 0.0042725489474833012, 0.0049827601760625839, 0.0062127183191478252, 0.015329922549426556, 0.017608469352126122, 0.012640752829611301, 0.009579826146364212, } };
const TfArray<51, int> quant34_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data35[51] = { -17664, 5218, 34738, 26624, 48313, 7017, -3769, -5, 27716, 76810, 16676, 27365, 13842, 6281, -7760, 55278, 130036, 21738, 1205, 3872, 1033, 42619, 6511, 51433, -11943, 19415, 54511, -9412, 15042, -3539, 11351, 13515, 16, 26235, 21559, -28029, -7454, 120, 35844, 24735, 13112, 72551, 29724, 4716, 24196, 48079, 13644, 21370, 22836, 46394, 918, };
const TfArray<1, int> tensor_dimension35 = { 1, { 51 } };
const TfArray<51, float> quant35_scale = { 51, { 0.00014807342085987329, 6.1513492255471647e-05, 7.2414208261761814e-05, 6.1121274484321475e-05, 4.514827742241323e-05, 6.7952882091049105e-05, 0.0001939899375429377, 0.00020091650367248803, 5.3053256124258041e-05, 6.3601633883081377e-05, 0.0001143808476626873, 7.3754272307269275e-05, 5.2726471039932221e-05, 0.00019807736680377275, 6.8780318542849272e-05, 7.1705464506521821e-05, 3.613488661358133e-05, 3.1486240914091468e-05, 8.1625876191537827e-05, 0.00015161451301537454, 0.00015502526366617531, 5.6507462431909516e-05, 0.00019457605958450586, 0.00010342661698814481, 4.0692921174922958e-05, 4.9268739530816674e-05, 5.0053517043124884e-05, 7.5565541919786483e-05, 6.6021195380017161e-05, 0.00010387390648247674, 5.7940338592743501e-05, 6.3139603298623115e-05, 0.00011570521019166335, 6.7120607127435505e-05, 4.519198409980163e-05, 9.3006128736305982e-05, 0.00012337317457422614, 0.00017251637473236769, 0.00012795640213880688, 6.3371153373736888e-05, 6.8221590481698513e-05, 3.7969555705785751e-05, 6.3376450270880014e-05, 5.4954649385763332e-05, 0.00014302073395811021, 0.00013224099529907107, 0.00010044852388091385, 5.6255928939208388e-05, 9.2055619461461902e-05, 4.1490839066682383e-05, 8.8113425590563565e-05, } };
const TfArray<51, int> quant35_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data36[51*1*1*25] = { 
  /* [0][0][][] */ 37,-43,-20,-35,24,-12,-26,-26,24,-51,-20,-16,-19,-28,35,9,35,13,14,28,-49,6,127,84,-44, 
  /* [1][0][][] */ -15,127,3,-42,5,43,21,-13,-51,0,-6,-11,0,-16,-29,-55,-13,52,47,-4,-17,70,44,8,-27, 
  /* [2][0][][] */ 38,-81,-45,-18,-12,-28,-17,-57,-2,-54,-51,-55,5,16,-31,40,-17,89,30,-95,33,43,-127,-35,54, 
  /* [3][0][][] */ 23,-50,24,-30,-14,-48,4,-49,-3,55,38,-64,125,0,21,-113,127,-28,18,-71,-32,-24,4,-6,50, 
  /* [4][0][][] */ 48,89,-21,48,18,-45,-10,-86,16,17,-32,-22,18,-10,-89,15,-14,26,127,-1,0,-27,-50,8,-121, 
  /* [5][0][][] */ 57,33,29,14,-40,-60,-48,39,102,10,12,-17,-42,97,5,-113,-27,19,127,52,72,-21,-41,101,-78, 
  /* [6][0][][] */ -11,28,-9,-62,-10,9,-21,-20,33,-53,-27,-12,2,-36,-12,4,-20,-59,16,-25,127,-30,38,29,-10, 
  /* [7][0][][] */ 9,38,-58,4,127,-27,31,-23,-29,0,-14,-17,86,-1,10,13,-72,24,10,-1,29,4,-65,-16,24, 
  /* [8][0][][] */ -10,-68,-5,-23,27,-23,0,-68,12,-26,10,9,13,-11,-74,36,0,75,33,-62,35,-6,-110,-86,127, 
  /* [9][0][][] */ 90,107,-82,-36,-66,-114,-113,35,-79,17,36,-102,-1,-2,66,-127,-31,-45,-68,-16,-5,7,-61,4,-28, 
  /* [10][0][][] */ 5,-13,-35,-31,-19,12,-45,33,-50,-30,-2,22,16,-67,-2,-9,6,127,-86,17,-6,-22,66,-68,-51, 
  /* [11][0][][] */ -26,109,-42,56,-27,14,15,37,-43,-17,-43,127,-31,24,-18,-80,37,6,16,-3,12,-21,-110,-61,58, 
  /* [12][0][][] */ -44,-37,52,46,-25,3,55,-9,16,-43,-20,-6,-46,9,11,127,53,-1,-6,15,-38,81,12,22,-38, 
  /* [13][0][][] */ 10,-40,35,-30,0,17,-6,-15,-23,57,-9,2,-8,21,-19,-23,12,1,8,8,37,4,-24,-127,99, 
  /* [14][0][][] */ 3,21,2,-30,-7,15,22,-40,72,-95,-105,20,3,7,-40,-6,17,14,107,17,11,-51,45,127,-16, 
  /* [15][0][][] */ 10,-1,-127,23,11,-79,-24,-2,2,-77,-36,-12,-19,0,-7,-24,-81,29,-9,-63,-46,-81,-8,48,-36, 
  /* [16][0][][] */ 21,-3,-32,8,-15,89,42,-127,-24,-85,-64,34,-12,39,31,-62,80,1,-55,-2,-2,11,31,85,-88, 
  /* [17][0][][] */ 18,125,-16,-24,-23,62,-41,113,-17,74,5,25,92,108,20,-127,58,49,0,70,59,30,-1,-3,41, 
  /* [18][0][][] */ 40,71,80,-51,-4,-6,127,-18,-39,-11,54,-8,88,-2,-15,31,-71,36,-19,-69,-41,-67,-37,28,-41, 
  /* [19][0][][] */ -56,35,20,46,6,-38,42,-17,24,-73,-19,-40,-25,-6,-2,60,-11,30,-6,-41,-75,-24,4,127,-115, 
  /* [20][0][][] */ -14,29,-41,32,41,-35,60,25,5,-21,-61,-20,65,-45,44,-17,33,127,-27,7,-121,0,22,-76,30, 
  /* [21][0][][] */ -49,-74,6,-4,15,-12,-34,10,-8,-1,66,-5,-3,-63,-33,-17,0,58,13,-2,-36,-30,-7,63,-127, 
  /* [22][0][][] */ 2,58,47,-23,21,85,-4,28,53,-5,-47,127,-88,4,-33,8,-41,-14,-24,-15,-14,-76,-18,-44,10, 
  /* [23][0][][] */ -90,-27,-22,-4,-17,-14,-33,-13,29,24,2,-34,-2,3,-40,33,-19,-49,14,-25,40,60,-72,-30,-127, 
  /* [24][0][][] */ -22,-36,54,-5,-18,109,49,13,36,45,61,87,99,-35,-40,-47,86,-89,-37,86,32,0,127,-44,86, 
  /* [25][0][][] */ -7,-20,-24,1,48,-35,15,-46,44,-81,-32,19,-31,-15,-27,127,12,62,31,-50,-11,9,-102,14,30, 
  /* [26][0][][] */ 82,-2,25,-67,-5,54,0,-76,-102,33,48,-3,-1,-69,-57,20,-10,-6,107,20,-126,-36,-7,8,-127, 
  /* [27][0][][] */ -58,32,14,127,1,94,35,-20,1,67,50,-25,-4,38,7,-65,40,23,-5,14,23,92,7,-14,40, 
  /* [28][0][][] */ 13,64,-43,46,-14,-8,-21,44,-16,14,2,-47,0,58,32,-127,-42,61,23,6,15,43,9,0,18, 
  /* [29][0][][] */ -26,19,-27,-6,-25,54,-21,49,4,4,18,0,-10,62,-14,5,-24,-4,7,6,28,127,-5,-11,-12, 
  /* [30][0][][] */ 42,88,-69,123,-45,-110,13,56,-29,-1,-21,-105,10,127,71,-98,-92,78,24,-15,-18,1,-12,-4,53, 
  /* [31][0][][] */ 4,7,13,87,45,-57,4,-24,42,60,25,-83,-31,18,-3,2,-86,-127,75,-14,29,34,-66,44,99, 
  /* [32][0][][] */ -37,-5,56,0,-54,81,-127,9,25,50,78,26,-38,32,27,2,51,-41,17,24,10,-44,35,-38,64, 
  /* [33][0][][] */ -73,30,-24,-2,-52,-19,-127,52,20,-39,-91,-33,53,-6,-41,-16,-61,51,69,-27,-36,-29,21,119,-30, 
  /* [34][0][][] */ 86,-3,-39,109,9,77,-66,127,-41,22,-48,-17,45,51,-54,27,21,42,-17,-25,-1,75,-63,43,-75, 
  /* [35][0][][] */ 29,64,63,36,-38,-8,-5,-2,38,-16,45,-11,9,-6,-6,15,127,54,15,-2,12,47,-19,-19,56, 
  /* [36][0][][] */ -13,28,-10,-7,-52,-11,-39,-3,-10,-48,37,-42,-19,-1,39,32,127,19,-28,-61,-11,47,31,68,-65, 
  /* [37][0][][] */ -9,-4,-2,-7,5,12,4,-1,-3,-6,-10,14,-3,-3,127,13,1,-6,-4,-14,0,1,8,0,-4, 
  /* [38][0][][] */ 23,-66,28,-53,8,40,-21,15,-5,91,-25,7,-36,-1,8,-127,-31,-64,-55,56,-2,0,57,-71,9, 
  /* [39][0][][] */ -34,-43,-28,127,51,13,26,-47,15,36,23,103,35,-52,9,7,53,-68,-41,-21,7,42,-51,-6,10, 
  /* [40][0][][] */ -1,-23,-2,-1,-21,-13,2,-2,2,7,-1,-16,127,-2,-1,-64,59,-13,15,-36,7,-1,6,-11,38, 
  /* [41][0][][] */ 22,-103,-44,-10,7,-117,-50,52,-6,-61,-7,127,13,87,119,-35,56,-57,-107,11,-13,-22,-51,16,5, 
  /* [42][0][][] */ -39,50,55,-30,49,45,-19,-39,7,16,-22,6,96,-54,59,127,-19,-4,-90,23,-68,44,-46,-17,-28, 
  /* [43][0][][] */ 42,116,-47,106,-19,-55,25,18,-80,-15,-15,-104,-4,83,1,-121,-82,127,47,-30,33,11,8,32,-2, 
  /* [44][0][][] */ -43,-51,-32,32,11,-101,-25,21,60,-13,12,-4,32,127,36,-39,-56,59,-88,-36,38,28,-39,-3,-43, 
  /* [45][0][][] */ 52,-62,-45,-35,-10,-42,-98,-40,2,7,-37,-3,-65,-93,-3,-127,22,-56,65,-9,-56,18,1,-5,107, 
  /* [46][0][][] */ -17,-65,38,6,-22,4,-9,57,-127,61,-8,-11,-16,65,21,5,7,-47,68,-34,-96,9,-39,27,62, 
  /* [47][0][][] */ 15,-65,-36,7,-22,37,-70,-8,74,22,9,-23,-7,28,-38,-12,-6,34,37,-15,3,55,3,-116,127, 
  /* [48][0][][] */ -4,19,-17,-53,-16,33,44,-22,-21,-44,-14,127,40,-1,-31,25,77,28,-46,-12,-6,-89,-49,-22,-59, 
  /* [49][0][][] */ 59,-21,-5,-4,127,14,14,-16,-40,95,34,41,74,22,12,-85,-118,-48,-60,23,-51,-82,52,-46,93, 
  /* [50][0][][] */ -25,26,-10,31,-12,-40,-1,4,-2,-9,16,-13,7,42,27,-5,13,127,17,-9,-13,10,-70,-21,68, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 51,1,1,25 } };
const TfArray<51, float> quant36_scale = { 51, { 0.0062931203283369541, 0.002614323515444994, 0.0030776038765907288, 0.0025976542383432388, 0.0019188018050044775, 0.0028879973106086254, 0.0082445722073316574, 0.0085389511659741402, 0.0022547633852809668, 0.0027030692435801029, 0.0048611857928335667, 0.0031345565803349018, 0.0022408750373870134, 0.0084182880818843842, 0.0029231635853648186, 0.0030474821105599403, 0.0015357326483353972, 0.0013381651369854808, 0.003469099523499608, 0.0064436164684593678, 0.0065885735675692558, 0.0024015670642256737, 0.0082694822922348976, 0.0043956311419606209, 0.0017294491408392787, 0.0020939214155077934, 0.0021272744052112103, 0.0032115355134010315, 0.0028059007599949837, 0.0044146408326923847, 0.0024624643847346306, 0.0026834330055862665, 0.0049174712039530277, 0.0028526256792247295, 0.0019206593278795481, 0.003952760249376297, 0.0052433600649237633, 0.0073319459334015846, 0.0054381471127271652, 0.0026932740584015846, 0.0028994176536798477, 0.0016137061174958944, 0.0026934992056339979, 0.0023355726152658463, 0.0060783810913562775, 0.0056202420964837074, 0.0042690620757639408, 0.0023908768780529499, 0.0039123636670410633, 0.0017633606912568212, 0.0037448203656822443, } };
const TfArray<51, int> quant36_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[25] = { 229, -3189, 619, 2691, 2442, 12, 67027, -24632, 706, -11238, 46700, -857, 202, 1112, -2022, 70064, 749, 67796, 41, 21456, 50436, 6248, 83252, 50453, 73101, };
const TfArray<1, int> tensor_dimension37 = { 1, { 25 } };
const TfArray<25, float> quant37_scale = { 25, { 0.0001166531874332577, 7.5084877607878298e-05, 9.45300780585967e-05, 6.804621807532385e-05, 7.5508913141675293e-05, 6.9064320996403694e-05, 6.7475266405381262e-05, 0.00014686751819681376, 6.4086860220413655e-05, 0.00018365657888352871, 0.00013086163380648941, 6.20726787019521e-05, 7.968063437147066e-05, 8.7312415416818112e-05, 0.00027677754405885935, 0.00010094271419802681, 6.8969435233157128e-05, 9.218438935931772e-05, 7.5330011895857751e-05, 6.9552050263155252e-05, 7.6285381510388106e-05, 5.0722232117550448e-05, 6.7415574449114501e-05, 0.00017928396118804812, 9.6808791568037122e-05, } };
const TfArray<25, int> quant37_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data38[1*3*3*25] = { 
  /* [0][0][][] */ 63,94,77,106,87,57,-59,48,87,-44,-92,72,69,51,-7,-86,82,-69,51,-99,-63,84,-75,-106,-56, 80,113,96,127,118,82,-92,86,112,127,-112,100,91,79,-12,-99,104,-97,94,-113,-92,105,-98,-84,-102, 29,43,46,40,57,46,-36,43,46,-115,-41,36,40,57,-6,-48,44,-28,48,-66,-43,53,-34,-10,-60, 
  /* [0][1][][] */ 93,99,105,97,96,88,-97,83,96,-37,-104,90,94,83,87,-106,97,-94,81,-110,-86,93,-101,-127,-68, 127,127,127,112,127,127,-127,127,127,108,-127,127,127,127,112,-127,127,-127,127,-127,-127,127,-127,-103,-127, 52,51,61,45,62,61,-55,65,62,-110,-47,52,62,86,28,-59,52,-48,59,-98,-67,67,-52,-8,-79, 
  /* [0][2][][] */ 34,35,43,34,39,33,-45,36,24,-13,-36,37,36,47,-127,-47,37,-38,45,-65,-39,31,-45,-49,-25, 55,50,52,42,46,55,-56,55,47,34,-42,53,47,78,-109,-55,45,-50,61,-65,-60,49,-54,-37,-46, 24,27,30,21,21,41,-26,35,34,-77,-6,23,27,52,-22,-28,19,-26,32,-44,-32,34,-18,9,-42, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant38_scale = { 25, { 0.0049577602185308933, 0.0031911071855574846, 0.0040175281465053558, 0.0028919642791152, 0.0032091287430375814, 0.0029352335259318352, 0.0028676986694335938, 0.006241869181394577, 0.0027236915193498135, 0.007805404718965292, 0.0055616190657019615, 0.0026380887720733881, 0.0033864269498735666, 0.0037107777316123247, 0.011763045564293861, 0.0042900652624666691, 0.0029312008991837502, 0.0039178365841507912, 0.0032015254255384207, 0.0029559622053056955, 0.0032421285286545753, 0.0021556948777288198, 0.0028651619795709848, 0.0076195681467652321, 0.0041143735870718956, } };
const TfArray<25, int> quant38_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[25] = { 416, 8229, -12542, -8507, -25827, -33404, 2011, 13180, -18153, 19631, 1448, -35001, -17118, -1726, 36792, 11218, 11352, 13162, -9201, 1536, -96, 29225, -12152, 1856, -8214, };
const TfArray<1, int> tensor_dimension39 = { 1, { 25 } };
const TfArray<25, float> quant39_scale = { 25, { 0.00012497275019995868, 7.1038753958418965e-05, 0.00011725220247171819, 0.00014166861365083605, 0.00017937026859726757, 7.6904419984202832e-05, 0.00010288623889209703, 4.9549154937267303e-05, 0.00012899008288513869, 5.9615253121592104e-05, 4.7904206439852715e-05, 0.00018736555648501962, 8.8537744886707515e-05, 0.00011038788943551481, 3.0021750717423856e-05, 7.7976110333111137e-05, 0.00012346413859631866, 6.7017543187830597e-05, 0.00010800128802657127, 0.00013275080709718168, 0.00011835225450340658, 0.00013572991883847862, 8.7272783275693655e-05, 5.2485665946733207e-05, 6.0024529375368729e-05, } };
const TfArray<25, int> quant39_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data40[25*1*1*25] = { 
  /* [0][0][][] */ -26,25,-17,-57,33,111,-21,12,-127,37,5,-12,30,-28,-12,24,-28,-30,-7,-19,-18,86,-76,-5,-29, 
  /* [1][0][][] */ -14,-109,-62,-3,-34,94,-127,-10,48,-1,-86,22,-80,60,108,28,12,-22,18,-13,80,-34,93,-24,108, 
  /* [2][0][][] */ -127,-52,-39,-46,26,121,-21,21,25,71,84,-29,-32,49,-10,8,-19,0,-78,14,-6,90,-99,-29,13, 
  /* [3][0][][] */ -59,-45,6,37,15,18,47,47,-59,25,-30,127,-39,33,31,31,54,-4,-28,-10,0,-44,-19,10,-36, 
  /* [4][0][][] */ 127,-12,-15,-101,-5,-28,57,20,53,15,7,66,63,26,7,37,-20,-8,6,91,49,19,-5,31,-62, 
  /* [5][0][][] */ -79,21,-45,50,19,45,50,-70,63,47,97,62,-22,-3,103,68,-78,25,-32,-22,-8,113,-127,38,44, 
  /* [6][0][][] */ 10,31,-36,87,-51,63,36,11,-27,-45,11,-70,-13,-46,-77,38,-66,123,-33,127,42,2,-59,10,59, 
  /* [7][0][][] */ 127,31,-25,-14,66,-66,26,25,26,20,105,-22,-33,20,-7,-63,53,-38,13,87,82,-12,35,-67,52, 
  /* [8][0][][] */ 102,-5,51,127,-2,-107,30,0,45,-52,-44,-12,42,-58,5,-49,21,41,-12,116,17,17,29,25,-46, 
  /* [9][0][][] */ 103,-127,19,-20,21,81,17,60,95,-24,-44,-100,-30,121,10,-94,49,5,75,52,-7,-96,11,-21,15, 
  /* [10][0][][] */ 15,14,97,-57,31,5,-113,57,86,78,-37,-127,-15,-10,101,5,64,24,30,108,18,103,-110,89,42, 
  /* [11][0][][] */ 39,-6,-34,73,18,8,32,127,-68,5,38,-6,-9,-28,96,-29,7,-8,-5,56,-4,59,-11,19,-26, 
  /* [12][0][][] */ -14,37,-85,-6,-27,-6,-45,34,126,-62,36,127,102,-39,-2,-122,120,96,0,5,-120,46,-74,18,41, 
  /* [13][0][][] */ -35,-22,-11,-127,-22,6,-77,-40,60,27,58,-15,-41,-12,115,23,-6,6,9,64,33,-98,-3,17,-29, 
  /* [14][0][][] */ 127,-41,30,29,19,16,-40,8,-40,38,71,1,-75,61,-60,-6,108,-4,-51,33,-5,-29,69,19,36, 
  /* [15][0][][] */ 15,4,46,80,-53,-31,51,-10,127,-37,72,-33,-1,-11,-33,-71,-1,25,-23,7,-97,20,-44,35,-36, 
  /* [16][0][][] */ -127,-7,66,107,53,14,-83,30,-52,9,31,-66,-43,9,-8,-85,36,27,-8,37,-11,-8,9,-51,23, 
  /* [17][0][][] */ 18,17,69,16,-127,-36,-66,-3,46,-42,-42,120,-15,32,44,-48,26,-27,7,87,-9,-62,3,21,-14, 
  /* [18][0][][] */ -7,119,-61,127,55,-8,-35,-27,58,42,-91,-8,2,-1,-26,43,2,7,-24,45,13,83,8,9,-26, 
  /* [19][0][][] */ -81,44,24,61,-11,36,-22,-28,-126,59,-9,1,59,-53,37,9,11,3,-12,-79,-18,41,127,-14,4, 
  /* [20][0][][] */ 106,-30,56,6,-75,-91,-32,-9,-19,-91,127,-15,3,14,-74,-53,21,46,-23,31,52,-51,92,23,-38, 
  /* [21][0][][] */ -82,-50,107,-80,-21,4,4,-47,127,-45,-14,-4,50,55,-92,72,-5,-18,11,3,8,-72,-42,-55,35, 
  /* [22][0][][] */ 63,-28,106,127,-113,-78,52,20,0,-4,97,11,-6,5,35,35,34,-6,-17,-27,21,-28,42,-4,71, 
  /* [23][0][][] */ -13,-12,-10,116,17,18,-29,-7,23,55,-7,0,10,55,9,22,-3,3,-127,44,-38,96,-13,-40,-41, 
  /* [24][0][][] */ -37,-91,-16,114,30,46,45,-17,9,33,-28,35,-32,108,16,-17,48,-14,24,5,17,127,30,-42,57, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 25,1,1,25 } };
const TfArray<25, float> quant40_scale = { 25, { 0.0053113414905965328, 0.0030191470868885517, 0.0049832183867692947, 0.0060209156945347786, 0.0076232361607253551, 0.0032684379257261753, 0.0043726651929318905, 0.0021058390848338604, 0.005482078529894352, 0.0025336481630802155, 0.0020359286572784185, 0.0079630361869931221, 0.0037628540303558111, 0.0046914853155612946, 0.001275924383662641, 0.0033139847218990326, 0.0052472259849309921, 0.0028482456691563129, 0.0045900545082986355, 0.0056419093161821365, 0.0050299707800149918, 0.0057685216888785362, 0.003709093201905489, 0.0022306407336145639, 0.0025510424748063087, } };
const TfArray<25, int> quant40_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data41[25] = { 1154, 26, -6118, 776, -9187, 8203, -2662, 2759, -675, 5718, 13979, 27005, -211, 10285, 31652, 10662, -1941, -1616, -655, 50028, 4553, 33415, -711, -276, 107, };
const TfArray<1, int> tensor_dimension41 = { 1, { 25 } };
const TfArray<25, float> quant41_scale = { 25, { 0.00015319499652832747, 0.00026316792354919016, 0.00052989984396845102, 0.00027883419534191489, 0.00012369855539873242, 0.0003527285298332572, 0.00065291981445625424, 0.00016326412151101977, 0.00040586903924122453, 0.00033235200680792332, 0.00049816729733720422, 0.00018421435379423201, 0.00011740298941731453, 0.00024555469281040132, 0.00020821257203351706, 0.00038199799018912017, 0.00043359957635402679, 0.0002948619076050818, 0.00023016890918370336, 0.00015952826652210206, 0.0003389329940546304, 0.00020799927006009966, 0.00036330011789686978, 0.00041522362153045833, 0.00024705741088837385, } };
const TfArray<25, int> quant41_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data42[1*3*3*25] = { 
  /* [0][0][][] */ 14,14,-3,4,-2,-14,6,12,-5,12,-1,8,10,-7,-4,5,-11,-42,8,6,0,-6,-11,-10,-22, 29,25,0,-17,83,-18,-25,15,-7,-9,-8,-36,60,-12,-77,-26,36,-78,7,-25,-47,-26,26,1,65, -1,20,-8,6,-34,-9,8,25,-4,12,-6,17,6,13,7,4,-16,-37,-15,-4,8,-4,-12,7,-55, 
  /* [0][1][][] */ 60,42,-6,36,106,-30,-19,16,1,-49,-20,-11,117,-8,-65,-10,-30,56,37,-127,43,-56,-49,-121,-55, 127,90,127,127,127,127,127,127,127,-127,-127,-127,27,35,-127,-127,127,127,93,-72,-127,-127,127,74,127, -24,31,-12,9,43,-60,-46,-4,-22,-12,-2,9,88,17,-6,3,-61,39,-127,-98,52,-18,-47,54,-82, 
  /* [0][2][][] */ -21,-53,-6,-14,-41,-8,6,1,-10,10,5,6,-33,-20,11,9,-13,-6,18,33,3,4,-3,127,-1, -5,-127,-18,-20,33,-54,-28,0,-16,-31,-8,-35,127,-127,-10,0,20,-30,22,-36,-66,18,6,-79,47, -5,-42,-6,-9,-42,-6,6,16,-7,20,2,10,-22,-28,14,1,-18,-5,-35,-12,22,-4,-8,-52,-36, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant42_scale = { 25, { 0.0065107871778309345, 0.011184636503458023, 0.022520743310451508, 0.011850452981889248, 0.0052571883425116539, 0.014990962110459805, 0.027749091386795044, 0.0069387247785925865, 0.017249433323740959, 0.014124959707260132, 0.021172109991312027, 0.0078291101381182671, 0.0049896268174052238, 0.010436074808239937, 0.0088490340858697891, 0.016234913840889931, 0.018427981063723564, 0.01253163069486618, 0.0097821783274412155, 0.0067799510434269905, 0.014404651708900928, 0.0088399685919284821, 0.015440254472196102, 0.017647003754973412, 0.010499939322471619, } };
const TfArray<25, int> quant42_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data43[25] = { 1461, 12418, -8092, 4884, 52208, 2659, -18469, -41647, 60387, 18298, 29394, 46533, 6346, 16287, 33604, -8583, -27886, -11320, 827, 58621, 5875, 39350, 53520, 10041, 33314, };
const TfArray<1, int> tensor_dimension43 = { 1, { 25 } };
const TfArray<25, float> quant43_scale = { 25, { 0.00014183625171426684, 0.00014676334103569388, 0.00015999242896214128, 8.035879727685824e-05, 0.00010579430090729147, 5.2503361075650901e-05, 6.541289621964097e-05, 0.00022417596483137459, 7.3822600825224072e-05, 0.00010956606274703518, 5.7450160966254771e-05, 0.00010950897558359429, 0.0002532739017624408, 0.00012312554463278502, 6.8726061726920307e-05, 7.5678784924093634e-05, 9.9831362604163587e-05, 0.0001030261191772297, 0.00015620271733496338, 4.7080637159524485e-05, 0.00017315561126451939, 0.00010919696796918288, 6.4328793087042868e-05, 7.7452481491491199e-05, 9.4700757472310215e-05, } };
const TfArray<25, int> quant43_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data44[25*1*1*12] = { 
  /* [0][0][][] */ 34,83,82,-34,-6,-69,-30,-27,-25,127,3,-10, 
  /* [1][0][][] */ 35,-7,53,5,17,-127,-15,12,-11,-9,-12,4, 
  /* [2][0][][] */ -16,2,-8,28,127,-11,11,5,5,-4,40,17, 
  /* [3][0][][] */ -37,-52,70,-60,62,127,29,34,11,31,-33,1, 
  /* [4][0][][] */ 13,-75,31,-49,-100,-76,-43,-127,-13,54,-61,17, 
  /* [5][0][][] */ -5,31,-105,119,50,49,-115,-30,14,-95,127,8, 
  /* [6][0][][] */ 35,23,-32,-4,75,127,-44,39,-7,-53,107,12, 
  /* [7][0][][] */ 127,0,53,8,31,-22,-25,-12,-2,51,86,-2, 
  /* [8][0][][] */ -93,31,-52,4,-82,-7,81,-28,-23,24,-127,-17, 
  /* [9][0][][] */ 7,10,-30,-49,-57,-40,127,-10,-33,78,36,20, 
  /* [10][0][][] */ 24,3,-98,-63,-12,127,-6,0,-103,-6,55,12, 
  /* [11][0][][] */ -103,-117,61,79,127,-43,21,-58,-72,14,-125,-18, 
  /* [12][0][][] */ -45,36,-14,3,51,-8,-127,-26,8,7,-6,1, 
  /* [13][0][][] */ 33,-1,49,-9,23,-127,-14,24,-17,-36,0,6, 
  /* [14][0][][] */ 27,-17,-127,33,-15,-38,-1,12,45,125,-27,-15, 
  /* [15][0][][] */ 127,-12,20,-6,-39,-16,80,-3,-16,35,57,7, 
  /* [16][0][][] */ 127,-27,86,-2,18,2,26,8,6,13,64,-1, 
  /* [17][0][][] */ 123,74,10,35,-127,-27,4,16,48,31,13,35, 
  /* [18][0][][] */ -17,-6,-22,4,-9,127,0,-10,16,31,-30,14, 
  /* [19][0][][] */ -51,13,25,-92,85,-11,43,-127,73,49,8,-26, 
  /* [20][0][][] */ -1,-10,-3,7,-43,4,127,5,5,-18,-12,15, 
  /* [21][0][][] */ 38,-37,19,-127,19,-92,8,33,-40,-23,49,-4, 
  /* [22][0][][] */ -120,-84,86,-85,127,-107,-4,-74,-43,64,-20,21, 
  /* [23][0][][] */ 47,-14,46,-6,21,-127,-31,16,-21,-31,72,31, 
  /* [24][0][][] */ -7,-29,43,20,-113,-18,127,16,-10,1,-111,3, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 25,1,1,12 } };
const TfArray<25, float> quant44_scale = { 25, { 0.0060280407778918743, 0.0062374421395361423, 0.0067996778525412083, 0.0034152488224208355, 0.0044962577521800995, 0.0022313927765935659, 0.0027800481766462326, 0.0095274783670902252, 0.0031374604441225529, 0.004656557459384203, 0.0024416318628937006, 0.0046541313640773296, 0.010764140635728836, 0.0052328356541693211, 0.0029208576306700706, 0.0032163483556360006, 0.0042428327724337578, 0.0043786098249256611, 0.0066386153921484947, 0.0020009269937872887, 0.0073591135442256927, 0.0046408711932599545, 0.0027339737862348557, 0.0032917303033173084, 0.0040247822180390358, } };
const TfArray<25, int> quant44_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data45[12] = { -55509, -10553, -23366, 116312, -416, 84557, 1122, 1036, 49799, 239, 97857, -5449, };
const TfArray<1, int> tensor_dimension45 = { 1, { 12 } };
const TfArray<12, float> quant45_scale = { 12, { 0.00012036659609293565, 0.0001102292153518647, 0.00015322459512390196, 4.4847605749964714e-05, 6.638876220677048e-05, 0.00022742403962183744, 7.2828166594263166e-05, 0.00011838272621389478, 6.63395258015953e-05, 9.0267560153733939e-05, 5.3646937885787338e-05, 6.0715334257110953e-05, } };
const TfArray<12, int> quant45_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data46[1*3*3*12] = { 
  /* [0][0][][] */ 100,74,69,-47,93,-64,26,117,-57,74,-95,-62, 88,94,90,-106,94,-85,47,110,-127,101,-103,-35, -5,30,21,-69,37,-57,3,15,-77,38,-33,-127, 
  /* [0][1][][] */ 123,101,105,-54,114,-98,84,127,-71,94,-124,-91, 127,127,127,-127,127,-127,127,125,-127,127,-127,-79, -2,43,27,-82,50,-81,50,25,-76,56,-39,14, 
  /* [0][2][][] */ 47,42,53,-9,46,-46,55,30,-23,33,-47,-5, 70,53,55,-46,63,-60,91,33,-28,47,-46,-1, 14,15,3,-23,25,-51,43,1,-2,29,-14,10, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant46_scale = { 12, { 0.0051155802793800831, 0.0046847416087985039, 0.0065120449289679527, 0.0019060232443735003, 0.0028215222992002964, 0.0096655217930674553, 0.0030951970256865025, 0.0050312657840549946, 0.0028194298502057791, 0.0038363712374120951, 0.0022799947764724493, 0.0025804017204791307, } };
const TfArray<12, int> quant46_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data47[12] = { 54147, 10858, -1216, 17399, 12263, 66646, -13327, -24185, -45, -22085, 31092, -6904, };
const TfArray<1, int> tensor_dimension47 = { 1, { 12 } };
const TfArray<12, float> quant47_scale = { 12, { 6.5501371864229441e-05, 0.00013023294741287827, 0.00013028326793573797, 0.00040780490962788463, 0.00017334640142507851, 8.2951701187994331e-05, 0.00041566157597117126, 0.00052563211647793651, 0.00025161859230138361, 0.0004071475996170193, 0.00022032430570106953, 0.00014728093810845166, } };
const TfArray<12, int> quant47_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data48[12*1*1*12] = { 
  /* [0][0][][] */ 107,28,-126,127,-23,27,103,-36,50,-35,0,29, 
  /* [1][0][][] */ 3,51,103,50,-17,18,-41,127,-25,-59,-4,22, 
  /* [2][0][][] */ 127,-36,1,-16,-7,14,-42,45,15,23,0,1, 
  /* [3][0][][] */ 26,-26,-3,22,-18,-82,-28,-13,14,-11,2,127, 
  /* [4][0][][] */ 65,127,-20,-42,-75,-40,19,13,28,10,17,22, 
  /* [5][0][][] */ 71,6,-30,-2,-14,-3,1,-6,-64,-127,5,3, 
  /* [6][0][][] */ 11,30,-5,-11,127,-4,3,5,-7,-16,1,3, 
  /* [7][0][][] */ -35,6,14,-11,24,127,-9,3,-17,10,-10,54, 
  /* [8][0][][] */ -53,-7,-21,-20,22,76,14,45,-14,-39,113,-127, 
  /* [9][0][][] */ -127,12,38,-6,24,29,2,6,38,66,5,9, 
  /* [10][0][][] */ 47,-6,-29,62,-43,-127,3,3,22,-31,-8,-13, 
  /* [11][0][][] */ 59,-1,41,2,-108,127,-56,-55,-12,-11,-18,-7, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 12,1,1,12 } };
const TfArray<12, float> quant48_scale = { 12, { 0.0027838083915412426, 0.0055349003523588181, 0.0055370386689901352, 0.01733170822262764, 0.0073672216385602951, 0.0035254473332315683, 0.017665617167949677, 0.022339364513754845, 0.010693789459764957, 0.017303772270679474, 0.0093637825921177864, 0.00625943997874856, } };
const TfArray<12, int> quant48_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data49[12] = { -2865, 3274, 377, 29818, 905, 7409, 8808, -1156, 13664, 42020, 2438, -5396, };
const TfArray<1, int> tensor_dimension49 = { 1, { 12 } };
const TfArray<12, float> quant49_scale = { 12, { 0.00012895163672510535, 0.00037061944021843374, 9.86943778116256e-05, 0.00010518081398913637, 9.1655754658859223e-05, 0.00018990434182342142, 9.9477110779844224e-05, 0.00031722351559437811, 0.00012707540008705109, 0.00013663795834872872, 0.00034283817512914538, 0.00044379389146342874, } };
const TfArray<12, int> quant49_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data50[1*3*3*12] = { 
  /* [0][0][][] */ 48,15,2,-89,118,-7,-50,2,37,-14,-26,-4, 48,2,127,-118,127,-33,-100,-1,25,-23,4,5, 4,4,26,14,-7,10,-33,6,16,-14,4,-1, 
  /* [0][1][][] */ 51,-24,109,-127,-5,93,-127,41,127,-96,-127,-84, 127,-127,102,-90,-25,127,-49,95,122,-127,30,127, -30,33,-32,29,7,-32,-63,-127,-8,26,18,4, 
  /* [0][2][][] */ -6,12,53,-51,1,-27,11,-34,-28,13,6,1, -16,11,-55,-22,5,-48,-18,-78,-38,39,-8,-4, 27,0,29,-4,-1,9,12,122,11,-10,5,-7, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant50_scale = { 12, { 0.0054804445244371891, 0.015751326456665993, 0.0041945111006498337, 0.0044701844453811646, 0.0038953693583607674, 0.0080709345638751984, 0.004227777011692524, 0.01348199974745512, 0.0054007042199373245, 0.0058071129024028778, 0.014570621773600578, 0.018861239776015282, } };
const TfArray<12, int> quant50_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data51[12] = { -9904, 11006, 16208, -3898, 33233, 22155, -5813, -7080, 4906, -4911, 12847, 27062, };
const TfArray<1, int> tensor_dimension51 = { 1, { 12 } };
const TfArray<12, float> quant51_scale = { 12, { 8.7450964201707393e-05, 0.00035013523302040994, 0.00014640155131928623, 0.00017768116958905011, 0.0001566126593388617, 0.00018048720085062087, 0.00066637847339734435, 0.00019826246716547757, 0.00050239713164046407, 0.00027829493046738207, 0.00035703100729733706, 0.0001558571239002049, } };
const TfArray<12, int> quant51_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data52[12*1*1*6] = { 
  /* [0][0][][] */ 127,30,71,89,80,16, 
  /* [1][0][][] */ -77,127,8,-9,7,-18, 
  /* [2][0][][] */ -16,-38,118,-57,127,-32, 
  /* [3][0][][] */ 0,-35,-37,92,-38,127, 
  /* [4][0][][] */ -33,127,0,-76,0,-30, 
  /* [5][0][][] */ 87,3,-6,-127,-9,-120, 
  /* [6][0][][] */ 58,-22,120,-17,127,-17, 
  /* [7][0][][] */ 14,-10,11,127,-1,-9, 
  /* [8][0][][] */ 41,8,0,-127,-1,13, 
  /* [9][0][][] */ -39,-12,-2,127,1,-11, 
  /* [10][0][][] */ -13,45,-4,-127,-3,10, 
  /* [11][0][][] */ 67,1,-9,-127,-13,-104, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 12,1,1,6 } };
const TfArray<12, float> quant52_scale = { 12, { 0.0037166660185903311, 0.014880746603012085, 0.0062220655381679535, 0.0075514498166739941, 0.0066560381092131138, 0.0076707061380147934, 0.028321085497736931, 0.0084261549636721611, 0.021351877599954605, 0.011827534064650536, 0.015173817984759808, 0.006623927503824234, } };
const TfArray<12, int> quant52_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data53[6] = { 81320, 3863, 991, 92072, 1957, 7592, };
const TfArray<1, int> tensor_dimension53 = { 1, { 6 } };
const TfArray<6, float> quant53_scale = { 6, { 0.00010787542123580351, 6.0094498621765524e-05, 0.00059640244580805302, 8.8006185251288116e-05, 0.00075780687620863318, 7.84919029683806e-05, } };
const TfArray<6, int> quant53_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data54[1*3*3*6] = { 
  /* [0][0][][] */ -52,70,-8,-39,121,51, -77,96,29,-84,-53,77, -41,57,-8,-43,-66,31, 
  /* [0][1][][] */ -76,91,127,-76,-127,75, -127,127,-71,-127,73,127, -73,63,-52,-64,35,58, 
  /* [0][2][][] */ -25,25,-119,-35,-9,23, -54,30,38,-57,-31,51, -34,11,58,-23,26,23, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 1,3,3,6 } };
const TfArray<6, float> quant54_scale = { 6, { 0.0045847054570913315, 0.002554016187787056, 0.025347102433443069, 0.0037402627058327198, 0.032206792384386063, 0.0033359057269990444, } };
const TfArray<6, int> quant54_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data55[6] = { 34781, -15697, 32845, 39225, 4444, 15269, };
const TfArray<1, int> tensor_dimension55 = { 1, { 6 } };
const TfArray<6, float> quant55_scale = { 6, { 0.00012745322601404041, 0.00044507082202471793, 7.9447680036537349e-05, 0.00018784769054036587, 5.3506599215324968e-05, 0.00049561966443434358, } };
const TfArray<6, int> quant55_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data56[6*1*1*3] = { 
  /* [0][0][][] */ -115,127,-25, 
  /* [1][0][][] */ 127,-15,-4, 
  /* [2][0][][] */ 47,8,127, 
  /* [3][0][][] */ -60,-7,-127, 
  /* [4][0][][] */ 70,3,127, 
  /* [5][0][][] */ 3,-8,-127, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 6,1,1,3 } };
const TfArray<6, float> quant56_scale = { 6, { 0.0054364558309316635, 0.018984280526638031, 0.0033888025209307671, 0.0080125527456402779, 0.002282298170030117, 0.021140417084097862, } };
const TfArray<6, int> quant56_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data57[3] = { 51128, 370, 33605, };
const TfArray<1, int> tensor_dimension57 = { 1, { 3 } };
const TfArray<3, float> quant57_scale = { 3, { 5.72123535675928e-05, 0.00033019695547409356, 8.2097736594732851e-05, } };
const TfArray<3, int> quant57_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data58[1*3*3*3] = { 
  /* [0][0][][] */ 2,-10,-1, 14,-3,1, 9,14,-6, 
  /* [0][1][][] */ -2,8,2, 127,112,127, 79,-127,-109, 
  /* [0][2][][] */ -5,-9,8, -108,-6,25, -105,15,-35, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 1,3,3,3 } };
const TfArray<3, float> quant58_scale = { 3, { 0.0024315249174833298, 0.014033370651304722, 0.0034891536924988031, } };
const TfArray<3, int> quant58_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data59[3] = { 38241, 26859, 53010, };
const TfArray<1, int> tensor_dimension59 = { 1, { 3 } };
const TfArray<3, float> quant59_scale = { 3, { 5.9599402447929606e-05, 6.7112378019373864e-05, 5.2594343287637457e-05, } };
const TfArray<3, int> quant59_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data60[3*3*3*1] = { 
  /* [0][0][][] */ 76, 118, 55, 
  /* [0][1][][] */ -46, -25, 27, 
  /* [0][2][][] */ -64, -127, -68, 
  /* [1][0][][] */ 42, -63, 23, 
  /* [1][1][][] */ -84, 127, -53, 
  /* [1][2][][] */ 43, -68, 30, 
  /* [2][0][][] */ 58, -9, -75, 
  /* [2][1][][] */ 124, -29, -127, 
  /* [2][2][][] */ 68, -1, -62, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 3,3,3,1 } };
const TfArray<3, float> quant60_scale = { 3, { 0.015197847038507462, 0.017113655805587769, 0.013411556370556355, } };
const TfArray<3, int> quant60_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant62_scale = { 1, { 0.023444175720214844, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,48,48,6 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,49,49,6 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,24,24,6 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant66_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,25,25,12 } };
const TfArray<1, float> quant69_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant70_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant71_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant72_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant73_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant73_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,13,13,25 } };
const TfArray<1, float> quant74_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<4, int> tensor_dimension75 = { 4, { 1,6,6,25 } };
const TfArray<1, float> quant75_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant75_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<4, int> tensor_dimension76 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant76_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant76_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<4, int> tensor_dimension77 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant77_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant78_scale = { 1, { 0.021565821021795273, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant79_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<4, int> tensor_dimension80 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant80_scale = { 1, { 0.021268991753458977, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant81_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant82_scale = { 1, { 0.020094728097319603, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<4, int> tensor_dimension83 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant83_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant83_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<4, int> tensor_dimension84 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant84_scale = { 1, { 0.016437996178865433, } };
const TfArray<1, int> quant84_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<4, int> tensor_dimension85 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant85_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant85_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant86_scale = { 1, { 0.021541042253375053, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,7,7,51 } };
const TfArray<1, float> quant87_scale = { 1, { 0.021541042253375053, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,3,3,51 } };
const TfArray<1, float> quant88_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<4, int> tensor_dimension89 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant89_scale = { 1, { 0.019060665741562843, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant90_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant91_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant91_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<4, int> tensor_dimension92 = { 4, { 1,1,1,102 } };
const TfArray<1, float> quant92_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,16 } };
const TfArray<1, float> quant93_scale = { 1, { 0.02629668265581131, } };
const TfArray<1, int> quant93_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,10 } };
const TfArray<1, float> quant94_scale = { 1, { 0.074006758630275726, } };
const TfArray<1, int> quant94_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 1,10 } };
const TfArray<1, float> quant95_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant95_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,60,59 } };
const TfArray<1, int> outputs0 = { 1, { 61 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 61,58,57 } };
const TfArray<1, int> outputs1 = { 1, { 62 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 62,56,55 } };
const TfArray<1, int> outputs2 = { 1, { 63 } };
const TfArray<2, int> inputs3 = { 2, { 63,1 } };
const TfArray<1, int> outputs3 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata4 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 64,54,53 } };
const TfArray<1, int> outputs4 = { 1, { 65 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 65,52,51 } };
const TfArray<1, int> outputs5 = { 1, { 66 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 66,50,49 } };
const TfArray<1, int> outputs6 = { 1, { 67 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 67,48,47 } };
const TfArray<1, int> outputs7 = { 1, { 68 } };
const TfArray<2, int> inputs8 = { 2, { 68,1 } };
const TfArray<1, int> outputs8 = { 1, { 69 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 69,46,45 } };
const TfArray<1, int> outputs9 = { 1, { 70 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 70,44,43 } };
const TfArray<1, int> outputs10 = { 1, { 71 } };
const TfLiteDepthwiseConvParams opdata11 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 71,42,41 } };
const TfArray<1, int> outputs11 = { 1, { 72 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 72,40,39 } };
const TfArray<1, int> outputs12 = { 1, { 73 } };
const TfArray<2, int> inputs13 = { 2, { 73,1 } };
const TfArray<1, int> outputs13 = { 1, { 74 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 74,38,37 } };
const TfArray<1, int> outputs14 = { 1, { 75 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 75,36,35 } };
const TfArray<1, int> outputs15 = { 1, { 76 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 76,34,33 } };
const TfArray<1, int> outputs16 = { 1, { 77 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 77,32,31 } };
const TfArray<1, int> outputs17 = { 1, { 78 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 78,30,29 } };
const TfArray<1, int> outputs18 = { 1, { 79 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 79,28,27 } };
const TfArray<1, int> outputs19 = { 1, { 80 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 80,26,25 } };
const TfArray<1, int> outputs20 = { 1, { 81 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 81,24,23 } };
const TfArray<1, int> outputs21 = { 1, { 82 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 82,22,21 } };
const TfArray<1, int> outputs22 = { 1, { 83 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 83,20,19 } };
const TfArray<1, int> outputs23 = { 1, { 84 } };
const TfLiteDepthwiseConvParams opdata24 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 84,18,17 } };
const TfArray<1, int> outputs24 = { 1, { 85 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 85,16,15 } };
const TfArray<1, int> outputs25 = { 1, { 86 } };
const TfArray<2, int> inputs26 = { 2, { 86,1 } };
const TfArray<1, int> outputs26 = { 1, { 87 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 87,14,13 } };
const TfArray<1, int> outputs27 = { 1, { 88 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 88,12,11 } };
const TfArray<1, int> outputs28 = { 1, { 89 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 89,10,9 } };
const TfArray<1, int> outputs29 = { 1, { 90 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 90,8,7 } };
const TfArray<1, int> outputs30 = { 1, { 91 } };
const ALIGN(1) uint8_t opdata31[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs31 = { 2, { 91,2 } };
const TfArray<1, int> outputs31 = { 1, { 92 } };
const TfLiteFullyConnectedParams opdata32 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs32 = { 3, { 92,6,5 } };
const TfArray<1, int> outputs32 = { 1, { 93 } };
const TfLiteFullyConnectedParams opdata33 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs33 = { 3, { 93,4,3 } };
const TfArray<1, int> outputs33 = { 1, { 94 } };
const TfLiteSoftmaxParams opdata34 = { 1 };
const TfArray<1, int> inputs34 = { 1, { 94 } };
const TfArray<1, int> outputs34 = { 1, { 95 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 10404, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 5202, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 1275, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 625, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data45, (TfLiteIntArray*)&g0::tensor_dimension45, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data49, (TfLiteIntArray*)&g0::tensor_dimension49, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data51, (TfLiteIntArray*)&g0::tensor_dimension51, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data52, (TfLiteIntArray*)&g0::tensor_dimension52, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 54, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data56, (TfLiteIntArray*)&g0::tensor_dimension56, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data57, (TfLiteIntArray*)&g0::tensor_dimension57, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data58, (TfLiteIntArray*)&g0::tensor_dimension58, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension62, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14416), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 14406, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14416), (TfLiteIntArray*)&g0::tensor_dimension65, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension66, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7504), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 7500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7504), (TfLiteIntArray*)&g0::tensor_dimension70, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3600), (TfLiteIntArray*)&g0::tensor_dimension71, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension72, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant72))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4240), (TfLiteIntArray*)&g0::tensor_dimension73, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension74, 4225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4240), (TfLiteIntArray*)&g0::tensor_dimension75, 900, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant75))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension76, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant76))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension77, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant77))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension78, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension79, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension80, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant80))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension81, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension82, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension83, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant83))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension84, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant84))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension85, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant85))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2512), (TfLiteIntArray*)&g0::tensor_dimension86, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension87, 2499, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3696), (TfLiteIntArray*)&g0::tensor_dimension88, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2768), (TfLiteIntArray*)&g0::tensor_dimension89, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant89))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension90, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension91, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1344), (TfLiteIntArray*)&g0::tensor_dimension92, 102, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension93, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension94, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant94))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension95, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant95))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[35] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[35] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_MEAN, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 96, };
const size_t tflNodes_subgraph_index[] = {0, 35, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  95, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 96;
  for (size_t i = 0; i < 96; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 35; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
